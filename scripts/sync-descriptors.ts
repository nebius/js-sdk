import fs from 'fs';
import path from 'path';

/*
 * Copies the generated google.protobuf descriptor types into the generator folder so that
 * the generator can bootstrap from a cold start (before src/generated is produced).
 *
 * Source: src/generated/google/protobuf/index.ts
 * Dest:   scripts/generator/google/protobuf/index.ts
 *
 * We also rewrite any relative imports inside the copied file that point to the runtime layer
 * so that they resolve correctly from the generator location (../../src/runtime -> ../runtime etc.).
 */

const projectRoot = path.resolve(__dirname, '..'); // scripts/
// projectRoot points to <repo>/scripts, we want <repo>/src/... so go one level up only once.
const repoRoot = path.resolve(projectRoot, '.'); // scripts -> scripts (placeholder)
const SRC_FILE = path.join(repoRoot, 'src', 'generated', 'google', 'protobuf', 'index.ts');
const DEST_FILE = path.join(projectRoot, 'scripts', 'generator', 'google', 'protobuf', 'index.ts');

function rewriteImports(code: string): string {
  // The generated file imports from ../../../runtime/protos relative to src/generated/google/protobuf
  // After copying into scripts/generator/google/protobuf we need a path from there to src/runtime/protos.
  // Location math:
  //   original file location: src/generated/google/protobuf/index.ts
  //   new file location:      scripts/generator/google/protobuf/index.ts
  // We want to keep runtime imports pointing at the runtime sources under src/runtime.
  // From new location to src/runtime/protos: ../../../../src/runtime/protos
  return code.replace(
    /from\s+"\.\.\/\.\.\/\.\.\/runtime\/protos/g,
    'from "../../../../src/runtime/protos',
  );
}

function main() {
  if (!fs.existsSync(SRC_FILE)) {
    console.warn(
      `[sync-descriptors] Skip: source file not found (expected after clean). ${SRC_FILE}`,
    );
    return;
  }
  let code = fs.readFileSync(SRC_FILE, 'utf8');
  code = rewriteImports(code);
  const header = '/* Vendored copy. AUTO-GENERATED by sync-descriptors.ts. DO NOT EDIT. */\n';
  fs.mkdirSync(path.dirname(DEST_FILE), { recursive: true });
  fs.writeFileSync(DEST_FILE, header + '\n' + code, 'utf8');
  console.log(
    '[sync-descriptors] Updated',
    path.relative(path.resolve(projectRoot, '..'), DEST_FILE),
  );
}

if (require.main === module) {
  main();
}
