/* Generated by Nebius TS generator. DO NOT EDIT! */

import { BinaryReader, BinaryWriter, DeepPartial, isSet, Long, bytesFromBase64, base64FromBytes, wkt, createEnum, unknownFieldsSymbol } from "../../../src/runtime/protos/index"
import { protoRegistry } from "../protos/registry";
import type { Dayjs, Duration, MessageFns, EnumInstance, EnumClass } from "../../../src/runtime/protos/index";

// file: annotations.proto
export type ResourceBehavior = EnumInstance<"UNRECOGNIZED" | "RESOURCE_BEHAVIOR_UNSPECIFIED" | "MOVABLE" | "UNNAMED" | "IMMUTABLE_NAME">;

interface ResourceBehaviorValueMembers {
  /**
   *  The behavior of the resource is unspecified.
   *  Avoid using this default value.
   *
   */
  readonly RESOURCE_BEHAVIOR_UNSPECIFIED: EnumInstance<"UNRECOGNIZED" | "RESOURCE_BEHAVIOR_UNSPECIFIED" | "MOVABLE" | "UNNAMED" | "IMMUTABLE_NAME">;
  /**
   *  Indicates that the resource can be moved to another parent, typically an
   *  IAM container, though not necessarily limited to this.
   *  This behavior suggests that the `metadata.parent_id` attribute could be modified.
   *
   */
  readonly MOVABLE: EnumInstance<"UNRECOGNIZED" | "RESOURCE_BEHAVIOR_UNSPECIFIED" | "MOVABLE" | "UNNAMED" | "IMMUTABLE_NAME">;
  /**
   *  Indicates that the resource name can be unspecified or does not follow
   *  uniqueness requirement within parent_id and resource type.
   *
   */
  readonly UNNAMED: EnumInstance<"UNRECOGNIZED" | "RESOURCE_BEHAVIOR_UNSPECIFIED" | "MOVABLE" | "UNNAMED" | "IMMUTABLE_NAME">;
  /**
   *  Indicates that the resource is named, and the name cannot be changed after
   *  it is created. It is strongly recommended to do srvices with renaming
   *  capability, as the guidelines suggest.
   *
   */
  readonly IMMUTABLE_NAME: EnumInstance<"UNRECOGNIZED" | "RESOURCE_BEHAVIOR_UNSPECIFIED" | "MOVABLE" | "UNNAMED" | "IMMUTABLE_NAME">;
}
type ResourceBehaviorClass = EnumClass<"UNRECOGNIZED" | "RESOURCE_BEHAVIOR_UNSPECIFIED" | "MOVABLE" | "UNNAMED" | "IMMUTABLE_NAME"> & ResourceBehaviorValueMembers;

const ResourceBehavior_VALUE_COMMENTS = {
  RESOURCE_BEHAVIOR_UNSPECIFIED: " The behavior of the resource is unspecified.\n Avoid using this default value.\n",
  MOVABLE: " Indicates that the resource can be moved to another parent, typically an\n IAM container, though not necessarily limited to this.\n This behavior suggests that the `metadata.parent_id` attribute could be modified.\n",
  UNNAMED: " Indicates that the resource name can be unspecified or does not follow\n uniqueness requirement within parent_id and resource type.\n",
  IMMUTABLE_NAME: " Indicates that the resource is named, and the name cannot be changed after\n it is created. It is strongly recommended to do srvices with renaming\n capability, as the guidelines suggest.\n",
};

export const ResourceBehavior = createEnum("nebius.ResourceBehavior", {
  /**  The behavior of the resource is unspecified. */
  /**  Avoid using this default value. */
  /**  */
  RESOURCE_BEHAVIOR_UNSPECIFIED: 0,
  /**  Indicates that the resource can be moved to another parent, typically an */
  /**  IAM container, though not necessarily limited to this. */
  /**  This behavior suggests that the `metadata.parent_id` attribute could be modified. */
  /**  */
  MOVABLE: 1,
  /**  Indicates that the resource name can be unspecified or does not follow */
  /**  uniqueness requirement within parent_id and resource type. */
  /**  */
  UNNAMED: 2,
  /**  Indicates that the resource is named, and the name cannot be changed after */
  /**  it is created. It is strongly recommended to do srvices with renaming */
  /**  capability, as the guidelines suggest. */
  /**  */
  IMMUTABLE_NAME: 3,
}, ResourceBehavior_VALUE_COMMENTS) as ResourceBehaviorClass;

protoRegistry.registerEnum(ResourceBehavior);

export type FieldBehavior = EnumInstance<"UNRECOGNIZED" | "FIELD_BEHAVIOR_UNSPECIFIED" | "IMMUTABLE" | "IDENTIFIER" | "INPUT_ONLY" | "OUTPUT_ONLY" | "MEANINGFUL_EMPTY_VALUE" | "NON_EMPTY_DEFAULT">;

interface FieldBehaviorValueMembers {
  readonly FIELD_BEHAVIOR_UNSPECIFIED: EnumInstance<"UNRECOGNIZED" | "FIELD_BEHAVIOR_UNSPECIFIED" | "IMMUTABLE" | "IDENTIFIER" | "INPUT_ONLY" | "OUTPUT_ONLY" | "MEANINGFUL_EMPTY_VALUE" | "NON_EMPTY_DEFAULT">;
  /**
   *  This indicates that the field can't be changed during a resource update.
   *  Changing the field value will cause an `INVALID_ARGUMENT` error.
   *  Resource recreate requires a change of the field value.
   *
   */
  readonly IMMUTABLE: EnumInstance<"UNRECOGNIZED" | "FIELD_BEHAVIOR_UNSPECIFIED" | "IMMUTABLE" | "IDENTIFIER" | "INPUT_ONLY" | "OUTPUT_ONLY" | "MEANINGFUL_EMPTY_VALUE" | "NON_EMPTY_DEFAULT">;
  /**
   *  Indicates field is a resource ID, so it MUST be present on a resource
   *  update, but MUST NOT be set on create.
   *  Otherwise, RPC will fail with the `INVALID_ARGUMENT` error
   *
   */
  readonly IDENTIFIER: EnumInstance<"UNRECOGNIZED" | "FIELD_BEHAVIOR_UNSPECIFIED" | "IMMUTABLE" | "IDENTIFIER" | "INPUT_ONLY" | "OUTPUT_ONLY" | "MEANINGFUL_EMPTY_VALUE" | "NON_EMPTY_DEFAULT">;
  /**
   *  Indicates field is not present in output.
   *
   */
  readonly INPUT_ONLY: EnumInstance<"UNRECOGNIZED" | "FIELD_BEHAVIOR_UNSPECIFIED" | "IMMUTABLE" | "IDENTIFIER" | "INPUT_ONLY" | "OUTPUT_ONLY" | "MEANINGFUL_EMPTY_VALUE" | "NON_EMPTY_DEFAULT">;
  /**
   *  Indicates field can't be set on create or changed on update.
   *  Otherwise, RPC will fail with the `INVALID_ARGUMENT` error
   *
   */
  readonly OUTPUT_ONLY: EnumInstance<"UNRECOGNIZED" | "FIELD_BEHAVIOR_UNSPECIFIED" | "IMMUTABLE" | "IDENTIFIER" | "INPUT_ONLY" | "OUTPUT_ONLY" | "MEANINGFUL_EMPTY_VALUE" | "NON_EMPTY_DEFAULT">;
  /**
   *  Indicates that an empty message and a null have different semantics.
   *  Usually, that field is a feature spec message: its empty message enables
   *  that feature, and null disables it. Such a message is different from `bool`
   *  because it already has some feature parameters, or they can be added later
   *  in a backward-compatible way.
   *  IMPORTANT: if the message itself is recursive, this behavior is forced.
   *
   */
  readonly MEANINGFUL_EMPTY_VALUE: EnumInstance<"UNRECOGNIZED" | "FIELD_BEHAVIOR_UNSPECIFIED" | "IMMUTABLE" | "IDENTIFIER" | "INPUT_ONLY" | "OUTPUT_ONLY" | "MEANINGFUL_EMPTY_VALUE" | "NON_EMPTY_DEFAULT">;
  /**
   *  Indicates that an empty (default) value will be filled by the server.
   *  Usually, that field is a feature spec value, which by default is computed.
   *  Values marked with this annotation won't raise error if they are not set
   *  and the returned value is not equal to protobuf default.
   *
   *  IMPORTANT:
   *  Updating this value from explicit to default may not lead to Update call in
   *  some tools (eg Terraform).
   *  Compound values (messages, lists and maps) may result in unpredictable
   *  updates (see examples in guidelines).
   *
   */
  readonly NON_EMPTY_DEFAULT: EnumInstance<"UNRECOGNIZED" | "FIELD_BEHAVIOR_UNSPECIFIED" | "IMMUTABLE" | "IDENTIFIER" | "INPUT_ONLY" | "OUTPUT_ONLY" | "MEANINGFUL_EMPTY_VALUE" | "NON_EMPTY_DEFAULT">;
}
type FieldBehaviorClass = EnumClass<"UNRECOGNIZED" | "FIELD_BEHAVIOR_UNSPECIFIED" | "IMMUTABLE" | "IDENTIFIER" | "INPUT_ONLY" | "OUTPUT_ONLY" | "MEANINGFUL_EMPTY_VALUE" | "NON_EMPTY_DEFAULT"> & FieldBehaviorValueMembers;

const FieldBehavior_VALUE_COMMENTS = {
  IMMUTABLE: " This indicates that the field can't be changed during a resource update.\n Changing the field value will cause an `INVALID_ARGUMENT` error.\n Resource recreate requires a change of the field value.\n",
  IDENTIFIER: " Indicates field is a resource ID, so it MUST be present on a resource\n update, but MUST NOT be set on create.\n Otherwise, RPC will fail with the `INVALID_ARGUMENT` error\n",
  INPUT_ONLY: " Indicates field is not present in output.\n",
  OUTPUT_ONLY: " Indicates field can't be set on create or changed on update.\n Otherwise, RPC will fail with the `INVALID_ARGUMENT` error\n",
  MEANINGFUL_EMPTY_VALUE: " Indicates that an empty message and a null have different semantics.\n Usually, that field is a feature spec message: its empty message enables\n that feature, and null disables it. Such a message is different from `bool`\n because it already has some feature parameters, or they can be added later\n in a backward-compatible way.\n IMPORTANT: if the message itself is recursive, this behavior is forced.\n",
  NON_EMPTY_DEFAULT: " Indicates that an empty (default) value will be filled by the server.\n Usually, that field is a feature spec value, which by default is computed.\n Values marked with this annotation won't raise error if they are not set\n and the returned value is not equal to protobuf default.\n\n IMPORTANT:\n Updating this value from explicit to default may not lead to Update call in\n some tools (eg Terraform).\n Compound values (messages, lists and maps) may result in unpredictable\n updates (see examples in guidelines).\n",
};

export const FieldBehavior = createEnum("nebius.FieldBehavior", {
  FIELD_BEHAVIOR_UNSPECIFIED: 0,
  /**  This indicates that the field can't be changed during a resource update. */
  /**  Changing the field value will cause an `INVALID_ARGUMENT` error. */
  /**  Resource recreate requires a change of the field value. */
  /**  */
  IMMUTABLE: 2,
  /**  Indicates field is a resource ID, so it MUST be present on a resource */
  /**  update, but MUST NOT be set on create. */
  /**  Otherwise, RPC will fail with the `INVALID_ARGUMENT` error */
  /**  */
  IDENTIFIER: 3,
  /**  Indicates field is not present in output. */
  /**  */
  INPUT_ONLY: 4,
  /**  Indicates field can't be set on create or changed on update. */
  /**  Otherwise, RPC will fail with the `INVALID_ARGUMENT` error */
  /**  */
  OUTPUT_ONLY: 5,
  /**  Indicates that an empty message and a null have different semantics. */
  /**  Usually, that field is a feature spec message: its empty message enables */
  /**  that feature, and null disables it. Such a message is different from `bool` */
  /**  because it already has some feature parameters, or they can be added later */
  /**  in a backward-compatible way. */
  /**  IMPORTANT: if the message itself is recursive, this behavior is forced. */
  /**  */
  MEANINGFUL_EMPTY_VALUE: 6,
  /**  Indicates that an empty (default) value will be filled by the server. */
  /**  Usually, that field is a feature spec value, which by default is computed. */
  /**  Values marked with this annotation won't raise error if they are not set */
  /**  and the returned value is not equal to protobuf default. */
  /**  */
  /**  IMPORTANT: */
  /**  Updating this value from explicit to default may not lead to Update call in */
  /**  some tools (eg Terraform). */
  /**  Compound values (messages, lists and maps) may result in unpredictable */
  /**  updates (see examples in guidelines). */
  /**  */
  NON_EMPTY_DEFAULT: 7,
}, FieldBehavior_VALUE_COMMENTS) as FieldBehaviorClass;

protoRegistry.registerEnum(FieldBehavior);

export interface ServicePySDKSettings {
  $type: "nebius.ServicePySDKSettings";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name: string;
}

export const ServicePySDKSettings: MessageFns<ServicePySDKSettings, "nebius.ServicePySDKSettings"> = {
  $type: "nebius.ServicePySDKSettings" as const,

  encode(message: ServicePySDKSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): ServicePySDKSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServicePySDKSettings();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
        if (tag !== 26) break;
        message.name = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): ServicePySDKSettings {
    return {
      $type: "nebius.ServicePySDKSettings",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : "",
    };
  },
  toJSON(message: ServicePySDKSettings, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== "") {
      obj[pick("name", "name")] = message.name;
    }
    return obj;
  },
  create<I extends DeepPartial<ServicePySDKSettings>>(base?: I): ServicePySDKSettings {
    return ServicePySDKSettings.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<ServicePySDKSettings>>(object: I): ServicePySDKSettings {
    const message = createBaseServicePySDKSettings();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : "";
    return message;
  },
};

protoRegistry.registerMessage(ServicePySDKSettings);

function createBaseServicePySDKSettings(): ServicePySDKSettings {
  return {
    $type: "nebius.ServicePySDKSettings",
    name: "",
  };
}

export interface MethodPySDKSettings {
  $type: "nebius.MethodPySDKSettings";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name: string;
}

export const MethodPySDKSettings: MessageFns<MethodPySDKSettings, "nebius.MethodPySDKSettings"> = {
  $type: "nebius.MethodPySDKSettings" as const,

  encode(message: MethodPySDKSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): MethodPySDKSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodPySDKSettings();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
        if (tag !== 26) break;
        message.name = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): MethodPySDKSettings {
    return {
      $type: "nebius.MethodPySDKSettings",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : "",
    };
  },
  toJSON(message: MethodPySDKSettings, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== "") {
      obj[pick("name", "name")] = message.name;
    }
    return obj;
  },
  create<I extends DeepPartial<MethodPySDKSettings>>(base?: I): MethodPySDKSettings {
    return MethodPySDKSettings.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<MethodPySDKSettings>>(object: I): MethodPySDKSettings {
    const message = createBaseMethodPySDKSettings();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : "";
    return message;
  },
};

protoRegistry.registerMessage(MethodPySDKSettings);

function createBaseMethodPySDKSettings(): MethodPySDKSettings {
  return {
    $type: "nebius.MethodPySDKSettings",
    name: "",
  };
}

export interface FieldPySDKSettings {
  $type: "nebius.FieldPySDKSettings";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name: string;
}

export const FieldPySDKSettings: MessageFns<FieldPySDKSettings, "nebius.FieldPySDKSettings"> = {
  $type: "nebius.FieldPySDKSettings" as const,

  encode(message: FieldPySDKSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FieldPySDKSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldPySDKSettings();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FieldPySDKSettings {
    return {
      $type: "nebius.FieldPySDKSettings",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : "",
    };
  },
  toJSON(message: FieldPySDKSettings, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== "") {
      obj[pick("name", "name")] = message.name;
    }
    return obj;
  },
  create<I extends DeepPartial<FieldPySDKSettings>>(base?: I): FieldPySDKSettings {
    return FieldPySDKSettings.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FieldPySDKSettings>>(object: I): FieldPySDKSettings {
    const message = createBaseFieldPySDKSettings();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : "";
    return message;
  },
};

protoRegistry.registerMessage(FieldPySDKSettings);

function createBaseFieldPySDKSettings(): FieldPySDKSettings {
  return {
    $type: "nebius.FieldPySDKSettings",
    name: "",
  };
}

export interface MessagePySDKSettings {
  $type: "nebius.MessagePySDKSettings";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name: string;
}

export const MessagePySDKSettings: MessageFns<MessagePySDKSettings, "nebius.MessagePySDKSettings"> = {
  $type: "nebius.MessagePySDKSettings" as const,

  encode(message: MessagePySDKSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): MessagePySDKSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessagePySDKSettings();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): MessagePySDKSettings {
    return {
      $type: "nebius.MessagePySDKSettings",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : "",
    };
  },
  toJSON(message: MessagePySDKSettings, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== "") {
      obj[pick("name", "name")] = message.name;
    }
    return obj;
  },
  create<I extends DeepPartial<MessagePySDKSettings>>(base?: I): MessagePySDKSettings {
    return MessagePySDKSettings.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<MessagePySDKSettings>>(object: I): MessagePySDKSettings {
    const message = createBaseMessagePySDKSettings();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : "";
    return message;
  },
};

protoRegistry.registerMessage(MessagePySDKSettings);

function createBaseMessagePySDKSettings(): MessagePySDKSettings {
  return {
    $type: "nebius.MessagePySDKSettings",
    name: "",
  };
}

export interface OneofPySDKSettings {
  $type: "nebius.OneofPySDKSettings";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name: string;
}

export const OneofPySDKSettings: MessageFns<OneofPySDKSettings, "nebius.OneofPySDKSettings"> = {
  $type: "nebius.OneofPySDKSettings" as const,

  encode(message: OneofPySDKSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): OneofPySDKSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneofPySDKSettings();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): OneofPySDKSettings {
    return {
      $type: "nebius.OneofPySDKSettings",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : "",
    };
  },
  toJSON(message: OneofPySDKSettings, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== "") {
      obj[pick("name", "name")] = message.name;
    }
    return obj;
  },
  create<I extends DeepPartial<OneofPySDKSettings>>(base?: I): OneofPySDKSettings {
    return OneofPySDKSettings.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<OneofPySDKSettings>>(object: I): OneofPySDKSettings {
    const message = createBaseOneofPySDKSettings();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : "";
    return message;
  },
};

protoRegistry.registerMessage(OneofPySDKSettings);

function createBaseOneofPySDKSettings(): OneofPySDKSettings {
  return {
    $type: "nebius.OneofPySDKSettings",
    name: "",
  };
}

export interface EnumPySDKSettings {
  $type: "nebius.EnumPySDKSettings";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name: string;
}

export const EnumPySDKSettings: MessageFns<EnumPySDKSettings, "nebius.EnumPySDKSettings"> = {
  $type: "nebius.EnumPySDKSettings" as const,

  encode(message: EnumPySDKSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): EnumPySDKSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumPySDKSettings();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): EnumPySDKSettings {
    return {
      $type: "nebius.EnumPySDKSettings",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : "",
    };
  },
  toJSON(message: EnumPySDKSettings, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== "") {
      obj[pick("name", "name")] = message.name;
    }
    return obj;
  },
  create<I extends DeepPartial<EnumPySDKSettings>>(base?: I): EnumPySDKSettings {
    return EnumPySDKSettings.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<EnumPySDKSettings>>(object: I): EnumPySDKSettings {
    const message = createBaseEnumPySDKSettings();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : "";
    return message;
  },
};

protoRegistry.registerMessage(EnumPySDKSettings);

function createBaseEnumPySDKSettings(): EnumPySDKSettings {
  return {
    $type: "nebius.EnumPySDKSettings",
    name: "",
  };
}

export interface EnumValuePySDKSettings {
  $type: "nebius.EnumValuePySDKSettings";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name: string;
}

export const EnumValuePySDKSettings: MessageFns<EnumValuePySDKSettings, "nebius.EnumValuePySDKSettings"> = {
  $type: "nebius.EnumValuePySDKSettings" as const,

  encode(message: EnumValuePySDKSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): EnumValuePySDKSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumValuePySDKSettings();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): EnumValuePySDKSettings {
    return {
      $type: "nebius.EnumValuePySDKSettings",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : "",
    };
  },
  toJSON(message: EnumValuePySDKSettings, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== "") {
      obj[pick("name", "name")] = message.name;
    }
    return obj;
  },
  create<I extends DeepPartial<EnumValuePySDKSettings>>(base?: I): EnumValuePySDKSettings {
    return EnumValuePySDKSettings.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<EnumValuePySDKSettings>>(object: I): EnumValuePySDKSettings {
    const message = createBaseEnumValuePySDKSettings();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : "";
    return message;
  },
};

protoRegistry.registerMessage(EnumValuePySDKSettings);

function createBaseEnumValuePySDKSettings(): EnumValuePySDKSettings {
  return {
    $type: "nebius.EnumValuePySDKSettings",
    name: "",
  };
}

export interface RegionRouting {
  $type: "nebius.RegionRouting";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  A list of fields to extract the NID from, in order of priority.
   *  The API Gateway will check each field in sequence and use the first valid NID it finds.
   *  This overrides the default NID lookup order: `id`, `parent_id`, `metadata.id`, `metadata.parent_id`.
   *  If the field contains a non-empty list of strings, all NIDs in the array must be valid and have the same routing code.
   *
   */
  nid: string[];
  /**
   *  If true, region routing is disabled for the method.
   *  When this is set, requests will not be forwarded to a different region, even if an NID is present.
   *
   */
  disabled: boolean;
  /**
   *  In strict mode, the API Gateway returns an INVALID_ARGUMENT error to the user when a routing error occurs,
   *  rather than forwarding the request to the local region.
   *
   */
  strict: boolean;
}

export const RegionRouting: MessageFns<RegionRouting, "nebius.RegionRouting"> = {
  $type: "nebius.RegionRouting" as const,

  encode(message: RegionRouting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of (message.nid ?? [])) {
      writer.uint32(10).string(v);
    }
    if (message.disabled === true) {
      writer.uint32(16).bool(message.disabled);
    }
    if (message.strict === true) {
      writer.uint32(24).bool(message.strict);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): RegionRouting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegionRouting();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) break;
          message.nid.push(reader.string());
          continue;
        }
        case 2: {
        if (tag !== 16) break;
        message.disabled = reader.bool();
        continue;
      }
        case 3: {
        if (tag !== 24) break;
        message.strict = reader.bool();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): RegionRouting {
    return {
      $type: "nebius.RegionRouting",
      nid: globalThis.Array.isArray(object?.nid ?? object?.nid)
        ? (object.nid ?? object.nid).map((e: any) => String(e))
        : [],
      disabled: isSet(object.disabled ?? object.disabled)
        ? Boolean(object.disabled ?? object.disabled)
        : false,
      strict: isSet(object.strict ?? object.strict)
        ? Boolean(object.strict ?? object.strict)
        : false,
    };
  },
  toJSON(message: RegionRouting, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.nid?.length) {
      obj[pick("nid", "nid")] = message.nid.map((e) => e);
    }
    if (message.disabled === true) {
      obj[pick("disabled", "disabled")] = message.disabled;
    }
    if (message.strict === true) {
      obj[pick("strict", "strict")] = message.strict;
    }
    return obj;
  },
  create<I extends DeepPartial<RegionRouting>>(base?: I): RegionRouting {
    return RegionRouting.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<RegionRouting>>(object: I): RegionRouting {
    const message = createBaseRegionRouting();
    message.nid = object.nid?.map((e) => e) || [];
    message.disabled = (object.disabled !== undefined && object.disabled !== null)
      ? object.disabled
      : false;
    message.strict = (object.strict !== undefined && object.strict !== null)
      ? object.strict
      : false;
    return message;
  },
};

protoRegistry.registerMessage(RegionRouting);

function createBaseRegionRouting(): RegionRouting {
  return {
    $type: "nebius.RegionRouting",
    nid: [],
    disabled: false,
    strict: false,
  };
}

export interface DeprecationDetails {
  $type: "nebius.DeprecationDetails";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  The date when this method, service, message or field will stop working (format: YYYY-MM-DD)
   *
   */
  effectiveAt: string;
  /**
   *  A description to help users understand the reason for deprecation and suggest alternatives
   *
   */
  description: string;
}

export const DeprecationDetails: MessageFns<DeprecationDetails, "nebius.DeprecationDetails"> = {
  $type: "nebius.DeprecationDetails" as const,

  encode(message: DeprecationDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.effectiveAt !== "") {
      writer.uint32(10).string(message.effectiveAt);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): DeprecationDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeprecationDetails();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.effectiveAt = reader.string();
        continue;
      }
        case 2: {
        if (tag !== 18) break;
        message.description = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): DeprecationDetails {
    return {
      $type: "nebius.DeprecationDetails",
      effectiveAt: isSet(object.effectiveAt ?? object.effective_at)
        ? String(object.effectiveAt ?? object.effective_at)
        : "",
      description: isSet(object.description ?? object.description)
        ? String(object.description ?? object.description)
        : "",
    };
  },
  toJSON(message: DeprecationDetails, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.effectiveAt !== "") {
      obj[pick("effectiveAt", "effective_at")] = message.effectiveAt;
    }
    if (message.description !== "") {
      obj[pick("description", "description")] = message.description;
    }
    return obj;
  },
  create<I extends DeepPartial<DeprecationDetails>>(base?: I): DeprecationDetails {
    return DeprecationDetails.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<DeprecationDetails>>(object: I): DeprecationDetails {
    const message = createBaseDeprecationDetails();
    message.effectiveAt = (object.effectiveAt !== undefined && object.effectiveAt !== null)
      ? object.effectiveAt
      : "";
    message.description = (object.description !== undefined && object.description !== null)
      ? object.description
      : "";
    return message;
  },
};

protoRegistry.registerMessage(DeprecationDetails);

function createBaseDeprecationDetails(): DeprecationDetails {
  return {
    $type: "nebius.DeprecationDetails",
    effectiveAt: "",
    description: "",
  };
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.ServiceOptions",
  fullName: "nebius.api_service_name",
  fieldNo: 1191,
  name: "api_service_name",
  kind: "scalar",
  scalarType: 9,
  encode(message, writer) {
    const v = message.apiServiceName;
    if (v !== undefined) {
      writer.uint32(9530).string(v);
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1191) return false;
    if (wt !== 2) return false;
    message.apiServiceName = reader.string();
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.apiServiceName ?? object?.api_service_name;
    if (_v === undefined || _v === null) return;
    message.apiServiceName = String(_v ?? "");
  },
  toJSON(message, obj, use) {
    const _val = message.apiServiceName;
    if ((_val ?? "") !== "") obj[(use === "json" ? "apiServiceName" : "api_service_name")] = _val;
  }
});

import "../protos/protobuf/index"; // ensure module exists for augmentation
declare module '../protos/protobuf/index' {
  interface ServiceOptions {
    apiServiceName?: any;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.ServiceOptions",
  fullName: "nebius.service_deprecation_details",
  fieldNo: 1194,
  name: "service_deprecation_details",
  kind: "message",
  messageType: "nebius.DeprecationDetails",
  encode(message, writer) {
    const v = message.serviceDeprecationDetails;
    if (v !== undefined) {
      const w2 = writer.uint32(9554).fork();
      DeprecationDetails.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1194) return false;
    if (wt !== 2) return false;
    message.serviceDeprecationDetails = DeprecationDetails.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.serviceDeprecationDetails ?? object?.service_deprecation_details;
    if (_v === undefined || _v === null) return;
    message.serviceDeprecationDetails = DeprecationDetails.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.serviceDeprecationDetails;
    if (_val !== undefined) obj[(use === "json" ? "serviceDeprecationDetails" : "service_deprecation_details")] = DeprecationDetails.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface ServiceOptions {
    serviceDeprecationDetails?: DeprecationDetails;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.ServiceOptions",
  fullName: "nebius.service_py_sdk",
  fieldNo: 1195,
  name: "service_py_sdk",
  kind: "message",
  messageType: "nebius.ServicePySDKSettings",
  encode(message, writer) {
    const v = message.servicePySdk;
    if (v !== undefined) {
      const w2 = writer.uint32(9562).fork();
      ServicePySDKSettings.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1195) return false;
    if (wt !== 2) return false;
    message.servicePySdk = ServicePySDKSettings.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.servicePySdk ?? object?.service_py_sdk;
    if (_v === undefined || _v === null) return;
    message.servicePySdk = ServicePySDKSettings.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.servicePySdk;
    if (_val !== undefined) obj[(use === "json" ? "servicePySdk" : "service_py_sdk")] = ServicePySDKSettings.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface ServiceOptions {
    servicePySdk?: ServicePySDKSettings;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.MethodOptions",
  fullName: "nebius.method_deprecation_details",
  fieldNo: 1194,
  name: "method_deprecation_details",
  kind: "message",
  messageType: "nebius.DeprecationDetails",
  encode(message, writer) {
    const v = message.methodDeprecationDetails;
    if (v !== undefined) {
      const w2 = writer.uint32(9554).fork();
      DeprecationDetails.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1194) return false;
    if (wt !== 2) return false;
    message.methodDeprecationDetails = DeprecationDetails.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.methodDeprecationDetails ?? object?.method_deprecation_details;
    if (_v === undefined || _v === null) return;
    message.methodDeprecationDetails = DeprecationDetails.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.methodDeprecationDetails;
    if (_val !== undefined) obj[(use === "json" ? "methodDeprecationDetails" : "method_deprecation_details")] = DeprecationDetails.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface MethodOptions {
    methodDeprecationDetails?: DeprecationDetails;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.MethodOptions",
  fullName: "nebius.method_py_sdk",
  fieldNo: 1195,
  name: "method_py_sdk",
  kind: "message",
  messageType: "nebius.MethodPySDKSettings",
  encode(message, writer) {
    const v = message.methodPySdk;
    if (v !== undefined) {
      const w2 = writer.uint32(9562).fork();
      MethodPySDKSettings.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1195) return false;
    if (wt !== 2) return false;
    message.methodPySdk = MethodPySDKSettings.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.methodPySdk ?? object?.method_py_sdk;
    if (_v === undefined || _v === null) return;
    message.methodPySdk = MethodPySDKSettings.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.methodPySdk;
    if (_val !== undefined) obj[(use === "json" ? "methodPySdk" : "method_py_sdk")] = MethodPySDKSettings.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface MethodOptions {
    methodPySdk?: MethodPySDKSettings;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.MethodOptions",
  fullName: "nebius.region_routing",
  fieldNo: 50003,
  name: "region_routing",
  kind: "message",
  messageType: "nebius.RegionRouting",
  encode(message, writer) {
    const v = message.regionRouting;
    if (v !== undefined) {
      const w2 = writer.uint32(400026).fork();
      RegionRouting.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 50003) return false;
    if (wt !== 2) return false;
    message.regionRouting = RegionRouting.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.regionRouting ?? object?.region_routing;
    if (_v === undefined || _v === null) return;
    message.regionRouting = RegionRouting.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.regionRouting;
    if (_val !== undefined) obj[(use === "json" ? "regionRouting" : "region_routing")] = RegionRouting.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface MethodOptions {
    regionRouting?: RegionRouting;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.MessageOptions",
  fullName: "nebius.resource_behavior",
  fieldNo: 1191,
  name: "resource_behavior",
  kind: "repeated_enum",
  enumType: "nebius.ResourceBehavior",
  encode(message, writer) {
    for (const v of message.resourceBehavior ?? []) {
      ResourceBehavior?.encodeField(writer, 1191, v);
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1191) return false;
    if (wt === 2) {
      const len = reader.uint32();
      const end2 = reader.pos + len;
      while (reader.pos < end2) { (message.resourceBehavior ??= []).push(ResourceBehavior.fromNumber(reader.int32())); }
      return true;
    }
    if (wt === 0) {
      (message.resourceBehavior ??= []).push(ResourceBehavior.fromNumber(reader.int32()));
      return true;
    }
    return false;
  },
  fromJSON(message, object) {
    const _v = object?.resourceBehavior ?? object?.resource_behavior;
    if (_v === undefined || _v === null) return;
    if (globalThis.Array.isArray(_v)) {
      message.resourceBehavior = _v.map((e: any) => ResourceBehavior.fromJSON(e));
    }
  },
  toJSON(message, obj, use) {
    const _val = message.resourceBehavior;
    if (_val?.length) { obj[(use === "json" ? "resourceBehavior" : "resource_behavior")] = _val.map((e: any) => ResourceBehavior.toJSON(e)); }
  }
});

declare module '../protos/protobuf/index' {
  interface MessageOptions {
    resourceBehavior?: ResourceBehavior[];
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.MessageOptions",
  fullName: "nebius.message_deprecation_details",
  fieldNo: 1194,
  name: "message_deprecation_details",
  kind: "message",
  messageType: "nebius.DeprecationDetails",
  encode(message, writer) {
    const v = message.messageDeprecationDetails;
    if (v !== undefined) {
      const w2 = writer.uint32(9554).fork();
      DeprecationDetails.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1194) return false;
    if (wt !== 2) return false;
    message.messageDeprecationDetails = DeprecationDetails.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.messageDeprecationDetails ?? object?.message_deprecation_details;
    if (_v === undefined || _v === null) return;
    message.messageDeprecationDetails = DeprecationDetails.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.messageDeprecationDetails;
    if (_val !== undefined) obj[(use === "json" ? "messageDeprecationDetails" : "message_deprecation_details")] = DeprecationDetails.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface MessageOptions {
    messageDeprecationDetails?: DeprecationDetails;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.MessageOptions",
  fullName: "nebius.message_py_sdk",
  fieldNo: 1195,
  name: "message_py_sdk",
  kind: "message",
  messageType: "nebius.MessagePySDKSettings",
  encode(message, writer) {
    const v = message.messagePySdk;
    if (v !== undefined) {
      const w2 = writer.uint32(9562).fork();
      MessagePySDKSettings.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1195) return false;
    if (wt !== 2) return false;
    message.messagePySdk = MessagePySDKSettings.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.messagePySdk ?? object?.message_py_sdk;
    if (_v === undefined || _v === null) return;
    message.messagePySdk = MessagePySDKSettings.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.messagePySdk;
    if (_val !== undefined) obj[(use === "json" ? "messagePySdk" : "message_py_sdk")] = MessagePySDKSettings.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface MessageOptions {
    messagePySdk?: MessagePySDKSettings;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.FieldOptions",
  fullName: "nebius.field_behavior",
  fieldNo: 1191,
  name: "field_behavior",
  kind: "repeated_enum",
  enumType: "nebius.FieldBehavior",
  encode(message, writer) {
    for (const v of message.fieldBehavior ?? []) {
      FieldBehavior?.encodeField(writer, 1191, v);
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1191) return false;
    if (wt === 2) {
      const len = reader.uint32();
      const end2 = reader.pos + len;
      while (reader.pos < end2) { (message.fieldBehavior ??= []).push(FieldBehavior.fromNumber(reader.int32())); }
      return true;
    }
    if (wt === 0) {
      (message.fieldBehavior ??= []).push(FieldBehavior.fromNumber(reader.int32()));
      return true;
    }
    return false;
  },
  fromJSON(message, object) {
    const _v = object?.fieldBehavior ?? object?.field_behavior;
    if (_v === undefined || _v === null) return;
    if (globalThis.Array.isArray(_v)) {
      message.fieldBehavior = _v.map((e: any) => FieldBehavior.fromJSON(e));
    }
  },
  toJSON(message, obj, use) {
    const _val = message.fieldBehavior;
    if (_val?.length) { obj[(use === "json" ? "fieldBehavior" : "field_behavior")] = _val.map((e: any) => FieldBehavior.toJSON(e)); }
  }
});

declare module '../protos/protobuf/index' {
  interface FieldOptions {
    fieldBehavior?: FieldBehavior[];
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.FieldOptions",
  fullName: "nebius.sensitive",
  fieldNo: 1192,
  name: "sensitive",
  kind: "scalar",
  scalarType: 8,
  encode(message, writer) {
    const v = message.sensitive;
    if (v !== undefined) {
      writer.uint32(9536).bool(v);
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1192) return false;
    if (wt !== 0) return false;
    message.sensitive = reader.bool();
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.sensitive ?? object?.sensitive;
    if (_v === undefined || _v === null) return;
    message.sensitive = Boolean(_v ?? false);
  },
  toJSON(message, obj, use) {
    const _val = message.sensitive;
    if (_val === true) obj[(use === "json" ? "sensitive" : "sensitive")] = _val;
  }
});

declare module '../protos/protobuf/index' {
  interface FieldOptions {
    sensitive?: any;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.FieldOptions",
  fullName: "nebius.credentials",
  fieldNo: 1193,
  name: "credentials",
  kind: "scalar",
  scalarType: 8,
  encode(message, writer) {
    const v = message.credentials;
    if (v !== undefined) {
      writer.uint32(9544).bool(v);
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1193) return false;
    if (wt !== 0) return false;
    message.credentials = reader.bool();
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.credentials ?? object?.credentials;
    if (_v === undefined || _v === null) return;
    message.credentials = Boolean(_v ?? false);
  },
  toJSON(message, obj, use) {
    const _val = message.credentials;
    if (_val === true) obj[(use === "json" ? "credentials" : "credentials")] = _val;
  }
});

declare module '../protos/protobuf/index' {
  interface FieldOptions {
    credentials?: any;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.FieldOptions",
  fullName: "nebius.field_deprecation_details",
  fieldNo: 1194,
  name: "field_deprecation_details",
  kind: "message",
  messageType: "nebius.DeprecationDetails",
  encode(message, writer) {
    const v = message.fieldDeprecationDetails;
    if (v !== undefined) {
      const w2 = writer.uint32(9554).fork();
      DeprecationDetails.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1194) return false;
    if (wt !== 2) return false;
    message.fieldDeprecationDetails = DeprecationDetails.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.fieldDeprecationDetails ?? object?.field_deprecation_details;
    if (_v === undefined || _v === null) return;
    message.fieldDeprecationDetails = DeprecationDetails.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.fieldDeprecationDetails;
    if (_val !== undefined) obj[(use === "json" ? "fieldDeprecationDetails" : "field_deprecation_details")] = DeprecationDetails.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface FieldOptions {
    fieldDeprecationDetails?: DeprecationDetails;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.FieldOptions",
  fullName: "nebius.field_py_sdk",
  fieldNo: 1195,
  name: "field_py_sdk",
  kind: "message",
  messageType: "nebius.FieldPySDKSettings",
  encode(message, writer) {
    const v = message.fieldPySdk;
    if (v !== undefined) {
      const w2 = writer.uint32(9562).fork();
      FieldPySDKSettings.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1195) return false;
    if (wt !== 2) return false;
    message.fieldPySdk = FieldPySDKSettings.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.fieldPySdk ?? object?.field_py_sdk;
    if (_v === undefined || _v === null) return;
    message.fieldPySdk = FieldPySDKSettings.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.fieldPySdk;
    if (_val !== undefined) obj[(use === "json" ? "fieldPySdk" : "field_py_sdk")] = FieldPySDKSettings.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface FieldOptions {
    fieldPySdk?: FieldPySDKSettings;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.OneofOptions",
  fullName: "nebius.oneof_behavior",
  fieldNo: 1191,
  name: "oneof_behavior",
  kind: "repeated_enum",
  enumType: "nebius.FieldBehavior",
  encode(message, writer) {
    for (const v of message.oneofBehavior ?? []) {
      FieldBehavior?.encodeField(writer, 1191, v);
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1191) return false;
    if (wt === 2) {
      const len = reader.uint32();
      const end2 = reader.pos + len;
      while (reader.pos < end2) { (message.oneofBehavior ??= []).push(FieldBehavior.fromNumber(reader.int32())); }
      return true;
    }
    if (wt === 0) {
      (message.oneofBehavior ??= []).push(FieldBehavior.fromNumber(reader.int32()));
      return true;
    }
    return false;
  },
  fromJSON(message, object) {
    const _v = object?.oneofBehavior ?? object?.oneof_behavior;
    if (_v === undefined || _v === null) return;
    if (globalThis.Array.isArray(_v)) {
      message.oneofBehavior = _v.map((e: any) => FieldBehavior.fromJSON(e));
    }
  },
  toJSON(message, obj, use) {
    const _val = message.oneofBehavior;
    if (_val?.length) { obj[(use === "json" ? "oneofBehavior" : "oneof_behavior")] = _val.map((e: any) => FieldBehavior.toJSON(e)); }
  }
});

declare module '../protos/protobuf/index' {
  interface OneofOptions {
    oneofBehavior?: FieldBehavior[];
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.OneofOptions",
  fullName: "nebius.oneof_py_sdk",
  fieldNo: 1192,
  name: "oneof_py_sdk",
  kind: "message",
  messageType: "nebius.OneofPySDKSettings",
  encode(message, writer) {
    const v = message.oneofPySdk;
    if (v !== undefined) {
      const w2 = writer.uint32(9538).fork();
      OneofPySDKSettings.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1192) return false;
    if (wt !== 2) return false;
    message.oneofPySdk = OneofPySDKSettings.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.oneofPySdk ?? object?.oneof_py_sdk;
    if (_v === undefined || _v === null) return;
    message.oneofPySdk = OneofPySDKSettings.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.oneofPySdk;
    if (_val !== undefined) obj[(use === "json" ? "oneofPySdk" : "oneof_py_sdk")] = OneofPySDKSettings.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface OneofOptions {
    oneofPySdk?: OneofPySDKSettings;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.EnumOptions",
  fullName: "nebius.enum_py_sdk",
  fieldNo: 1191,
  name: "enum_py_sdk",
  kind: "message",
  messageType: "nebius.EnumPySDKSettings",
  encode(message, writer) {
    const v = message.enumPySdk;
    if (v !== undefined) {
      const w2 = writer.uint32(9530).fork();
      EnumPySDKSettings.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1191) return false;
    if (wt !== 2) return false;
    message.enumPySdk = EnumPySDKSettings.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.enumPySdk ?? object?.enum_py_sdk;
    if (_v === undefined || _v === null) return;
    message.enumPySdk = EnumPySDKSettings.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.enumPySdk;
    if (_val !== undefined) obj[(use === "json" ? "enumPySdk" : "enum_py_sdk")] = EnumPySDKSettings.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface EnumOptions {
    enumPySdk?: EnumPySDKSettings;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.EnumValueOptions",
  fullName: "nebius.enum_value_deprecation_details",
  fieldNo: 1194,
  name: "enum_value_deprecation_details",
  kind: "message",
  messageType: "nebius.DeprecationDetails",
  encode(message, writer) {
    const v = message.enumValueDeprecationDetails;
    if (v !== undefined) {
      const w2 = writer.uint32(9554).fork();
      DeprecationDetails.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1194) return false;
    if (wt !== 2) return false;
    message.enumValueDeprecationDetails = DeprecationDetails.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.enumValueDeprecationDetails ?? object?.enum_value_deprecation_details;
    if (_v === undefined || _v === null) return;
    message.enumValueDeprecationDetails = DeprecationDetails.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.enumValueDeprecationDetails;
    if (_val !== undefined) obj[(use === "json" ? "enumValueDeprecationDetails" : "enum_value_deprecation_details")] = DeprecationDetails.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface EnumValueOptions {
    enumValueDeprecationDetails?: DeprecationDetails;
  }
}

protoRegistry.registerExtension({
  extendee: "google.protobuf.EnumValueOptions",
  fullName: "nebius.enum_value_py_sdk",
  fieldNo: 1195,
  name: "enum_value_py_sdk",
  kind: "message",
  messageType: "nebius.EnumValuePySDKSettings",
  encode(message, writer) {
    const v = message.enumValuePySdk;
    if (v !== undefined) {
      const w2 = writer.uint32(9562).fork();
      EnumValuePySDKSettings.encode(v, w2);
      w2.join();
    }
  },
  decode(message, reader, tag) {
    const fn = tag >>> 3;
    const wt = tag & 7;
    if (fn !== 1195) return false;
    if (wt !== 2) return false;
    message.enumValuePySdk = EnumValuePySDKSettings.decode(reader, reader.uint32());
    return true;
  },
  fromJSON(message, object) {
    const _v = object?.enumValuePySdk ?? object?.enum_value_py_sdk;
    if (_v === undefined || _v === null) return;
    message.enumValuePySdk = EnumValuePySDKSettings.fromJSON(_v);
  },
  toJSON(message, obj, use) {
    const _val = message.enumValuePySdk;
    if (_val !== undefined) obj[(use === "json" ? "enumValuePySdk" : "enum_value_py_sdk")] = EnumValuePySDKSettings.toJSON(_val, use);
  }
});

declare module '../protos/protobuf/index' {
  interface EnumValueOptions {
    enumValuePySdk?: EnumValuePySDKSettings;
  }
}


// file: bootstrap.proto
