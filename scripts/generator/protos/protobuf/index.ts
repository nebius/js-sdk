/* Generated by Nebius TS generator. DO NOT EDIT! */

import { BinaryReader, BinaryWriter, DeepPartial, isSet, Long, bytesFromBase64, base64FromBytes, wkt, createEnum, unknownFieldsSymbol } from "../../../../src/runtime/protos/index"
import { protoRegistry } from "../registry";
import type { Dayjs, Duration, MessageFns, EnumInstance, EnumClass } from "../../../../src/runtime/protos/index";
import { deprecatedWarn } from "../../../../src/runtime/util/logging";

const __deprecatedWarned = new Set<string>();

// file: descriptor.proto
/**
 *  The full set of known editions.
 *
 */
export type Edition = EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;

interface EditionValueMembers {
  /**
   *  A placeholder for an unknown edition value.
   *
   */
  readonly EDITION_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  /**
   *  A placeholder edition for specifying default behaviors *before* a feature
   *  was first introduced.  This is effectively an "infinite past".
   *
   */
  readonly EDITION_LEGACY: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  /**
   *  Legacy syntax "editions".  These pre-date editions, but behave much like
   *  distinct editions.  These can't be used to specify the edition of proto
   *  files, but feature definitions must supply proto2/proto3 defaults for
   *  backwards compatibility.
   *
   */
  readonly EDITION_PROTO2: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  readonly EDITION_PROTO3: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  /**
   *  Editions that have been released.  The specific values are arbitrary and
   *  should not be depended on, but they will always be time-ordered for easy
   *  comparison.
   *
   */
  readonly EDITION_2023: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  readonly EDITION_2024: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  /**
   *  Placeholder editions for testing feature resolution.  These should not be
   *  used or relied on outside of tests.
   *
   */
  readonly EDITION_1_TEST_ONLY: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  readonly EDITION_2_TEST_ONLY: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  readonly EDITION_99997_TEST_ONLY: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  readonly EDITION_99998_TEST_ONLY: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  readonly EDITION_99999_TEST_ONLY: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
  /**
   *  Placeholder for specifying unbounded edition support.  This should only
   *  ever be used by plugins that can expect to never require any changes to
   *  support a new edition.
   *
   */
  readonly EDITION_MAX: EnumInstance<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX">;
}
export type EditionClass = EnumClass<"UNRECOGNIZED" | "EDITION_UNKNOWN" | "EDITION_LEGACY" | "EDITION_PROTO2" | "EDITION_PROTO3" | "EDITION_2023" | "EDITION_2024" | "EDITION_1_TEST_ONLY" | "EDITION_2_TEST_ONLY" | "EDITION_99997_TEST_ONLY" | "EDITION_99998_TEST_ONLY" | "EDITION_99999_TEST_ONLY" | "EDITION_MAX"> & EditionValueMembers;

const Edition_VALUE_COMMENTS = {
  EDITION_UNKNOWN: " A placeholder for an unknown edition value.\n",
  EDITION_LEGACY: " A placeholder edition for specifying default behaviors *before* a feature\n was first introduced.  This is effectively an \"infinite past\".\n",
  EDITION_PROTO2: " Legacy syntax \"editions\".  These pre-date editions, but behave much like\n distinct editions.  These can't be used to specify the edition of proto\n files, but feature definitions must supply proto2/proto3 defaults for\n backwards compatibility.\n",
  EDITION_2023: " Editions that have been released.  The specific values are arbitrary and\n should not be depended on, but they will always be time-ordered for easy\n comparison.\n",
  EDITION_1_TEST_ONLY: " Placeholder editions for testing feature resolution.  These should not be\n used or relied on outside of tests.\n",
  EDITION_MAX: " Placeholder for specifying unbounded edition support.  This should only\n ever be used by plugins that can expect to never require any changes to\n support a new edition.\n",
};

export const Edition = createEnum("google.protobuf.Edition", {
  /**
   *  A placeholder for an unknown edition value.
   * 
   */
  EDITION_UNKNOWN: 0,
  /**
   *  A placeholder edition for specifying default behaviors *before* a feature
   *  was first introduced.  This is effectively an "infinite past".
   * 
   */
  EDITION_LEGACY: 900,
  /**
   *  Legacy syntax "editions".  These pre-date editions, but behave much like
   *  distinct editions.  These can't be used to specify the edition of proto
   *  files, but feature definitions must supply proto2/proto3 defaults for
   *  backwards compatibility.
   * 
   */
  EDITION_PROTO2: 998,
  EDITION_PROTO3: 999,
  /**
   *  Editions that have been released.  The specific values are arbitrary and
   *  should not be depended on, but they will always be time-ordered for easy
   *  comparison.
   * 
   */
  EDITION_2023: 1000,
  EDITION_2024: 1001,
  /**
   *  Placeholder editions for testing feature resolution.  These should not be
   *  used or relied on outside of tests.
   * 
   */
  EDITION_1_TEST_ONLY: 1,
  EDITION_2_TEST_ONLY: 2,
  EDITION_99997_TEST_ONLY: 99997,
  EDITION_99998_TEST_ONLY: 99998,
  EDITION_99999_TEST_ONLY: 99999,
  /**
   *  Placeholder for specifying unbounded edition support.  This should only
   *  ever be used by plugins that can expect to never require any changes to
   *  support a new edition.
   * 
   */
  EDITION_MAX: 2147483647,
}, Edition_VALUE_COMMENTS) as EditionClass;

protoRegistry.registerEnum(Edition);

/**
 *  Describes the 'visibility' of a symbol with respect to the proto import
 *  system. Symbols can only be imported when the visibility rules do not prevent
 *  it (ex: local symbols cannot be imported).  Visibility modifiers can only set
 *  on `message` and `enum` as they are the only types available to be referenced
 *  from other files.
 *
 */
export type SymbolVisibility = EnumInstance<"UNRECOGNIZED" | "VISIBILITY_UNSET" | "VISIBILITY_LOCAL" | "VISIBILITY_EXPORT">;

interface SymbolVisibilityValueMembers {
  readonly VISIBILITY_UNSET: EnumInstance<"UNRECOGNIZED" | "VISIBILITY_UNSET" | "VISIBILITY_LOCAL" | "VISIBILITY_EXPORT">;
  readonly VISIBILITY_LOCAL: EnumInstance<"UNRECOGNIZED" | "VISIBILITY_UNSET" | "VISIBILITY_LOCAL" | "VISIBILITY_EXPORT">;
  readonly VISIBILITY_EXPORT: EnumInstance<"UNRECOGNIZED" | "VISIBILITY_UNSET" | "VISIBILITY_LOCAL" | "VISIBILITY_EXPORT">;
}
export type SymbolVisibilityClass = EnumClass<"UNRECOGNIZED" | "VISIBILITY_UNSET" | "VISIBILITY_LOCAL" | "VISIBILITY_EXPORT"> & SymbolVisibilityValueMembers;

export const SymbolVisibility = createEnum("google.protobuf.SymbolVisibility", {
  VISIBILITY_UNSET: 0,
  VISIBILITY_LOCAL: 1,
  VISIBILITY_EXPORT: 2,
}) as SymbolVisibilityClass;

protoRegistry.registerEnum(SymbolVisibility);

/**
 *  The verification state of the extension range.
 *
 */
export type ExtensionRangeOptions_VerificationState = EnumInstance<"UNRECOGNIZED" | "DECLARATION" | "UNVERIFIED">;

interface ExtensionRangeOptions_VerificationStateValueMembers {
  /**
   *  All the extensions of the range must be declared.
   *
   */
  readonly DECLARATION: EnumInstance<"UNRECOGNIZED" | "DECLARATION" | "UNVERIFIED">;
  readonly UNVERIFIED: EnumInstance<"UNRECOGNIZED" | "DECLARATION" | "UNVERIFIED">;
}
export type ExtensionRangeOptions_VerificationStateClass = EnumClass<"UNRECOGNIZED" | "DECLARATION" | "UNVERIFIED"> & ExtensionRangeOptions_VerificationStateValueMembers;

const ExtensionRangeOptions_VerificationState_VALUE_COMMENTS = {
  DECLARATION: " All the extensions of the range must be declared.\n",
};

export const ExtensionRangeOptions_VerificationState = createEnum("google.protobuf.ExtensionRangeOptions.VerificationState", {
  /**
   *  All the extensions of the range must be declared.
   * 
   */
  DECLARATION: 0,
  UNVERIFIED: 1,
}, ExtensionRangeOptions_VerificationState_VALUE_COMMENTS) as ExtensionRangeOptions_VerificationStateClass;

protoRegistry.registerEnum(ExtensionRangeOptions_VerificationState);

export type FieldDescriptorProto_Type = EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;

interface FieldDescriptorProto_TypeValueMembers {
  /**
   *  0 is reserved for errors.
   *  Order is weird for historical reasons.
   *
   */
  readonly TYPE_DOUBLE: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_FLOAT: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  /**
   *  Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
   *  negative values are likely.
   *
   */
  readonly TYPE_INT64: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_UINT64: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  /**
   *  Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
   *  negative values are likely.
   *
   */
  readonly TYPE_INT32: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_FIXED64: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_FIXED32: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_BOOL: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_STRING: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  /**
   *  Tag-delimited aggregate.
   *  Group type is deprecated and not supported after google.protobuf. However, Proto3
   *  implementations should still be able to parse the group wire format and
   *  treat group fields as unknown fields.  In Editions, the group wire format
   *  can be enabled via the `message_encoding` feature.
   *
   */
  readonly TYPE_GROUP: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  /**
   *  Length-delimited aggregate.
   *
   */
  readonly TYPE_MESSAGE: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  /**
   *  New in version 2.
   *
   */
  readonly TYPE_BYTES: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_UINT32: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_ENUM: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_SFIXED32: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  readonly TYPE_SFIXED64: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  /**
   *  Uses ZigZag encoding.
   *
   */
  readonly TYPE_SINT32: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
  /**
   *  Uses ZigZag encoding.
   *
   */
  readonly TYPE_SINT64: EnumInstance<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64">;
}
export type FieldDescriptorProto_TypeClass = EnumClass<"UNRECOGNIZED" | "TYPE_DOUBLE" | "TYPE_FLOAT" | "TYPE_INT64" | "TYPE_UINT64" | "TYPE_INT32" | "TYPE_FIXED64" | "TYPE_FIXED32" | "TYPE_BOOL" | "TYPE_STRING" | "TYPE_GROUP" | "TYPE_MESSAGE" | "TYPE_BYTES" | "TYPE_UINT32" | "TYPE_ENUM" | "TYPE_SFIXED32" | "TYPE_SFIXED64" | "TYPE_SINT32" | "TYPE_SINT64"> & FieldDescriptorProto_TypeValueMembers;

const FieldDescriptorProto_Type_VALUE_COMMENTS = {
  TYPE_DOUBLE: " 0 is reserved for errors.\n Order is weird for historical reasons.\n",
  TYPE_INT64: " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n",
  TYPE_INT32: " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n",
  TYPE_GROUP: " Tag-delimited aggregate.\n Group type is deprecated and not supported after google.protobuf. However, Proto3\n implementations should still be able to parse the group wire format and\n treat group fields as unknown fields.  In Editions, the group wire format\n can be enabled via the `message_encoding` feature.\n",
  TYPE_MESSAGE: " Length-delimited aggregate.\n",
  TYPE_BYTES: " New in version 2.\n",
  TYPE_SINT32: " Uses ZigZag encoding.\n",
  TYPE_SINT64: " Uses ZigZag encoding.\n",
};

export const FieldDescriptorProto_Type = createEnum("google.protobuf.FieldDescriptorProto.Type", {
  /**
   *  0 is reserved for errors.
   *  Order is weird for historical reasons.
   * 
   */
  TYPE_DOUBLE: 1,
  TYPE_FLOAT: 2,
  /**
   *  Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
   *  negative values are likely.
   * 
   */
  TYPE_INT64: 3,
  TYPE_UINT64: 4,
  /**
   *  Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
   *  negative values are likely.
   * 
   */
  TYPE_INT32: 5,
  TYPE_FIXED64: 6,
  TYPE_FIXED32: 7,
  TYPE_BOOL: 8,
  TYPE_STRING: 9,
  /**
   *  Tag-delimited aggregate.
   *  Group type is deprecated and not supported after google.protobuf. However, Proto3
   *  implementations should still be able to parse the group wire format and
   *  treat group fields as unknown fields.  In Editions, the group wire format
   *  can be enabled via the `message_encoding` feature.
   * 
   */
  TYPE_GROUP: 10,
  /**
   *  Length-delimited aggregate.
   * 
   */
  TYPE_MESSAGE: 11,
  /**
   *  New in version 2.
   * 
   */
  TYPE_BYTES: 12,
  TYPE_UINT32: 13,
  TYPE_ENUM: 14,
  TYPE_SFIXED32: 15,
  TYPE_SFIXED64: 16,
  /**
   *  Uses ZigZag encoding.
   * 
   */
  TYPE_SINT32: 17,
  /**
   *  Uses ZigZag encoding.
   * 
   */
  TYPE_SINT64: 18,
}, FieldDescriptorProto_Type_VALUE_COMMENTS) as FieldDescriptorProto_TypeClass;

protoRegistry.registerEnum(FieldDescriptorProto_Type);

export type FieldDescriptorProto_Label = EnumInstance<"UNRECOGNIZED" | "LABEL_OPTIONAL" | "LABEL_REPEATED" | "LABEL_REQUIRED">;

interface FieldDescriptorProto_LabelValueMembers {
  /**
   *  0 is reserved for errors
   *
   */
  readonly LABEL_OPTIONAL: EnumInstance<"UNRECOGNIZED" | "LABEL_OPTIONAL" | "LABEL_REPEATED" | "LABEL_REQUIRED">;
  readonly LABEL_REPEATED: EnumInstance<"UNRECOGNIZED" | "LABEL_OPTIONAL" | "LABEL_REPEATED" | "LABEL_REQUIRED">;
  /**
   *  The required label is only allowed in google.protobuf.  In proto3 and Editions
   *  it's explicitly prohibited.  In Editions, the `field_presence` feature
   *  can be used to get this behavior.
   *
   */
  readonly LABEL_REQUIRED: EnumInstance<"UNRECOGNIZED" | "LABEL_OPTIONAL" | "LABEL_REPEATED" | "LABEL_REQUIRED">;
}
export type FieldDescriptorProto_LabelClass = EnumClass<"UNRECOGNIZED" | "LABEL_OPTIONAL" | "LABEL_REPEATED" | "LABEL_REQUIRED"> & FieldDescriptorProto_LabelValueMembers;

const FieldDescriptorProto_Label_VALUE_COMMENTS = {
  LABEL_OPTIONAL: " 0 is reserved for errors\n",
  LABEL_REQUIRED: " The required label is only allowed in google.protobuf.  In proto3 and Editions\n it's explicitly prohibited.  In Editions, the `field_presence` feature\n can be used to get this behavior.\n",
};

export const FieldDescriptorProto_Label = createEnum("google.protobuf.FieldDescriptorProto.Label", {
  /**
   *  0 is reserved for errors
   * 
   */
  LABEL_OPTIONAL: 1,
  LABEL_REPEATED: 3,
  /**
   *  The required label is only allowed in google.protobuf.  In proto3 and Editions
   *  it's explicitly prohibited.  In Editions, the `field_presence` feature
   *  can be used to get this behavior.
   * 
   */
  LABEL_REQUIRED: 2,
}, FieldDescriptorProto_Label_VALUE_COMMENTS) as FieldDescriptorProto_LabelClass;

protoRegistry.registerEnum(FieldDescriptorProto_Label);

/**
 *  Generated classes can be optimized for speed or code size.
 *
 */
export type FileOptions_OptimizeMode = EnumInstance<"UNRECOGNIZED" | "SPEED" | "CODE_SIZE" | "LITE_RUNTIME">;

interface FileOptions_OptimizeModeValueMembers {
  /**
   *  Generate complete code for parsing, serialization,
   *
   */
  readonly SPEED: EnumInstance<"UNRECOGNIZED" | "SPEED" | "CODE_SIZE" | "LITE_RUNTIME">;
  /**
   *  etc.
   *
   *
   *  Use ReflectionOps to implement these methods.
   *
   */
  readonly CODE_SIZE: EnumInstance<"UNRECOGNIZED" | "SPEED" | "CODE_SIZE" | "LITE_RUNTIME">;
  /**
   *  Generate code using MessageLite and the lite runtime.
   *
   */
  readonly LITE_RUNTIME: EnumInstance<"UNRECOGNIZED" | "SPEED" | "CODE_SIZE" | "LITE_RUNTIME">;
}
export type FileOptions_OptimizeModeClass = EnumClass<"UNRECOGNIZED" | "SPEED" | "CODE_SIZE" | "LITE_RUNTIME"> & FileOptions_OptimizeModeValueMembers;

const FileOptions_OptimizeMode_VALUE_COMMENTS = {
  SPEED: " Generate complete code for parsing, serialization,\n",
  CODE_SIZE: " etc.\n\n\n Use ReflectionOps to implement these methods.\n",
  LITE_RUNTIME: " Generate code using MessageLite and the lite runtime.\n",
};

export const FileOptions_OptimizeMode = createEnum("google.protobuf.FileOptions.OptimizeMode", {
  /**
   *  Generate complete code for parsing, serialization,
   * 
   */
  SPEED: 1,
  /**
   *  etc.
   * 
   * 
   *  Use ReflectionOps to implement these methods.
   * 
   */
  CODE_SIZE: 2,
  /**
   *  Generate code using MessageLite and the lite runtime.
   * 
   */
  LITE_RUNTIME: 3,
}, FileOptions_OptimizeMode_VALUE_COMMENTS) as FileOptions_OptimizeModeClass;

protoRegistry.registerEnum(FileOptions_OptimizeMode);

export type FieldOptions_CType = EnumInstance<"UNRECOGNIZED" | "STRING" | "CORD" | "STRING_PIECE">;

interface FieldOptions_CTypeValueMembers {
  /**
   *  Default mode.
   *
   */
  readonly STRING: EnumInstance<"UNRECOGNIZED" | "STRING" | "CORD" | "STRING_PIECE">;
  /**
   *  The option [ctype=CORD] may be applied to a non-repeated field of type
   *  "bytes". It indicates that in C++, the data should be stored in a Cord
   *  instead of a string.  For very large strings, this may reduce memory
   *  fragmentation. It may also allow better performance when parsing from a
   *  Cord, or when parsing with aliasing enabled, as the parsed Cord may then
   *  alias the original buffer.
   *
   */
  readonly CORD: EnumInstance<"UNRECOGNIZED" | "STRING" | "CORD" | "STRING_PIECE">;
  readonly STRING_PIECE: EnumInstance<"UNRECOGNIZED" | "STRING" | "CORD" | "STRING_PIECE">;
}
export type FieldOptions_CTypeClass = EnumClass<"UNRECOGNIZED" | "STRING" | "CORD" | "STRING_PIECE"> & FieldOptions_CTypeValueMembers;

const FieldOptions_CType_VALUE_COMMENTS = {
  STRING: " Default mode.\n",
  CORD: " The option [ctype=CORD] may be applied to a non-repeated field of type\n \"bytes\". It indicates that in C++, the data should be stored in a Cord\n instead of a string.  For very large strings, this may reduce memory\n fragmentation. It may also allow better performance when parsing from a\n Cord, or when parsing with aliasing enabled, as the parsed Cord may then\n alias the original buffer.\n",
};

export const FieldOptions_CType = createEnum("google.protobuf.FieldOptions.CType", {
  /**
   *  Default mode.
   * 
   */
  STRING: 0,
  /**
   *  The option [ctype=CORD] may be applied to a non-repeated field of type
   *  "bytes". It indicates that in C++, the data should be stored in a Cord
   *  instead of a string.  For very large strings, this may reduce memory
   *  fragmentation. It may also allow better performance when parsing from a
   *  Cord, or when parsing with aliasing enabled, as the parsed Cord may then
   *  alias the original buffer.
   * 
   */
  CORD: 1,
  STRING_PIECE: 2,
}, FieldOptions_CType_VALUE_COMMENTS) as FieldOptions_CTypeClass;

protoRegistry.registerEnum(FieldOptions_CType);

export type FieldOptions_JSType = EnumInstance<"UNRECOGNIZED" | "JS_NORMAL" | "JS_STRING" | "JS_NUMBER">;

interface FieldOptions_JSTypeValueMembers {
  /**
   *  Use the default type.
   *
   */
  readonly JS_NORMAL: EnumInstance<"UNRECOGNIZED" | "JS_NORMAL" | "JS_STRING" | "JS_NUMBER">;
  /**
   *  Use JavaScript strings.
   *
   */
  readonly JS_STRING: EnumInstance<"UNRECOGNIZED" | "JS_NORMAL" | "JS_STRING" | "JS_NUMBER">;
  /**
   *  Use JavaScript numbers.
   *
   */
  readonly JS_NUMBER: EnumInstance<"UNRECOGNIZED" | "JS_NORMAL" | "JS_STRING" | "JS_NUMBER">;
}
export type FieldOptions_JSTypeClass = EnumClass<"UNRECOGNIZED" | "JS_NORMAL" | "JS_STRING" | "JS_NUMBER"> & FieldOptions_JSTypeValueMembers;

const FieldOptions_JSType_VALUE_COMMENTS = {
  JS_NORMAL: " Use the default type.\n",
  JS_STRING: " Use JavaScript strings.\n",
  JS_NUMBER: " Use JavaScript numbers.\n",
};

export const FieldOptions_JSType = createEnum("google.protobuf.FieldOptions.JSType", {
  /**
   *  Use the default type.
   * 
   */
  JS_NORMAL: 0,
  /**
   *  Use JavaScript strings.
   * 
   */
  JS_STRING: 1,
  /**
   *  Use JavaScript numbers.
   * 
   */
  JS_NUMBER: 2,
}, FieldOptions_JSType_VALUE_COMMENTS) as FieldOptions_JSTypeClass;

protoRegistry.registerEnum(FieldOptions_JSType);

/**
 *  If set to RETENTION_SOURCE, the option will be omitted from the binary.
 *
 */
export type FieldOptions_OptionRetention = EnumInstance<"UNRECOGNIZED" | "RETENTION_UNKNOWN" | "RETENTION_RUNTIME" | "RETENTION_SOURCE">;

interface FieldOptions_OptionRetentionValueMembers {
  readonly RETENTION_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "RETENTION_UNKNOWN" | "RETENTION_RUNTIME" | "RETENTION_SOURCE">;
  readonly RETENTION_RUNTIME: EnumInstance<"UNRECOGNIZED" | "RETENTION_UNKNOWN" | "RETENTION_RUNTIME" | "RETENTION_SOURCE">;
  readonly RETENTION_SOURCE: EnumInstance<"UNRECOGNIZED" | "RETENTION_UNKNOWN" | "RETENTION_RUNTIME" | "RETENTION_SOURCE">;
}
export type FieldOptions_OptionRetentionClass = EnumClass<"UNRECOGNIZED" | "RETENTION_UNKNOWN" | "RETENTION_RUNTIME" | "RETENTION_SOURCE"> & FieldOptions_OptionRetentionValueMembers;

export const FieldOptions_OptionRetention = createEnum("google.protobuf.FieldOptions.OptionRetention", {
  RETENTION_UNKNOWN: 0,
  RETENTION_RUNTIME: 1,
  RETENTION_SOURCE: 2,
}) as FieldOptions_OptionRetentionClass;

protoRegistry.registerEnum(FieldOptions_OptionRetention);

/**
 *  This indicates the types of entities that the field may apply to when used
 *  as an option. If it is unset, then the field may be freely used as an
 *  option on any kind of entity.
 *
 */
export type FieldOptions_OptionTargetType = EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;

interface FieldOptions_OptionTargetTypeValueMembers {
  readonly TARGET_TYPE_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
  readonly TARGET_TYPE_FILE: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
  readonly TARGET_TYPE_EXTENSION_RANGE: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
  readonly TARGET_TYPE_MESSAGE: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
  readonly TARGET_TYPE_FIELD: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
  readonly TARGET_TYPE_ONEOF: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
  readonly TARGET_TYPE_ENUM: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
  readonly TARGET_TYPE_ENUM_ENTRY: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
  readonly TARGET_TYPE_SERVICE: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
  readonly TARGET_TYPE_METHOD: EnumInstance<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD">;
}
export type FieldOptions_OptionTargetTypeClass = EnumClass<"UNRECOGNIZED" | "TARGET_TYPE_UNKNOWN" | "TARGET_TYPE_FILE" | "TARGET_TYPE_EXTENSION_RANGE" | "TARGET_TYPE_MESSAGE" | "TARGET_TYPE_FIELD" | "TARGET_TYPE_ONEOF" | "TARGET_TYPE_ENUM" | "TARGET_TYPE_ENUM_ENTRY" | "TARGET_TYPE_SERVICE" | "TARGET_TYPE_METHOD"> & FieldOptions_OptionTargetTypeValueMembers;

export const FieldOptions_OptionTargetType = createEnum("google.protobuf.FieldOptions.OptionTargetType", {
  TARGET_TYPE_UNKNOWN: 0,
  TARGET_TYPE_FILE: 1,
  TARGET_TYPE_EXTENSION_RANGE: 2,
  TARGET_TYPE_MESSAGE: 3,
  TARGET_TYPE_FIELD: 4,
  TARGET_TYPE_ONEOF: 5,
  TARGET_TYPE_ENUM: 6,
  TARGET_TYPE_ENUM_ENTRY: 7,
  TARGET_TYPE_SERVICE: 8,
  TARGET_TYPE_METHOD: 9,
}) as FieldOptions_OptionTargetTypeClass;

protoRegistry.registerEnum(FieldOptions_OptionTargetType);

/**
 *  Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
 *  or neither? HTTP based RPC implementation may choose GET verb for safe
 *  methods, and PUT verb for idempotent methods instead of the default POST.
 *
 */
export type MethodOptions_IdempotencyLevel = EnumInstance<"UNRECOGNIZED" | "IDEMPOTENCY_UNKNOWN" | "NO_SIDE_EFFECTS" | "IDEMPOTENT">;

interface MethodOptions_IdempotencyLevelValueMembers {
  readonly IDEMPOTENCY_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "IDEMPOTENCY_UNKNOWN" | "NO_SIDE_EFFECTS" | "IDEMPOTENT">;
  /**
   *  implies idempotent
   *
   */
  readonly NO_SIDE_EFFECTS: EnumInstance<"UNRECOGNIZED" | "IDEMPOTENCY_UNKNOWN" | "NO_SIDE_EFFECTS" | "IDEMPOTENT">;
  /**
   *  idempotent, but may have side effects
   *
   */
  readonly IDEMPOTENT: EnumInstance<"UNRECOGNIZED" | "IDEMPOTENCY_UNKNOWN" | "NO_SIDE_EFFECTS" | "IDEMPOTENT">;
}
export type MethodOptions_IdempotencyLevelClass = EnumClass<"UNRECOGNIZED" | "IDEMPOTENCY_UNKNOWN" | "NO_SIDE_EFFECTS" | "IDEMPOTENT"> & MethodOptions_IdempotencyLevelValueMembers;

const MethodOptions_IdempotencyLevel_VALUE_COMMENTS = {
  NO_SIDE_EFFECTS: " implies idempotent\n",
  IDEMPOTENT: " idempotent, but may have side effects\n",
};

export const MethodOptions_IdempotencyLevel = createEnum("google.protobuf.MethodOptions.IdempotencyLevel", {
  IDEMPOTENCY_UNKNOWN: 0,
  /**
   *  implies idempotent
   * 
   */
  NO_SIDE_EFFECTS: 1,
  /**
   *  idempotent, but may have side effects
   * 
   */
  IDEMPOTENT: 2,
}, MethodOptions_IdempotencyLevel_VALUE_COMMENTS) as MethodOptions_IdempotencyLevelClass;

protoRegistry.registerEnum(MethodOptions_IdempotencyLevel);

export type FeatureSet_FieldPresence = EnumInstance<"UNRECOGNIZED" | "FIELD_PRESENCE_UNKNOWN" | "EXPLICIT" | "IMPLICIT" | "LEGACY_REQUIRED">;

interface FeatureSet_FieldPresenceValueMembers {
  readonly FIELD_PRESENCE_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "FIELD_PRESENCE_UNKNOWN" | "EXPLICIT" | "IMPLICIT" | "LEGACY_REQUIRED">;
  readonly EXPLICIT: EnumInstance<"UNRECOGNIZED" | "FIELD_PRESENCE_UNKNOWN" | "EXPLICIT" | "IMPLICIT" | "LEGACY_REQUIRED">;
  readonly IMPLICIT: EnumInstance<"UNRECOGNIZED" | "FIELD_PRESENCE_UNKNOWN" | "EXPLICIT" | "IMPLICIT" | "LEGACY_REQUIRED">;
  readonly LEGACY_REQUIRED: EnumInstance<"UNRECOGNIZED" | "FIELD_PRESENCE_UNKNOWN" | "EXPLICIT" | "IMPLICIT" | "LEGACY_REQUIRED">;
}
export type FeatureSet_FieldPresenceClass = EnumClass<"UNRECOGNIZED" | "FIELD_PRESENCE_UNKNOWN" | "EXPLICIT" | "IMPLICIT" | "LEGACY_REQUIRED"> & FeatureSet_FieldPresenceValueMembers;

export const FeatureSet_FieldPresence = createEnum("google.protobuf.FeatureSet.FieldPresence", {
  FIELD_PRESENCE_UNKNOWN: 0,
  EXPLICIT: 1,
  IMPLICIT: 2,
  LEGACY_REQUIRED: 3,
}) as FeatureSet_FieldPresenceClass;

protoRegistry.registerEnum(FeatureSet_FieldPresence);

export type FeatureSet_EnumType = EnumInstance<"UNRECOGNIZED" | "ENUM_TYPE_UNKNOWN" | "OPEN" | "CLOSED">;

interface FeatureSet_EnumTypeValueMembers {
  readonly ENUM_TYPE_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "ENUM_TYPE_UNKNOWN" | "OPEN" | "CLOSED">;
  readonly OPEN: EnumInstance<"UNRECOGNIZED" | "ENUM_TYPE_UNKNOWN" | "OPEN" | "CLOSED">;
  readonly CLOSED: EnumInstance<"UNRECOGNIZED" | "ENUM_TYPE_UNKNOWN" | "OPEN" | "CLOSED">;
}
export type FeatureSet_EnumTypeClass = EnumClass<"UNRECOGNIZED" | "ENUM_TYPE_UNKNOWN" | "OPEN" | "CLOSED"> & FeatureSet_EnumTypeValueMembers;

export const FeatureSet_EnumType = createEnum("google.protobuf.FeatureSet.EnumType", {
  ENUM_TYPE_UNKNOWN: 0,
  OPEN: 1,
  CLOSED: 2,
}) as FeatureSet_EnumTypeClass;

protoRegistry.registerEnum(FeatureSet_EnumType);

export type FeatureSet_RepeatedFieldEncoding = EnumInstance<"UNRECOGNIZED" | "REPEATED_FIELD_ENCODING_UNKNOWN" | "PACKED" | "EXPANDED">;

interface FeatureSet_RepeatedFieldEncodingValueMembers {
  readonly REPEATED_FIELD_ENCODING_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "REPEATED_FIELD_ENCODING_UNKNOWN" | "PACKED" | "EXPANDED">;
  readonly PACKED: EnumInstance<"UNRECOGNIZED" | "REPEATED_FIELD_ENCODING_UNKNOWN" | "PACKED" | "EXPANDED">;
  readonly EXPANDED: EnumInstance<"UNRECOGNIZED" | "REPEATED_FIELD_ENCODING_UNKNOWN" | "PACKED" | "EXPANDED">;
}
export type FeatureSet_RepeatedFieldEncodingClass = EnumClass<"UNRECOGNIZED" | "REPEATED_FIELD_ENCODING_UNKNOWN" | "PACKED" | "EXPANDED"> & FeatureSet_RepeatedFieldEncodingValueMembers;

export const FeatureSet_RepeatedFieldEncoding = createEnum("google.protobuf.FeatureSet.RepeatedFieldEncoding", {
  REPEATED_FIELD_ENCODING_UNKNOWN: 0,
  PACKED: 1,
  EXPANDED: 2,
}) as FeatureSet_RepeatedFieldEncodingClass;

protoRegistry.registerEnum(FeatureSet_RepeatedFieldEncoding);

export type FeatureSet_Utf8Validation = EnumInstance<"UNRECOGNIZED" | "UTF8_VALIDATION_UNKNOWN" | "VERIFY" | "NONE">;

interface FeatureSet_Utf8ValidationValueMembers {
  readonly UTF8_VALIDATION_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "UTF8_VALIDATION_UNKNOWN" | "VERIFY" | "NONE">;
  readonly VERIFY: EnumInstance<"UNRECOGNIZED" | "UTF8_VALIDATION_UNKNOWN" | "VERIFY" | "NONE">;
  readonly NONE: EnumInstance<"UNRECOGNIZED" | "UTF8_VALIDATION_UNKNOWN" | "VERIFY" | "NONE">;
}
export type FeatureSet_Utf8ValidationClass = EnumClass<"UNRECOGNIZED" | "UTF8_VALIDATION_UNKNOWN" | "VERIFY" | "NONE"> & FeatureSet_Utf8ValidationValueMembers;

export const FeatureSet_Utf8Validation = createEnum("google.protobuf.FeatureSet.Utf8Validation", {
  UTF8_VALIDATION_UNKNOWN: 0,
  VERIFY: 2,
  NONE: 3,
}) as FeatureSet_Utf8ValidationClass;

protoRegistry.registerEnum(FeatureSet_Utf8Validation);

export type FeatureSet_MessageEncoding = EnumInstance<"UNRECOGNIZED" | "MESSAGE_ENCODING_UNKNOWN" | "LENGTH_PREFIXED" | "DELIMITED">;

interface FeatureSet_MessageEncodingValueMembers {
  readonly MESSAGE_ENCODING_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "MESSAGE_ENCODING_UNKNOWN" | "LENGTH_PREFIXED" | "DELIMITED">;
  readonly LENGTH_PREFIXED: EnumInstance<"UNRECOGNIZED" | "MESSAGE_ENCODING_UNKNOWN" | "LENGTH_PREFIXED" | "DELIMITED">;
  readonly DELIMITED: EnumInstance<"UNRECOGNIZED" | "MESSAGE_ENCODING_UNKNOWN" | "LENGTH_PREFIXED" | "DELIMITED">;
}
export type FeatureSet_MessageEncodingClass = EnumClass<"UNRECOGNIZED" | "MESSAGE_ENCODING_UNKNOWN" | "LENGTH_PREFIXED" | "DELIMITED"> & FeatureSet_MessageEncodingValueMembers;

export const FeatureSet_MessageEncoding = createEnum("google.protobuf.FeatureSet.MessageEncoding", {
  MESSAGE_ENCODING_UNKNOWN: 0,
  LENGTH_PREFIXED: 1,
  DELIMITED: 2,
}) as FeatureSet_MessageEncodingClass;

protoRegistry.registerEnum(FeatureSet_MessageEncoding);

export type FeatureSet_JsonFormat = EnumInstance<"UNRECOGNIZED" | "JSON_FORMAT_UNKNOWN" | "ALLOW" | "LEGACY_BEST_EFFORT">;

interface FeatureSet_JsonFormatValueMembers {
  readonly JSON_FORMAT_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "JSON_FORMAT_UNKNOWN" | "ALLOW" | "LEGACY_BEST_EFFORT">;
  readonly ALLOW: EnumInstance<"UNRECOGNIZED" | "JSON_FORMAT_UNKNOWN" | "ALLOW" | "LEGACY_BEST_EFFORT">;
  readonly LEGACY_BEST_EFFORT: EnumInstance<"UNRECOGNIZED" | "JSON_FORMAT_UNKNOWN" | "ALLOW" | "LEGACY_BEST_EFFORT">;
}
export type FeatureSet_JsonFormatClass = EnumClass<"UNRECOGNIZED" | "JSON_FORMAT_UNKNOWN" | "ALLOW" | "LEGACY_BEST_EFFORT"> & FeatureSet_JsonFormatValueMembers;

export const FeatureSet_JsonFormat = createEnum("google.protobuf.FeatureSet.JsonFormat", {
  JSON_FORMAT_UNKNOWN: 0,
  ALLOW: 1,
  LEGACY_BEST_EFFORT: 2,
}) as FeatureSet_JsonFormatClass;

protoRegistry.registerEnum(FeatureSet_JsonFormat);

export type FeatureSet_EnforceNamingStyle = EnumInstance<"UNRECOGNIZED" | "ENFORCE_NAMING_STYLE_UNKNOWN" | "STYLE2024" | "STYLE_LEGACY">;

interface FeatureSet_EnforceNamingStyleValueMembers {
  readonly ENFORCE_NAMING_STYLE_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "ENFORCE_NAMING_STYLE_UNKNOWN" | "STYLE2024" | "STYLE_LEGACY">;
  readonly STYLE2024: EnumInstance<"UNRECOGNIZED" | "ENFORCE_NAMING_STYLE_UNKNOWN" | "STYLE2024" | "STYLE_LEGACY">;
  readonly STYLE_LEGACY: EnumInstance<"UNRECOGNIZED" | "ENFORCE_NAMING_STYLE_UNKNOWN" | "STYLE2024" | "STYLE_LEGACY">;
}
export type FeatureSet_EnforceNamingStyleClass = EnumClass<"UNRECOGNIZED" | "ENFORCE_NAMING_STYLE_UNKNOWN" | "STYLE2024" | "STYLE_LEGACY"> & FeatureSet_EnforceNamingStyleValueMembers;

export const FeatureSet_EnforceNamingStyle = createEnum("google.protobuf.FeatureSet.EnforceNamingStyle", {
  ENFORCE_NAMING_STYLE_UNKNOWN: 0,
  STYLE2024: 1,
  STYLE_LEGACY: 2,
}) as FeatureSet_EnforceNamingStyleClass;

protoRegistry.registerEnum(FeatureSet_EnforceNamingStyle);

export type FeatureSet_VisibilityFeature_DefaultSymbolVisibility = EnumInstance<"UNRECOGNIZED" | "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN" | "EXPORT_ALL" | "EXPORT_TOP_LEVEL" | "LOCAL_ALL" | "STRICT">;

interface FeatureSet_VisibilityFeature_DefaultSymbolVisibilityValueMembers {
  readonly DEFAULT_SYMBOL_VISIBILITY_UNKNOWN: EnumInstance<"UNRECOGNIZED" | "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN" | "EXPORT_ALL" | "EXPORT_TOP_LEVEL" | "LOCAL_ALL" | "STRICT">;
  /**
   *  Default pre-EDITION_2024, all UNSET visibility are export.
   *
   */
  readonly EXPORT_ALL: EnumInstance<"UNRECOGNIZED" | "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN" | "EXPORT_ALL" | "EXPORT_TOP_LEVEL" | "LOCAL_ALL" | "STRICT">;
  /**
   *  All top-level symbols default to export, nested default to local.
   *
   */
  readonly EXPORT_TOP_LEVEL: EnumInstance<"UNRECOGNIZED" | "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN" | "EXPORT_ALL" | "EXPORT_TOP_LEVEL" | "LOCAL_ALL" | "STRICT">;
  /**
   *  All symbols default to local.
   *
   */
  readonly LOCAL_ALL: EnumInstance<"UNRECOGNIZED" | "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN" | "EXPORT_ALL" | "EXPORT_TOP_LEVEL" | "LOCAL_ALL" | "STRICT">;
  /**
   *  All symbols local by default. Nested types cannot be exported.
   *  With special case caveat for message { enum {} reserved 1 to max; }
   *  This is the recommended setting for new protos.
   *
   */
  readonly STRICT: EnumInstance<"UNRECOGNIZED" | "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN" | "EXPORT_ALL" | "EXPORT_TOP_LEVEL" | "LOCAL_ALL" | "STRICT">;
}
export type FeatureSet_VisibilityFeature_DefaultSymbolVisibilityClass = EnumClass<"UNRECOGNIZED" | "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN" | "EXPORT_ALL" | "EXPORT_TOP_LEVEL" | "LOCAL_ALL" | "STRICT"> & FeatureSet_VisibilityFeature_DefaultSymbolVisibilityValueMembers;

const FeatureSet_VisibilityFeature_DefaultSymbolVisibility_VALUE_COMMENTS = {
  EXPORT_ALL: " Default pre-EDITION_2024, all UNSET visibility are export.\n",
  EXPORT_TOP_LEVEL: " All top-level symbols default to export, nested default to local.\n",
  LOCAL_ALL: " All symbols default to local.\n",
  STRICT: " All symbols local by default. Nested types cannot be exported.\n With special case caveat for message { enum {} reserved 1 to max; }\n This is the recommended setting for new protos.\n",
};

export const FeatureSet_VisibilityFeature_DefaultSymbolVisibility = createEnum("google.protobuf.FeatureSet.VisibilityFeature.DefaultSymbolVisibility", {
  DEFAULT_SYMBOL_VISIBILITY_UNKNOWN: 0,
  /**
   *  Default pre-EDITION_2024, all UNSET visibility are export.
   * 
   */
  EXPORT_ALL: 1,
  /**
   *  All top-level symbols default to export, nested default to local.
   * 
   */
  EXPORT_TOP_LEVEL: 2,
  /**
   *  All symbols default to local.
   * 
   */
  LOCAL_ALL: 3,
  /**
   *  All symbols local by default. Nested types cannot be exported.
   *  With special case caveat for message { enum {} reserved 1 to max; }
   *  This is the recommended setting for new protos.
   * 
   */
  STRICT: 4,
}, FeatureSet_VisibilityFeature_DefaultSymbolVisibility_VALUE_COMMENTS) as FeatureSet_VisibilityFeature_DefaultSymbolVisibilityClass;

protoRegistry.registerEnum(FeatureSet_VisibilityFeature_DefaultSymbolVisibility);

/**
 *  Represents the identified object's effect on the element in the original
 *  .proto file.
 *
 */
export type GeneratedCodeInfo_Annotation_Semantic = EnumInstance<"UNRECOGNIZED" | "NONE" | "SET" | "ALIAS">;

interface GeneratedCodeInfo_Annotation_SemanticValueMembers {
  /**
   *  There is no effect or the effect is indescribable.
   *
   */
  readonly NONE: EnumInstance<"UNRECOGNIZED" | "NONE" | "SET" | "ALIAS">;
  /**
   *  The element is set or otherwise mutated.
   *
   */
  readonly SET: EnumInstance<"UNRECOGNIZED" | "NONE" | "SET" | "ALIAS">;
  /**
   *  An alias to the element is returned.
   *
   */
  readonly ALIAS: EnumInstance<"UNRECOGNIZED" | "NONE" | "SET" | "ALIAS">;
}
export type GeneratedCodeInfo_Annotation_SemanticClass = EnumClass<"UNRECOGNIZED" | "NONE" | "SET" | "ALIAS"> & GeneratedCodeInfo_Annotation_SemanticValueMembers;

const GeneratedCodeInfo_Annotation_Semantic_VALUE_COMMENTS = {
  NONE: " There is no effect or the effect is indescribable.\n",
  SET: " The element is set or otherwise mutated.\n",
  ALIAS: " An alias to the element is returned.\n",
};

export const GeneratedCodeInfo_Annotation_Semantic = createEnum("google.protobuf.GeneratedCodeInfo.Annotation.Semantic", {
  /**
   *  There is no effect or the effect is indescribable.
   * 
   */
  NONE: 0,
  /**
   *  The element is set or otherwise mutated.
   * 
   */
  SET: 1,
  /**
   *  An alias to the element is returned.
   * 
   */
  ALIAS: 2,
}, GeneratedCodeInfo_Annotation_Semantic_VALUE_COMMENTS) as GeneratedCodeInfo_Annotation_SemanticClass;

protoRegistry.registerEnum(GeneratedCodeInfo_Annotation_Semantic);

/**
 *  The protocol compiler can output a FileDescriptorSet containing the .proto
 *  files it parses.
 *
 */
export interface FileDescriptorSet {
  $type: "google.protobuf.FileDescriptorSet";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  file: FileDescriptorProto[];
}

export const FileDescriptorSet: MessageFns<FileDescriptorSet, "google.protobuf.FileDescriptorSet"> = {
  $type: "google.protobuf.FileDescriptorSet" as const,

  encode(message: FileDescriptorSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of (message.file ?? [])) {
      const w = writer.uint32(10).fork();
      FileDescriptorProto.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FileDescriptorSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileDescriptorSet();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) break;
          message.file.push(FileDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FileDescriptorSet {
    return {
      $type: "google.protobuf.FileDescriptorSet",
      file: globalThis.Array.isArray(object?.file ?? object?.file)
        ? (object.file ?? object.file).map((e: any) => FileDescriptorProto.fromJSON(e))
        : [],
    };
  },
  toJSON(message: FileDescriptorSet, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.file?.length) {
      obj[pick("file", "file")] = message.file.map((e) => e ? FileDescriptorProto.toJSON(e, use) : undefined);
    }
    return obj;
  },
  create<I extends DeepPartial<FileDescriptorSet>>(base?: I): FileDescriptorSet {
    return FileDescriptorSet.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FileDescriptorSet>>(object: I): FileDescriptorSet {
    const message = createBaseFileDescriptorSet();
    message.file = object.file?.map((e) => FileDescriptorProto.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(FileDescriptorSet);

function createBaseFileDescriptorSet(): FileDescriptorSet {
  return {
    $type: "google.protobuf.FileDescriptorSet",
    file: [],
  };
}

/**
 *  Describes a complete .proto file.
 *
 */
export interface FileDescriptorProto {
  $type: "google.protobuf.FileDescriptorProto";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  file name, relative to root of source tree
   *
   */
  name?: string | undefined;
  /**
   *  e.g. "foo", "foo.bar", etc.
   *
   */
  package?: string | undefined;
  /**
   *  Names of files imported by this file.
   *
   */
  dependency: string[];
  /**
   *  Indexes of the public imported files in the dependency list above.
   *
   */
  publicDependency: number[];
  /**
   *  Indexes of the weak imported files in the dependency list.
   *  For Google-internal migration only. Do not use.
   *
   */
  weakDependency: number[];
  /**
   *  Names of files imported by this file purely for the purpose of providing
   *  option extensions. These are excluded from the dependency list above.
   *
   */
  optionDependency: string[];
  /**
   *  All top-level definitions in this file.
   *
   */
  messageType: DescriptorProto[];
  enumType: EnumDescriptorProto[];
  service: ServiceDescriptorProto[];
  extension: FieldDescriptorProto[];
  options?: FileOptions | undefined;
  /**
   *  This field contains optional information about the original source code.
   *  You may safely remove this entire field without harming runtime
   *  functionality of the descriptors -- the information is needed only by
   *  development tools.
   *
   */
  sourceCodeInfo?: SourceCodeInfo | undefined;
  /**
   *  The syntax of the proto file.
   *  The supported values are "proto2", "proto3", and "editions".
   *
   *  If `edition` is present, this value must be "editions".
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  syntax?: string | undefined;
  /**
   *  The edition of the proto file.
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  edition?: Edition | undefined;
}

export const FileDescriptorProto: MessageFns<FileDescriptorProto, "google.protobuf.FileDescriptorProto"> = {
  $type: "google.protobuf.FileDescriptorProto" as const,

  encode(message: FileDescriptorProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.package !== undefined) {
      writer.uint32(18).string(message.package);
    }
    for (const v of (message.dependency ?? [])) {
      writer.uint32(26).string(v);
    }
    if (message.publicDependency?.length) {
      const w = writer.uint32(82).fork();
      for (const v of message.publicDependency) w.int32(v);
      w.join();
    }
    if (message.weakDependency?.length) {
      const w = writer.uint32(90).fork();
      for (const v of message.weakDependency) w.int32(v);
      w.join();
    }
    for (const v of (message.optionDependency ?? [])) {
      writer.uint32(122).string(v);
    }
    for (const v of (message.messageType ?? [])) {
      const w = writer.uint32(34).fork();
      DescriptorProto.encode(v, w);
      w.join();
    }
    for (const v of (message.enumType ?? [])) {
      const w = writer.uint32(42).fork();
      EnumDescriptorProto.encode(v, w);
      w.join();
    }
    for (const v of (message.service ?? [])) {
      const w = writer.uint32(50).fork();
      ServiceDescriptorProto.encode(v, w);
      w.join();
    }
    for (const v of (message.extension ?? [])) {
      const w = writer.uint32(58).fork();
      FieldDescriptorProto.encode(v, w);
      w.join();
    }
    if (message.options !== undefined) {
      const w = writer.uint32(66).fork();
      FileOptions.encode(message.options, w);
      w.join();
    }
    if (message.sourceCodeInfo !== undefined) {
      const w = writer.uint32(74).fork();
      SourceCodeInfo.encode(message.sourceCodeInfo, w);
      w.join();
    }
    if (message.syntax !== undefined) {
      writer.uint32(98).string(message.syntax);
    }
    if (message.edition !== undefined) {
      Edition.encodeField(writer, 14, message.edition);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FileDescriptorProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileDescriptorProto();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        case 2: {
        if (tag !== 18) break;
        message.package = reader.string();
        continue;
      }
        case 3: {
          if (tag !== 26) break;
          message.dependency.push(reader.string());
          continue;
        }
        case 10: {
          // packed or unpacked repeated scalar
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.publicDependency.push(reader.int32());
            }
            continue;
          } else if ((tag & 7) === 0 || (tag & 7) === 5 || (tag & 7) === 1) { // allow valid scalar wire types
            message.publicDependency.push(reader.int32());
            continue;
          }
          break; // wrong wire type
        }
        case 11: {
          // packed or unpacked repeated scalar
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.weakDependency.push(reader.int32());
            }
            continue;
          } else if ((tag & 7) === 0 || (tag & 7) === 5 || (tag & 7) === 1) { // allow valid scalar wire types
            message.weakDependency.push(reader.int32());
            continue;
          }
          break; // wrong wire type
        }
        case 15: {
          if (tag !== 122) break;
          message.optionDependency.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) break;
          message.messageType.push(DescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) break;
          message.enumType.push(EnumDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) break;
          message.service.push(ServiceDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) break;
          message.extension.push(FieldDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) break;
          message.options = FileOptions.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) break;
          message.sourceCodeInfo = SourceCodeInfo.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
        if (tag !== 98) break;
        message.syntax = reader.string();
        continue;
      }
        case 14: {
          if (tag !== 112) break;
          message.edition = Edition.fromNumber(reader.int32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FileDescriptorProto {
    return {
      $type: "google.protobuf.FileDescriptorProto",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : undefined,
      package: isSet(object.package ?? object.package)
        ? String(object.package ?? object.package)
        : undefined,
      dependency: globalThis.Array.isArray(object?.dependency ?? object?.dependency)
        ? (object.dependency ?? object.dependency).map((e: any) => String(e))
        : [],
      publicDependency: globalThis.Array.isArray(object?.publicDependency ?? object?.public_dependency)
        ? (object.publicDependency ?? object.public_dependency).map((e: any) => Number(e))
        : [],
      weakDependency: globalThis.Array.isArray(object?.weakDependency ?? object?.weak_dependency)
        ? (object.weakDependency ?? object.weak_dependency).map((e: any) => Number(e))
        : [],
      optionDependency: globalThis.Array.isArray(object?.optionDependency ?? object?.option_dependency)
        ? (object.optionDependency ?? object.option_dependency).map((e: any) => String(e))
        : [],
      messageType: globalThis.Array.isArray(object?.messageType ?? object?.message_type)
        ? (object.messageType ?? object.message_type).map((e: any) => DescriptorProto.fromJSON(e))
        : [],
      enumType: globalThis.Array.isArray(object?.enumType ?? object?.enum_type)
        ? (object.enumType ?? object.enum_type).map((e: any) => EnumDescriptorProto.fromJSON(e))
        : [],
      service: globalThis.Array.isArray(object?.service ?? object?.service)
        ? (object.service ?? object.service).map((e: any) => ServiceDescriptorProto.fromJSON(e))
        : [],
      extension: globalThis.Array.isArray(object?.extension ?? object?.extension)
        ? (object.extension ?? object.extension).map((e: any) => FieldDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options ?? object.options)
        ? FileOptions.fromJSON(object.options ?? object.options)
        : undefined,
      sourceCodeInfo: isSet(object.sourceCodeInfo ?? object.source_code_info)
        ? SourceCodeInfo.fromJSON(object.sourceCodeInfo ?? object.source_code_info)
        : undefined,
      syntax: isSet(object.syntax ?? object.syntax)
        ? String(object.syntax ?? object.syntax)
        : undefined,
      edition: isSet(object.edition ?? object.edition)
        ? Edition.fromJSON(object.edition ?? object.edition)
        : undefined,
    };
  },
  toJSON(message: FileDescriptorProto, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== undefined) {
      obj[pick("name", "name")] = message.name;
    }
    if (message.package !== undefined) {
      obj[pick("package", "package")] = message.package;
    }
    if (message.dependency?.length) {
      obj[pick("dependency", "dependency")] = message.dependency.map((e) => e);
    }
    if (message.publicDependency?.length) {
      obj[pick("publicDependency", "public_dependency")] = message.publicDependency.map((e) => e);
    }
    if (message.weakDependency?.length) {
      obj[pick("weakDependency", "weak_dependency")] = message.weakDependency.map((e) => e);
    }
    if (message.optionDependency?.length) {
      obj[pick("optionDependency", "option_dependency")] = message.optionDependency.map((e) => e);
    }
    if (message.messageType?.length) {
      obj[pick("messageType", "message_type")] = message.messageType.map((e) => e ? DescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.enumType?.length) {
      obj[pick("enumType", "enum_type")] = message.enumType.map((e) => e ? EnumDescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.service?.length) {
      obj[pick("service", "service")] = message.service.map((e) => e ? ServiceDescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.extension?.length) {
      obj[pick("extension", "extension")] = message.extension.map((e) => e ? FieldDescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.options !== undefined) {
      obj[pick("options", "options")] = message.options
        ? FileOptions.toJSON(message.options, use)
        : undefined;
    }
    if (message.sourceCodeInfo !== undefined) {
      obj[pick("sourceCodeInfo", "source_code_info")] = message.sourceCodeInfo
        ? SourceCodeInfo.toJSON(message.sourceCodeInfo, use)
        : undefined;
    }
    if (message.syntax !== undefined) {
      obj[pick("syntax", "syntax")] = message.syntax;
    }
    if (message.edition !== undefined) {
      obj[pick("edition", "edition")] = Edition.toJSON(message.edition);
    }
    return obj;
  },
  create<I extends DeepPartial<FileDescriptorProto>>(base?: I): FileDescriptorProto {
    return FileDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FileDescriptorProto>>(object: I): FileDescriptorProto {
    const message = createBaseFileDescriptorProto();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : undefined;
    message.package = (object.package !== undefined && object.package !== null)
      ? object.package
      : undefined;
    message.dependency = object.dependency?.map((e) => e) || [];
    message.publicDependency = object.publicDependency?.map((e) => e) || [];
    message.weakDependency = object.weakDependency?.map((e) => e) || [];
    message.optionDependency = object.optionDependency?.map((e) => e) || [];
    message.messageType = object.messageType?.map((e) => DescriptorProto.fromPartial(e)) || [];
    message.enumType = object.enumType?.map((e) => EnumDescriptorProto.fromPartial(e)) || [];
    message.service = object.service?.map((e) => ServiceDescriptorProto.fromPartial(e)) || [];
    message.extension = object.extension?.map((e) => FieldDescriptorProto.fromPartial(e)) || [];
    message.options = (object.options !== undefined && object.options !== null)
      ? FileOptions.fromPartial(object.options)
      : undefined;
    message.sourceCodeInfo = (object.sourceCodeInfo !== undefined && object.sourceCodeInfo !== null)
      ? SourceCodeInfo.fromPartial(object.sourceCodeInfo)
      : undefined;
    message.syntax = (object.syntax !== undefined && object.syntax !== null)
      ? object.syntax
      : undefined;
    message.edition = (object.edition !== undefined && object.edition !== null)
      ? Edition.fromJSON(object.edition.name)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(FileDescriptorProto);

function createBaseFileDescriptorProto(): FileDescriptorProto {
  return {
    $type: "google.protobuf.FileDescriptorProto",
    name: undefined,
    package: undefined,
    dependency: [],
    publicDependency: [],
    weakDependency: [],
    optionDependency: [],
    messageType: [],
    enumType: [],
    service: [],
    extension: [],
    options: undefined,
    sourceCodeInfo: undefined,
    syntax: undefined,
    edition: undefined,
  };
}

/**
 *  Describes a message type.
 *
 */
export interface DescriptorProto {
  $type: "google.protobuf.DescriptorProto";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name?: string | undefined;
  field: FieldDescriptorProto[];
  extension: FieldDescriptorProto[];
  nestedType: DescriptorProto[];
  enumType: EnumDescriptorProto[];
  extensionRange: DescriptorProto_ExtensionRange[];
  oneofDecl: OneofDescriptorProto[];
  options?: MessageOptions | undefined;
  reservedRange: DescriptorProto_ReservedRange[];
  /**
   *  Reserved field names, which may not be used by fields in the same message.
   *  A given name may only be reserved once.
   *
   */
  reservedName: string[];
  /**
   *  Support for `export` and `local` keywords on enums.
   *
   */
  visibility?: SymbolVisibility | undefined;
}

export const DescriptorProto: MessageFns<DescriptorProto, "google.protobuf.DescriptorProto"> = {
  $type: "google.protobuf.DescriptorProto" as const,

  encode(message: DescriptorProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    for (const v of (message.field ?? [])) {
      const w = writer.uint32(18).fork();
      FieldDescriptorProto.encode(v, w);
      w.join();
    }
    for (const v of (message.extension ?? [])) {
      const w = writer.uint32(50).fork();
      FieldDescriptorProto.encode(v, w);
      w.join();
    }
    for (const v of (message.nestedType ?? [])) {
      const w = writer.uint32(26).fork();
      DescriptorProto.encode(v, w);
      w.join();
    }
    for (const v of (message.enumType ?? [])) {
      const w = writer.uint32(34).fork();
      EnumDescriptorProto.encode(v, w);
      w.join();
    }
    for (const v of (message.extensionRange ?? [])) {
      const w = writer.uint32(42).fork();
      DescriptorProto_ExtensionRange.encode(v, w);
      w.join();
    }
    for (const v of (message.oneofDecl ?? [])) {
      const w = writer.uint32(66).fork();
      OneofDescriptorProto.encode(v, w);
      w.join();
    }
    if (message.options !== undefined) {
      const w = writer.uint32(58).fork();
      MessageOptions.encode(message.options, w);
      w.join();
    }
    for (const v of (message.reservedRange ?? [])) {
      const w = writer.uint32(74).fork();
      DescriptorProto_ReservedRange.encode(v, w);
      w.join();
    }
    for (const v of (message.reservedName ?? [])) {
      writer.uint32(82).string(v);
    }
    if (message.visibility !== undefined) {
      SymbolVisibility.encodeField(writer, 11, message.visibility);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): DescriptorProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescriptorProto();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        case 2: {
          if (tag !== 18) break;
          message.field.push(FieldDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) break;
          message.extension.push(FieldDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) break;
          message.nestedType.push(DescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) break;
          message.enumType.push(EnumDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) break;
          message.extensionRange.push(DescriptorProto_ExtensionRange.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) break;
          message.oneofDecl.push(OneofDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) break;
          message.options = MessageOptions.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) break;
          message.reservedRange.push(DescriptorProto_ReservedRange.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) break;
          message.reservedName.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 88) break;
          message.visibility = SymbolVisibility.fromNumber(reader.int32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): DescriptorProto {
    return {
      $type: "google.protobuf.DescriptorProto",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : undefined,
      field: globalThis.Array.isArray(object?.field ?? object?.field)
        ? (object.field ?? object.field).map((e: any) => FieldDescriptorProto.fromJSON(e))
        : [],
      extension: globalThis.Array.isArray(object?.extension ?? object?.extension)
        ? (object.extension ?? object.extension).map((e: any) => FieldDescriptorProto.fromJSON(e))
        : [],
      nestedType: globalThis.Array.isArray(object?.nestedType ?? object?.nested_type)
        ? (object.nestedType ?? object.nested_type).map((e: any) => DescriptorProto.fromJSON(e))
        : [],
      enumType: globalThis.Array.isArray(object?.enumType ?? object?.enum_type)
        ? (object.enumType ?? object.enum_type).map((e: any) => EnumDescriptorProto.fromJSON(e))
        : [],
      extensionRange: globalThis.Array.isArray(object?.extensionRange ?? object?.extension_range)
        ? (object.extensionRange ?? object.extension_range).map((e: any) => DescriptorProto_ExtensionRange.fromJSON(e))
        : [],
      oneofDecl: globalThis.Array.isArray(object?.oneofDecl ?? object?.oneof_decl)
        ? (object.oneofDecl ?? object.oneof_decl).map((e: any) => OneofDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options ?? object.options)
        ? MessageOptions.fromJSON(object.options ?? object.options)
        : undefined,
      reservedRange: globalThis.Array.isArray(object?.reservedRange ?? object?.reserved_range)
        ? (object.reservedRange ?? object.reserved_range).map((e: any) => DescriptorProto_ReservedRange.fromJSON(e))
        : [],
      reservedName: globalThis.Array.isArray(object?.reservedName ?? object?.reserved_name)
        ? (object.reservedName ?? object.reserved_name).map((e: any) => String(e))
        : [],
      visibility: isSet(object.visibility ?? object.visibility)
        ? SymbolVisibility.fromJSON(object.visibility ?? object.visibility)
        : undefined,
    };
  },
  toJSON(message: DescriptorProto, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== undefined) {
      obj[pick("name", "name")] = message.name;
    }
    if (message.field?.length) {
      obj[pick("field", "field")] = message.field.map((e) => e ? FieldDescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.extension?.length) {
      obj[pick("extension", "extension")] = message.extension.map((e) => e ? FieldDescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.nestedType?.length) {
      obj[pick("nestedType", "nested_type")] = message.nestedType.map((e) => e ? DescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.enumType?.length) {
      obj[pick("enumType", "enum_type")] = message.enumType.map((e) => e ? EnumDescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.extensionRange?.length) {
      obj[pick("extensionRange", "extension_range")] = message.extensionRange.map((e) => e ? DescriptorProto_ExtensionRange.toJSON(e, use) : undefined);
    }
    if (message.oneofDecl?.length) {
      obj[pick("oneofDecl", "oneof_decl")] = message.oneofDecl.map((e) => e ? OneofDescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.options !== undefined) {
      obj[pick("options", "options")] = message.options
        ? MessageOptions.toJSON(message.options, use)
        : undefined;
    }
    if (message.reservedRange?.length) {
      obj[pick("reservedRange", "reserved_range")] = message.reservedRange.map((e) => e ? DescriptorProto_ReservedRange.toJSON(e, use) : undefined);
    }
    if (message.reservedName?.length) {
      obj[pick("reservedName", "reserved_name")] = message.reservedName.map((e) => e);
    }
    if (message.visibility !== undefined) {
      obj[pick("visibility", "visibility")] = SymbolVisibility.toJSON(message.visibility);
    }
    return obj;
  },
  create<I extends DeepPartial<DescriptorProto>>(base?: I): DescriptorProto {
    return DescriptorProto.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<DescriptorProto>>(object: I): DescriptorProto {
    const message = createBaseDescriptorProto();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : undefined;
    message.field = object.field?.map((e) => FieldDescriptorProto.fromPartial(e)) || [];
    message.extension = object.extension?.map((e) => FieldDescriptorProto.fromPartial(e)) || [];
    message.nestedType = object.nestedType?.map((e) => DescriptorProto.fromPartial(e)) || [];
    message.enumType = object.enumType?.map((e) => EnumDescriptorProto.fromPartial(e)) || [];
    message.extensionRange = object.extensionRange?.map((e) => DescriptorProto_ExtensionRange.fromPartial(e)) || [];
    message.oneofDecl = object.oneofDecl?.map((e) => OneofDescriptorProto.fromPartial(e)) || [];
    message.options = (object.options !== undefined && object.options !== null)
      ? MessageOptions.fromPartial(object.options)
      : undefined;
    message.reservedRange = object.reservedRange?.map((e) => DescriptorProto_ReservedRange.fromPartial(e)) || [];
    message.reservedName = object.reservedName?.map((e) => e) || [];
    message.visibility = (object.visibility !== undefined && object.visibility !== null)
      ? SymbolVisibility.fromJSON(object.visibility.name)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(DescriptorProto);

function createBaseDescriptorProto(): DescriptorProto {
  return {
    $type: "google.protobuf.DescriptorProto",
    name: undefined,
    field: [],
    extension: [],
    nestedType: [],
    enumType: [],
    extensionRange: [],
    oneofDecl: [],
    options: undefined,
    reservedRange: [],
    reservedName: [],
    visibility: undefined,
  };
}

export interface DescriptorProto_ExtensionRange {
  $type: "google.protobuf.DescriptorProto.ExtensionRange";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Inclusive.
   *
   */
  start?: number | undefined;
  /**
   *  Exclusive.
   *
   */
  end?: number | undefined;
  options?: ExtensionRangeOptions | undefined;
}

export const DescriptorProto_ExtensionRange: MessageFns<DescriptorProto_ExtensionRange, "google.protobuf.DescriptorProto.ExtensionRange"> = {
  $type: "google.protobuf.DescriptorProto.ExtensionRange" as const,

  encode(message: DescriptorProto_ExtensionRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== undefined) {
      writer.uint32(16).int32(message.end);
    }
    if (message.options !== undefined) {
      const w = writer.uint32(26).fork();
      ExtensionRangeOptions.encode(message.options, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): DescriptorProto_ExtensionRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescriptorProto_ExtensionRange();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 8) break;
        message.start = reader.int32();
        continue;
      }
        case 2: {
        if (tag !== 16) break;
        message.end = reader.int32();
        continue;
      }
        case 3: {
          if (tag !== 26) break;
          message.options = ExtensionRangeOptions.decode(reader, reader.uint32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): DescriptorProto_ExtensionRange {
    return {
      $type: "google.protobuf.DescriptorProto.ExtensionRange",
      start: isSet(object.start ?? object.start)
        ? Number(object.start ?? object.start)
        : undefined,
      end: isSet(object.end ?? object.end)
        ? Number(object.end ?? object.end)
        : undefined,
      options: isSet(object.options ?? object.options)
        ? ExtensionRangeOptions.fromJSON(object.options ?? object.options)
        : undefined,
    };
  },
  toJSON(message: DescriptorProto_ExtensionRange, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.start !== undefined) {
      obj[pick("start", "start")] = message.start;
    }
    if (message.end !== undefined) {
      obj[pick("end", "end")] = message.end;
    }
    if (message.options !== undefined) {
      obj[pick("options", "options")] = message.options
        ? ExtensionRangeOptions.toJSON(message.options, use)
        : undefined;
    }
    return obj;
  },
  create<I extends DeepPartial<DescriptorProto_ExtensionRange>>(base?: I): DescriptorProto_ExtensionRange {
    return DescriptorProto_ExtensionRange.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<DescriptorProto_ExtensionRange>>(object: I): DescriptorProto_ExtensionRange {
    const message = createBaseDescriptorProto_ExtensionRange();
    message.start = (object.start !== undefined && object.start !== null)
      ? object.start
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? object.end
      : undefined;
    message.options = (object.options !== undefined && object.options !== null)
      ? ExtensionRangeOptions.fromPartial(object.options)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(DescriptorProto_ExtensionRange);

function createBaseDescriptorProto_ExtensionRange(): DescriptorProto_ExtensionRange {
  return {
    $type: "google.protobuf.DescriptorProto.ExtensionRange",
    start: undefined,
    end: undefined,
    options: undefined,
  };
}

/**
 *  Range of reserved tag numbers. Reserved tag numbers may not be used by
 *  fields or extension ranges in the same message. Reserved ranges may
 *  not overlap.
 *
 */
export interface DescriptorProto_ReservedRange {
  $type: "google.protobuf.DescriptorProto.ReservedRange";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Inclusive.
   *
   */
  start?: number | undefined;
  /**
   *  Exclusive.
   *
   */
  end?: number | undefined;
}

export const DescriptorProto_ReservedRange: MessageFns<DescriptorProto_ReservedRange, "google.protobuf.DescriptorProto.ReservedRange"> = {
  $type: "google.protobuf.DescriptorProto.ReservedRange" as const,

  encode(message: DescriptorProto_ReservedRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== undefined) {
      writer.uint32(16).int32(message.end);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): DescriptorProto_ReservedRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescriptorProto_ReservedRange();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 8) break;
        message.start = reader.int32();
        continue;
      }
        case 2: {
        if (tag !== 16) break;
        message.end = reader.int32();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): DescriptorProto_ReservedRange {
    return {
      $type: "google.protobuf.DescriptorProto.ReservedRange",
      start: isSet(object.start ?? object.start)
        ? Number(object.start ?? object.start)
        : undefined,
      end: isSet(object.end ?? object.end)
        ? Number(object.end ?? object.end)
        : undefined,
    };
  },
  toJSON(message: DescriptorProto_ReservedRange, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.start !== undefined) {
      obj[pick("start", "start")] = message.start;
    }
    if (message.end !== undefined) {
      obj[pick("end", "end")] = message.end;
    }
    return obj;
  },
  create<I extends DeepPartial<DescriptorProto_ReservedRange>>(base?: I): DescriptorProto_ReservedRange {
    return DescriptorProto_ReservedRange.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<DescriptorProto_ReservedRange>>(object: I): DescriptorProto_ReservedRange {
    const message = createBaseDescriptorProto_ReservedRange();
    message.start = (object.start !== undefined && object.start !== null)
      ? object.start
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? object.end
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(DescriptorProto_ReservedRange);

function createBaseDescriptorProto_ReservedRange(): DescriptorProto_ReservedRange {
  return {
    $type: "google.protobuf.DescriptorProto.ReservedRange",
    start: undefined,
    end: undefined,
  };
}

export interface ExtensionRangeOptions {
  $type: "google.protobuf.ExtensionRangeOptions";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   *
   */
  uninterpretedOption: UninterpretedOption[];
  /**
   *  For external users: DO NOT USE. We are in the process of open sourcing
   *  extension declaration and executing internal cleanups before it can be
   *  used externally.
   *
   */
  declaration: ExtensionRangeOptions_Declaration[];
  /**
   *  Any features defined in the specific edition.
   *
   */
  features?: FeatureSet | undefined;
  /**
   *  The verification state of the range.
   *  TODO: flip the default to DECLARATION once all empty ranges
   *  are marked as UNVERIFIED.
   *
   */
  verification?: ExtensionRangeOptions_VerificationState | undefined;
}

export const ExtensionRangeOptions: MessageFns<ExtensionRangeOptions, "google.protobuf.ExtensionRangeOptions"> = {
  $type: "google.protobuf.ExtensionRangeOptions" as const,

  encode(message: ExtensionRangeOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of (message.uninterpretedOption ?? [])) {
      const w = writer.uint32(7994).fork();
      UninterpretedOption.encode(v, w);
      w.join();
    }
    for (const v of (message.declaration ?? [])) {
      const w = writer.uint32(18).fork();
      ExtensionRangeOptions_Declaration.encode(v, w);
      w.join();
    }
    if (message.features !== undefined) {
      const w = writer.uint32(402).fork();
      FeatureSet.encode(message.features, w);
      w.join();
    }
    if (message.verification !== undefined) {
      ExtensionRangeOptions_VerificationState.encodeField(writer, 3, message.verification);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    // Encode registered extensions for *Options message
    for (const ext of protoRegistry.listExtensions(message.$type)) {
      ext.encode?.(message, writer);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionRangeOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionRangeOptions();
    let writer: BinaryWriter | undefined = undefined;
    const _exts = protoRegistry.listExtensions("google.protobuf.ExtensionRangeOptions");
    const _extMap: Record<number, any> = {};
    for (const _e of _exts) _extMap[_e.fieldNo] = _e;
    const _declared: Record<number, true> = { 999: true, 2: true, 50: true, 3: true };
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 999: {
          if (tag !== 7994) break;
          message.uninterpretedOption.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) break;
          message.declaration.push(ExtensionRangeOptions_Declaration.decode(reader, reader.uint32()));
          continue;
        }
        case 50: {
          if (tag !== 402) break;
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) break;
          message.verification = ExtensionRangeOptions_VerificationState.fromNumber(reader.int32());
          continue;
        }
        default:
          break;
      }
      {
        const _fn = tag >>> 3;
        const _maybeExt = _extMap[_fn];
        if (_maybeExt && !_declared[_fn]) {
          if (_maybeExt.decode && _maybeExt.decode(message as any, reader, tag)) {
            continue;
          }
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): ExtensionRangeOptions {
    const message: ExtensionRangeOptions = {
      $type: "google.protobuf.ExtensionRangeOptions",
      uninterpretedOption: globalThis.Array.isArray(object?.uninterpretedOption ?? object?.uninterpreted_option)
        ? (object.uninterpretedOption ?? object.uninterpreted_option).map((e: any) => UninterpretedOption.fromJSON(e))
        : [],
      declaration: globalThis.Array.isArray(object?.declaration ?? object?.declaration)
        ? (object.declaration ?? object.declaration).map((e: any) => ExtensionRangeOptions_Declaration.fromJSON(e))
        : [],
      features: isSet(object.features ?? object.features)
        ? FeatureSet.fromJSON(object.features ?? object.features)
        : undefined,
      verification: isSet(object.verification ?? object.verification)
        ? ExtensionRangeOptions_VerificationState.fromJSON(object.verification ?? object.verification)
        : undefined,
    };
    // Populate registered extensions (json)
    for (const _ext of protoRegistry.listExtensions("google.protobuf.ExtensionRangeOptions")) {
      _ext.fromJSON?.(message as any, object);
    }
    return message;
  },
  toJSON(message: ExtensionRangeOptions, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.uninterpretedOption?.length) {
      obj[pick("uninterpretedOption", "uninterpreted_option")] = message.uninterpretedOption.map((e) => e ? UninterpretedOption.toJSON(e, use) : undefined);
    }
    if (message.declaration?.length) {
      obj[pick("declaration", "declaration")] = message.declaration.map((e) => e ? ExtensionRangeOptions_Declaration.toJSON(e, use) : undefined);
    }
    if (message.features !== undefined) {
      obj[pick("features", "features")] = message.features
        ? FeatureSet.toJSON(message.features, use)
        : undefined;
    }
    if (message.verification !== undefined) {
      obj[pick("verification", "verification")] = ExtensionRangeOptions_VerificationState.toJSON(message.verification);
    }
    // Serialize registered extensions
    for (const _ext of protoRegistry.listExtensions(message.$type)) {
      _ext.toJSON?.(message as any, obj, use);
    }
    return obj;
  },
  create<I extends DeepPartial<ExtensionRangeOptions>>(base?: I): ExtensionRangeOptions {
    return ExtensionRangeOptions.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<ExtensionRangeOptions>>(object: I): ExtensionRangeOptions {
    const message = createBaseExtensionRangeOptions();
    message.uninterpretedOption = object.uninterpretedOption?.map((e) => UninterpretedOption.fromPartial(e)) || [];
    message.declaration = object.declaration?.map((e) => ExtensionRangeOptions_Declaration.fromPartial(e)) || [];
    message.features = (object.features !== undefined && object.features !== null)
      ? FeatureSet.fromPartial(object.features)
      : undefined;
    message.verification = (object.verification !== undefined && object.verification !== null)
      ? ExtensionRangeOptions_VerificationState.fromJSON(object.verification.name)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(ExtensionRangeOptions);

function createBaseExtensionRangeOptions(): ExtensionRangeOptions {
  return {
    $type: "google.protobuf.ExtensionRangeOptions",
    uninterpretedOption: [],
    declaration: [],
    features: undefined,
    verification: undefined,
  };
}

export interface ExtensionRangeOptions_Declaration {
  $type: "google.protobuf.ExtensionRangeOptions.Declaration";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  The extension number declared within the extension range.
   *
   */
  number?: number | undefined;
  /**
   *  The fully-qualified name of the extension field. There must be a leading
   *  dot in front of the full name.
   *
   */
  fullName?: string | undefined;
  /**
   *  The fully-qualified type name of the extension field. Unlike
   *  Metadata.type, Declaration.type must have a leading dot for messages
   *  and enums.
   *
   */
  type?: string | undefined;
  /**
   *  If true, indicates that the number is reserved in the extension range,
   *  and any extension field with the number will fail to compile. Set this
   *  when a declared extension field is deleted.
   *
   */
  reserved?: boolean | undefined;
  /**
   *  If true, indicates that the extension must be defined as repeated.
   *  Otherwise the extension must be defined as optional.
   *
   */
  repeated?: boolean | undefined;
}

export const ExtensionRangeOptions_Declaration: MessageFns<ExtensionRangeOptions_Declaration, "google.protobuf.ExtensionRangeOptions.Declaration"> = {
  $type: "google.protobuf.ExtensionRangeOptions.Declaration" as const,

  encode(message: ExtensionRangeOptions_Declaration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== undefined) {
      writer.uint32(8).int32(message.number);
    }
    if (message.fullName !== undefined) {
      writer.uint32(18).string(message.fullName);
    }
    if (message.type !== undefined) {
      writer.uint32(26).string(message.type);
    }
    if (message.reserved !== undefined) {
      writer.uint32(40).bool(message.reserved);
    }
    if (message.repeated !== undefined) {
      writer.uint32(48).bool(message.repeated);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionRangeOptions_Declaration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionRangeOptions_Declaration();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 8) break;
        message.number = reader.int32();
        continue;
      }
        case 2: {
        if (tag !== 18) break;
        message.fullName = reader.string();
        continue;
      }
        case 3: {
        if (tag !== 26) break;
        message.type = reader.string();
        continue;
      }
        case 5: {
        if (tag !== 40) break;
        message.reserved = reader.bool();
        continue;
      }
        case 6: {
        if (tag !== 48) break;
        message.repeated = reader.bool();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): ExtensionRangeOptions_Declaration {
    return {
      $type: "google.protobuf.ExtensionRangeOptions.Declaration",
      number: isSet(object.number ?? object.number)
        ? Number(object.number ?? object.number)
        : undefined,
      fullName: isSet(object.fullName ?? object.full_name)
        ? String(object.fullName ?? object.full_name)
        : undefined,
      type: isSet(object.type ?? object.type)
        ? String(object.type ?? object.type)
        : undefined,
      reserved: isSet(object.reserved ?? object.reserved)
        ? Boolean(object.reserved ?? object.reserved)
        : undefined,
      repeated: isSet(object.repeated ?? object.repeated)
        ? Boolean(object.repeated ?? object.repeated)
        : undefined,
    };
  },
  toJSON(message: ExtensionRangeOptions_Declaration, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.number !== undefined) {
      obj[pick("number", "number")] = message.number;
    }
    if (message.fullName !== undefined) {
      obj[pick("fullName", "full_name")] = message.fullName;
    }
    if (message.type !== undefined) {
      obj[pick("type", "type")] = message.type;
    }
    if (message.reserved !== undefined) {
      obj[pick("reserved", "reserved")] = message.reserved;
    }
    if (message.repeated !== undefined) {
      obj[pick("repeated", "repeated")] = message.repeated;
    }
    return obj;
  },
  create<I extends DeepPartial<ExtensionRangeOptions_Declaration>>(base?: I): ExtensionRangeOptions_Declaration {
    return ExtensionRangeOptions_Declaration.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<ExtensionRangeOptions_Declaration>>(object: I): ExtensionRangeOptions_Declaration {
    const message = createBaseExtensionRangeOptions_Declaration();
    message.number = (object.number !== undefined && object.number !== null)
      ? object.number
      : undefined;
    message.fullName = (object.fullName !== undefined && object.fullName !== null)
      ? object.fullName
      : undefined;
    message.type = (object.type !== undefined && object.type !== null)
      ? object.type
      : undefined;
    message.reserved = (object.reserved !== undefined && object.reserved !== null)
      ? object.reserved
      : undefined;
    message.repeated = (object.repeated !== undefined && object.repeated !== null)
      ? object.repeated
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(ExtensionRangeOptions_Declaration);

function createBaseExtensionRangeOptions_Declaration(): ExtensionRangeOptions_Declaration {
  return {
    $type: "google.protobuf.ExtensionRangeOptions.Declaration",
    number: undefined,
    fullName: undefined,
    type: undefined,
    reserved: undefined,
    repeated: undefined,
  };
}

/**
 *  Describes a field within a message.
 *
 */
export interface FieldDescriptorProto {
  $type: "google.protobuf.FieldDescriptorProto";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name?: string | undefined;
  number?: number | undefined;
  label?: FieldDescriptorProto_Label | undefined;
  /**
   *  If type_name is set, this need not be set.  If both this and type_name
   *  are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
   *
   */
  type?: FieldDescriptorProto_Type | undefined;
  /**
   *  For message and enum types, this is the name of the type.  If the name
   *  starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
   *  rules are used to find the type (i.e. first the nested types within this
   *  message are searched, then within the parent, on up to the root
   *  namespace).
   *
   */
  typeName?: string | undefined;
  /**
   *  For extensions, this is the name of the type being extended.  It is
   *  resolved in the same manner as type_name.
   *
   */
  extendee?: string | undefined;
  /**
   *  For numeric types, contains the original text representation of the value.
   *  For booleans, "true" or "false".
   *  For strings, contains the default text contents (not escaped in any way).
   *  For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
   *
   */
  defaultValue?: string | undefined;
  /**
   *  If set, gives the index of a oneof in the containing type's oneof_decl
   *  list.  This field is a member of that oneof.
   *
   */
  oneofIndex?: number | undefined;
  /**
   *  JSON name of this field. The value is set by protocol compiler. If the
   *  user has set a "json_name" option on this field, that option's value
   *  will be used. Otherwise, it's deduced from the field's name by converting
   *  it to camelCase.
   *
   */
  jsonName?: string | undefined;
  options?: FieldOptions | undefined;
  /**
   *  If true, this is a proto3 "optional". When a proto3 field is optional, it
   *  tracks presence regardless of field type.
   *
   *  When proto3_optional is true, this field must belong to a oneof to signal
   *  to old proto3 clients that presence is tracked for this field. This oneof
   *  is known as a "synthetic" oneof, and this field must be its sole member
   *  (each proto3 optional field gets its own synthetic oneof). Synthetic oneofs
   *  exist in the descriptor only, and do not generate any API. Synthetic oneofs
   *  must be ordered after all "real" oneofs.
   *
   *  For message fields, proto3_optional doesn't create any semantic change,
   *  since non-repeated message fields always track presence. However it still
   *  indicates the semantic detail of whether the user wrote "optional" or not.
   *  This can be useful for round-tripping the .proto file. For consistency we
   *  give message fields a synthetic oneof also, even though it is not required
   *  to track presence. This is especially important because the parser can't
   *  tell if a field is a message or an enum, so it must always create a
   *  synthetic oneof.
   *
   *  Proto2 optional fields do not set this flag, because they already indicate
   *  optional with `LABEL_OPTIONAL`.
   *
   */
  proto3Optional?: boolean | undefined;
}

export const FieldDescriptorProto: MessageFns<FieldDescriptorProto, "google.protobuf.FieldDescriptorProto"> = {
  $type: "google.protobuf.FieldDescriptorProto" as const,

  encode(message: FieldDescriptorProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.number !== undefined) {
      writer.uint32(24).int32(message.number);
    }
    if (message.label !== undefined) {
      FieldDescriptorProto_Label.encodeField(writer, 4, message.label);
    }
    if (message.type !== undefined) {
      FieldDescriptorProto_Type.encodeField(writer, 5, message.type);
    }
    if (message.typeName !== undefined) {
      writer.uint32(50).string(message.typeName);
    }
    if (message.extendee !== undefined) {
      writer.uint32(18).string(message.extendee);
    }
    if (message.defaultValue !== undefined) {
      writer.uint32(58).string(message.defaultValue);
    }
    if (message.oneofIndex !== undefined) {
      writer.uint32(72).int32(message.oneofIndex);
    }
    if (message.jsonName !== undefined) {
      writer.uint32(82).string(message.jsonName);
    }
    if (message.options !== undefined) {
      const w = writer.uint32(66).fork();
      FieldOptions.encode(message.options, w);
      w.join();
    }
    if (message.proto3Optional !== undefined) {
      writer.uint32(136).bool(message.proto3Optional);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FieldDescriptorProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldDescriptorProto();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        case 3: {
        if (tag !== 24) break;
        message.number = reader.int32();
        continue;
      }
        case 4: {
          if (tag !== 32) break;
          message.label = FieldDescriptorProto_Label.fromNumber(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 40) break;
          message.type = FieldDescriptorProto_Type.fromNumber(reader.int32());
          continue;
        }
        case 6: {
        if (tag !== 50) break;
        message.typeName = reader.string();
        continue;
      }
        case 2: {
        if (tag !== 18) break;
        message.extendee = reader.string();
        continue;
      }
        case 7: {
        if (tag !== 58) break;
        message.defaultValue = reader.string();
        continue;
      }
        case 9: {
        if (tag !== 72) break;
        message.oneofIndex = reader.int32();
        continue;
      }
        case 10: {
        if (tag !== 82) break;
        message.jsonName = reader.string();
        continue;
      }
        case 8: {
          if (tag !== 66) break;
          message.options = FieldOptions.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
        if (tag !== 136) break;
        message.proto3Optional = reader.bool();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FieldDescriptorProto {
    return {
      $type: "google.protobuf.FieldDescriptorProto",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : undefined,
      number: isSet(object.number ?? object.number)
        ? Number(object.number ?? object.number)
        : undefined,
      label: isSet(object.label ?? object.label)
        ? FieldDescriptorProto_Label.fromJSON(object.label ?? object.label)
        : undefined,
      type: isSet(object.type ?? object.type)
        ? FieldDescriptorProto_Type.fromJSON(object.type ?? object.type)
        : undefined,
      typeName: isSet(object.typeName ?? object.type_name)
        ? String(object.typeName ?? object.type_name)
        : undefined,
      extendee: isSet(object.extendee ?? object.extendee)
        ? String(object.extendee ?? object.extendee)
        : undefined,
      defaultValue: isSet(object.defaultValue ?? object.default_value)
        ? String(object.defaultValue ?? object.default_value)
        : undefined,
      oneofIndex: isSet(object.oneofIndex ?? object.oneof_index)
        ? Number(object.oneofIndex ?? object.oneof_index)
        : undefined,
      jsonName: isSet(object.jsonName ?? object.json_name)
        ? String(object.jsonName ?? object.json_name)
        : undefined,
      options: isSet(object.options ?? object.options)
        ? FieldOptions.fromJSON(object.options ?? object.options)
        : undefined,
      proto3Optional: isSet(object.proto3Optional ?? object.proto3_optional)
        ? Boolean(object.proto3Optional ?? object.proto3_optional)
        : undefined,
    };
  },
  toJSON(message: FieldDescriptorProto, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== undefined) {
      obj[pick("name", "name")] = message.name;
    }
    if (message.number !== undefined) {
      obj[pick("number", "number")] = message.number;
    }
    if (message.label !== undefined) {
      obj[pick("label", "label")] = FieldDescriptorProto_Label.toJSON(message.label);
    }
    if (message.type !== undefined) {
      obj[pick("type", "type")] = FieldDescriptorProto_Type.toJSON(message.type);
    }
    if (message.typeName !== undefined) {
      obj[pick("typeName", "type_name")] = message.typeName;
    }
    if (message.extendee !== undefined) {
      obj[pick("extendee", "extendee")] = message.extendee;
    }
    if (message.defaultValue !== undefined) {
      obj[pick("defaultValue", "default_value")] = message.defaultValue;
    }
    if (message.oneofIndex !== undefined) {
      obj[pick("oneofIndex", "oneof_index")] = message.oneofIndex;
    }
    if (message.jsonName !== undefined) {
      obj[pick("jsonName", "json_name")] = message.jsonName;
    }
    if (message.options !== undefined) {
      obj[pick("options", "options")] = message.options
        ? FieldOptions.toJSON(message.options, use)
        : undefined;
    }
    if (message.proto3Optional !== undefined) {
      obj[pick("proto3Optional", "proto3_optional")] = message.proto3Optional;
    }
    return obj;
  },
  create<I extends DeepPartial<FieldDescriptorProto>>(base?: I): FieldDescriptorProto {
    return FieldDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FieldDescriptorProto>>(object: I): FieldDescriptorProto {
    const message = createBaseFieldDescriptorProto();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : undefined;
    message.number = (object.number !== undefined && object.number !== null)
      ? object.number
      : undefined;
    message.label = (object.label !== undefined && object.label !== null)
      ? FieldDescriptorProto_Label.fromJSON(object.label.name)
      : undefined;
    message.type = (object.type !== undefined && object.type !== null)
      ? FieldDescriptorProto_Type.fromJSON(object.type.name)
      : undefined;
    message.typeName = (object.typeName !== undefined && object.typeName !== null)
      ? object.typeName
      : undefined;
    message.extendee = (object.extendee !== undefined && object.extendee !== null)
      ? object.extendee
      : undefined;
    message.defaultValue = (object.defaultValue !== undefined && object.defaultValue !== null)
      ? object.defaultValue
      : undefined;
    message.oneofIndex = (object.oneofIndex !== undefined && object.oneofIndex !== null)
      ? object.oneofIndex
      : undefined;
    message.jsonName = (object.jsonName !== undefined && object.jsonName !== null)
      ? object.jsonName
      : undefined;
    message.options = (object.options !== undefined && object.options !== null)
      ? FieldOptions.fromPartial(object.options)
      : undefined;
    message.proto3Optional = (object.proto3Optional !== undefined && object.proto3Optional !== null)
      ? object.proto3Optional
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(FieldDescriptorProto);

function createBaseFieldDescriptorProto(): FieldDescriptorProto {
  return {
    $type: "google.protobuf.FieldDescriptorProto",
    name: undefined,
    number: undefined,
    label: undefined,
    type: undefined,
    typeName: undefined,
    extendee: undefined,
    defaultValue: undefined,
    oneofIndex: undefined,
    jsonName: undefined,
    options: undefined,
    proto3Optional: undefined,
  };
}

/**
 *  Describes a oneof.
 *
 */
export interface OneofDescriptorProto {
  $type: "google.protobuf.OneofDescriptorProto";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name?: string | undefined;
  options?: OneofOptions | undefined;
}

export const OneofDescriptorProto: MessageFns<OneofDescriptorProto, "google.protobuf.OneofDescriptorProto"> = {
  $type: "google.protobuf.OneofDescriptorProto" as const,

  encode(message: OneofDescriptorProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.options !== undefined) {
      const w = writer.uint32(18).fork();
      OneofOptions.encode(message.options, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): OneofDescriptorProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneofDescriptorProto();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        case 2: {
          if (tag !== 18) break;
          message.options = OneofOptions.decode(reader, reader.uint32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): OneofDescriptorProto {
    return {
      $type: "google.protobuf.OneofDescriptorProto",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : undefined,
      options: isSet(object.options ?? object.options)
        ? OneofOptions.fromJSON(object.options ?? object.options)
        : undefined,
    };
  },
  toJSON(message: OneofDescriptorProto, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== undefined) {
      obj[pick("name", "name")] = message.name;
    }
    if (message.options !== undefined) {
      obj[pick("options", "options")] = message.options
        ? OneofOptions.toJSON(message.options, use)
        : undefined;
    }
    return obj;
  },
  create<I extends DeepPartial<OneofDescriptorProto>>(base?: I): OneofDescriptorProto {
    return OneofDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<OneofDescriptorProto>>(object: I): OneofDescriptorProto {
    const message = createBaseOneofDescriptorProto();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : undefined;
    message.options = (object.options !== undefined && object.options !== null)
      ? OneofOptions.fromPartial(object.options)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(OneofDescriptorProto);

function createBaseOneofDescriptorProto(): OneofDescriptorProto {
  return {
    $type: "google.protobuf.OneofDescriptorProto",
    name: undefined,
    options: undefined,
  };
}

/**
 *  Describes an enum type.
 *
 */
export interface EnumDescriptorProto {
  $type: "google.protobuf.EnumDescriptorProto";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name?: string | undefined;
  value: EnumValueDescriptorProto[];
  options?: EnumOptions | undefined;
  /**
   *  Range of reserved numeric values. Reserved numeric values may not be used
   *  by enum values in the same enum declaration. Reserved ranges may not
   *  overlap.
   *
   */
  reservedRange: EnumDescriptorProto_EnumReservedRange[];
  /**
   *  Reserved enum value names, which may not be reused. A given name may only
   *  be reserved once.
   *
   */
  reservedName: string[];
  /**
   *  Support for `export` and `local` keywords on enums.
   *
   */
  visibility?: SymbolVisibility | undefined;
}

export const EnumDescriptorProto: MessageFns<EnumDescriptorProto, "google.protobuf.EnumDescriptorProto"> = {
  $type: "google.protobuf.EnumDescriptorProto" as const,

  encode(message: EnumDescriptorProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    for (const v of (message.value ?? [])) {
      const w = writer.uint32(18).fork();
      EnumValueDescriptorProto.encode(v, w);
      w.join();
    }
    if (message.options !== undefined) {
      const w = writer.uint32(26).fork();
      EnumOptions.encode(message.options, w);
      w.join();
    }
    for (const v of (message.reservedRange ?? [])) {
      const w = writer.uint32(34).fork();
      EnumDescriptorProto_EnumReservedRange.encode(v, w);
      w.join();
    }
    for (const v of (message.reservedName ?? [])) {
      writer.uint32(42).string(v);
    }
    if (message.visibility !== undefined) {
      SymbolVisibility.encodeField(writer, 6, message.visibility);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): EnumDescriptorProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumDescriptorProto();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        case 2: {
          if (tag !== 18) break;
          message.value.push(EnumValueDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) break;
          message.options = EnumOptions.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) break;
          message.reservedRange.push(EnumDescriptorProto_EnumReservedRange.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) break;
          message.reservedName.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 48) break;
          message.visibility = SymbolVisibility.fromNumber(reader.int32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): EnumDescriptorProto {
    return {
      $type: "google.protobuf.EnumDescriptorProto",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : undefined,
      value: globalThis.Array.isArray(object?.value ?? object?.value)
        ? (object.value ?? object.value).map((e: any) => EnumValueDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options ?? object.options)
        ? EnumOptions.fromJSON(object.options ?? object.options)
        : undefined,
      reservedRange: globalThis.Array.isArray(object?.reservedRange ?? object?.reserved_range)
        ? (object.reservedRange ?? object.reserved_range).map((e: any) => EnumDescriptorProto_EnumReservedRange.fromJSON(e))
        : [],
      reservedName: globalThis.Array.isArray(object?.reservedName ?? object?.reserved_name)
        ? (object.reservedName ?? object.reserved_name).map((e: any) => String(e))
        : [],
      visibility: isSet(object.visibility ?? object.visibility)
        ? SymbolVisibility.fromJSON(object.visibility ?? object.visibility)
        : undefined,
    };
  },
  toJSON(message: EnumDescriptorProto, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== undefined) {
      obj[pick("name", "name")] = message.name;
    }
    if (message.value?.length) {
      obj[pick("value", "value")] = message.value.map((e) => e ? EnumValueDescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.options !== undefined) {
      obj[pick("options", "options")] = message.options
        ? EnumOptions.toJSON(message.options, use)
        : undefined;
    }
    if (message.reservedRange?.length) {
      obj[pick("reservedRange", "reserved_range")] = message.reservedRange.map((e) => e ? EnumDescriptorProto_EnumReservedRange.toJSON(e, use) : undefined);
    }
    if (message.reservedName?.length) {
      obj[pick("reservedName", "reserved_name")] = message.reservedName.map((e) => e);
    }
    if (message.visibility !== undefined) {
      obj[pick("visibility", "visibility")] = SymbolVisibility.toJSON(message.visibility);
    }
    return obj;
  },
  create<I extends DeepPartial<EnumDescriptorProto>>(base?: I): EnumDescriptorProto {
    return EnumDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<EnumDescriptorProto>>(object: I): EnumDescriptorProto {
    const message = createBaseEnumDescriptorProto();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : undefined;
    message.value = object.value?.map((e) => EnumValueDescriptorProto.fromPartial(e)) || [];
    message.options = (object.options !== undefined && object.options !== null)
      ? EnumOptions.fromPartial(object.options)
      : undefined;
    message.reservedRange = object.reservedRange?.map((e) => EnumDescriptorProto_EnumReservedRange.fromPartial(e)) || [];
    message.reservedName = object.reservedName?.map((e) => e) || [];
    message.visibility = (object.visibility !== undefined && object.visibility !== null)
      ? SymbolVisibility.fromJSON(object.visibility.name)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(EnumDescriptorProto);

function createBaseEnumDescriptorProto(): EnumDescriptorProto {
  return {
    $type: "google.protobuf.EnumDescriptorProto",
    name: undefined,
    value: [],
    options: undefined,
    reservedRange: [],
    reservedName: [],
    visibility: undefined,
  };
}

/**
 *  Range of reserved numeric values. Reserved values may not be used by
 *  entries in the same enum. Reserved ranges may not overlap.
 *
 *  Note that this is distinct from DescriptorProto.ReservedRange in that it
 *  is inclusive such that it can appropriately represent the entire int32
 *  domain.
 *
 */
export interface EnumDescriptorProto_EnumReservedRange {
  $type: "google.protobuf.EnumDescriptorProto.EnumReservedRange";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Inclusive.
   *
   */
  start?: number | undefined;
  /**
   *  Inclusive.
   *
   */
  end?: number | undefined;
}

export const EnumDescriptorProto_EnumReservedRange: MessageFns<EnumDescriptorProto_EnumReservedRange, "google.protobuf.EnumDescriptorProto.EnumReservedRange"> = {
  $type: "google.protobuf.EnumDescriptorProto.EnumReservedRange" as const,

  encode(message: EnumDescriptorProto_EnumReservedRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== undefined) {
      writer.uint32(16).int32(message.end);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): EnumDescriptorProto_EnumReservedRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumDescriptorProto_EnumReservedRange();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 8) break;
        message.start = reader.int32();
        continue;
      }
        case 2: {
        if (tag !== 16) break;
        message.end = reader.int32();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): EnumDescriptorProto_EnumReservedRange {
    return {
      $type: "google.protobuf.EnumDescriptorProto.EnumReservedRange",
      start: isSet(object.start ?? object.start)
        ? Number(object.start ?? object.start)
        : undefined,
      end: isSet(object.end ?? object.end)
        ? Number(object.end ?? object.end)
        : undefined,
    };
  },
  toJSON(message: EnumDescriptorProto_EnumReservedRange, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.start !== undefined) {
      obj[pick("start", "start")] = message.start;
    }
    if (message.end !== undefined) {
      obj[pick("end", "end")] = message.end;
    }
    return obj;
  },
  create<I extends DeepPartial<EnumDescriptorProto_EnumReservedRange>>(base?: I): EnumDescriptorProto_EnumReservedRange {
    return EnumDescriptorProto_EnumReservedRange.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<EnumDescriptorProto_EnumReservedRange>>(object: I): EnumDescriptorProto_EnumReservedRange {
    const message = createBaseEnumDescriptorProto_EnumReservedRange();
    message.start = (object.start !== undefined && object.start !== null)
      ? object.start
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? object.end
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(EnumDescriptorProto_EnumReservedRange);

function createBaseEnumDescriptorProto_EnumReservedRange(): EnumDescriptorProto_EnumReservedRange {
  return {
    $type: "google.protobuf.EnumDescriptorProto.EnumReservedRange",
    start: undefined,
    end: undefined,
  };
}

/**
 *  Describes a value within an enum.
 *
 */
export interface EnumValueDescriptorProto {
  $type: "google.protobuf.EnumValueDescriptorProto";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name?: string | undefined;
  number?: number | undefined;
  options?: EnumValueOptions | undefined;
}

export const EnumValueDescriptorProto: MessageFns<EnumValueDescriptorProto, "google.protobuf.EnumValueDescriptorProto"> = {
  $type: "google.protobuf.EnumValueDescriptorProto" as const,

  encode(message: EnumValueDescriptorProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.number !== undefined) {
      writer.uint32(16).int32(message.number);
    }
    if (message.options !== undefined) {
      const w = writer.uint32(26).fork();
      EnumValueOptions.encode(message.options, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): EnumValueDescriptorProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumValueDescriptorProto();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        case 2: {
        if (tag !== 16) break;
        message.number = reader.int32();
        continue;
      }
        case 3: {
          if (tag !== 26) break;
          message.options = EnumValueOptions.decode(reader, reader.uint32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): EnumValueDescriptorProto {
    return {
      $type: "google.protobuf.EnumValueDescriptorProto",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : undefined,
      number: isSet(object.number ?? object.number)
        ? Number(object.number ?? object.number)
        : undefined,
      options: isSet(object.options ?? object.options)
        ? EnumValueOptions.fromJSON(object.options ?? object.options)
        : undefined,
    };
  },
  toJSON(message: EnumValueDescriptorProto, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== undefined) {
      obj[pick("name", "name")] = message.name;
    }
    if (message.number !== undefined) {
      obj[pick("number", "number")] = message.number;
    }
    if (message.options !== undefined) {
      obj[pick("options", "options")] = message.options
        ? EnumValueOptions.toJSON(message.options, use)
        : undefined;
    }
    return obj;
  },
  create<I extends DeepPartial<EnumValueDescriptorProto>>(base?: I): EnumValueDescriptorProto {
    return EnumValueDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<EnumValueDescriptorProto>>(object: I): EnumValueDescriptorProto {
    const message = createBaseEnumValueDescriptorProto();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : undefined;
    message.number = (object.number !== undefined && object.number !== null)
      ? object.number
      : undefined;
    message.options = (object.options !== undefined && object.options !== null)
      ? EnumValueOptions.fromPartial(object.options)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(EnumValueDescriptorProto);

function createBaseEnumValueDescriptorProto(): EnumValueDescriptorProto {
  return {
    $type: "google.protobuf.EnumValueDescriptorProto",
    name: undefined,
    number: undefined,
    options: undefined,
  };
}

/**
 *  Describes a service.
 *
 */
export interface ServiceDescriptorProto {
  $type: "google.protobuf.ServiceDescriptorProto";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name?: string | undefined;
  method: MethodDescriptorProto[];
  options?: ServiceOptions | undefined;
}

export const ServiceDescriptorProto: MessageFns<ServiceDescriptorProto, "google.protobuf.ServiceDescriptorProto"> = {
  $type: "google.protobuf.ServiceDescriptorProto" as const,

  encode(message: ServiceDescriptorProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    for (const v of (message.method ?? [])) {
      const w = writer.uint32(18).fork();
      MethodDescriptorProto.encode(v, w);
      w.join();
    }
    if (message.options !== undefined) {
      const w = writer.uint32(26).fork();
      ServiceOptions.encode(message.options, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): ServiceDescriptorProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceDescriptorProto();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        case 2: {
          if (tag !== 18) break;
          message.method.push(MethodDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) break;
          message.options = ServiceOptions.decode(reader, reader.uint32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): ServiceDescriptorProto {
    return {
      $type: "google.protobuf.ServiceDescriptorProto",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : undefined,
      method: globalThis.Array.isArray(object?.method ?? object?.method)
        ? (object.method ?? object.method).map((e: any) => MethodDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options ?? object.options)
        ? ServiceOptions.fromJSON(object.options ?? object.options)
        : undefined,
    };
  },
  toJSON(message: ServiceDescriptorProto, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== undefined) {
      obj[pick("name", "name")] = message.name;
    }
    if (message.method?.length) {
      obj[pick("method", "method")] = message.method.map((e) => e ? MethodDescriptorProto.toJSON(e, use) : undefined);
    }
    if (message.options !== undefined) {
      obj[pick("options", "options")] = message.options
        ? ServiceOptions.toJSON(message.options, use)
        : undefined;
    }
    return obj;
  },
  create<I extends DeepPartial<ServiceDescriptorProto>>(base?: I): ServiceDescriptorProto {
    return ServiceDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<ServiceDescriptorProto>>(object: I): ServiceDescriptorProto {
    const message = createBaseServiceDescriptorProto();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : undefined;
    message.method = object.method?.map((e) => MethodDescriptorProto.fromPartial(e)) || [];
    message.options = (object.options !== undefined && object.options !== null)
      ? ServiceOptions.fromPartial(object.options)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(ServiceDescriptorProto);

function createBaseServiceDescriptorProto(): ServiceDescriptorProto {
  return {
    $type: "google.protobuf.ServiceDescriptorProto",
    name: undefined,
    method: [],
    options: undefined,
  };
}

/**
 *  Describes a method of a service.
 *
 */
export interface MethodDescriptorProto {
  $type: "google.protobuf.MethodDescriptorProto";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name?: string | undefined;
  /**
   *  Input and output type names.  These are resolved in the same way as
   *  FieldDescriptorProto.type_name, but must refer to a message type.
   *
   */
  inputType?: string | undefined;
  outputType?: string | undefined;
  options?: MethodOptions | undefined;
  /**
   *  Identifies if client streams multiple client messages
   *
   */
  clientStreaming?: boolean | undefined;
  /**
   *  Identifies if server streams multiple server messages
   *
   */
  serverStreaming?: boolean | undefined;
}

export const MethodDescriptorProto: MessageFns<MethodDescriptorProto, "google.protobuf.MethodDescriptorProto"> = {
  $type: "google.protobuf.MethodDescriptorProto" as const,

  encode(message: MethodDescriptorProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.inputType !== undefined) {
      writer.uint32(18).string(message.inputType);
    }
    if (message.outputType !== undefined) {
      writer.uint32(26).string(message.outputType);
    }
    if (message.options !== undefined) {
      const w = writer.uint32(34).fork();
      MethodOptions.encode(message.options, w);
      w.join();
    }
    if (message.clientStreaming !== undefined) {
      writer.uint32(40).bool(message.clientStreaming);
    }
    if (message.serverStreaming !== undefined) {
      writer.uint32(48).bool(message.serverStreaming);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): MethodDescriptorProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodDescriptorProto();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.name = reader.string();
        continue;
      }
        case 2: {
        if (tag !== 18) break;
        message.inputType = reader.string();
        continue;
      }
        case 3: {
        if (tag !== 26) break;
        message.outputType = reader.string();
        continue;
      }
        case 4: {
          if (tag !== 34) break;
          message.options = MethodOptions.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
        if (tag !== 40) break;
        message.clientStreaming = reader.bool();
        continue;
      }
        case 6: {
        if (tag !== 48) break;
        message.serverStreaming = reader.bool();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): MethodDescriptorProto {
    return {
      $type: "google.protobuf.MethodDescriptorProto",
      name: isSet(object.name ?? object.name)
        ? String(object.name ?? object.name)
        : undefined,
      inputType: isSet(object.inputType ?? object.input_type)
        ? String(object.inputType ?? object.input_type)
        : undefined,
      outputType: isSet(object.outputType ?? object.output_type)
        ? String(object.outputType ?? object.output_type)
        : undefined,
      options: isSet(object.options ?? object.options)
        ? MethodOptions.fromJSON(object.options ?? object.options)
        : undefined,
      clientStreaming: isSet(object.clientStreaming ?? object.client_streaming)
        ? Boolean(object.clientStreaming ?? object.client_streaming)
        : undefined,
      serverStreaming: isSet(object.serverStreaming ?? object.server_streaming)
        ? Boolean(object.serverStreaming ?? object.server_streaming)
        : undefined,
    };
  },
  toJSON(message: MethodDescriptorProto, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name !== undefined) {
      obj[pick("name", "name")] = message.name;
    }
    if (message.inputType !== undefined) {
      obj[pick("inputType", "input_type")] = message.inputType;
    }
    if (message.outputType !== undefined) {
      obj[pick("outputType", "output_type")] = message.outputType;
    }
    if (message.options !== undefined) {
      obj[pick("options", "options")] = message.options
        ? MethodOptions.toJSON(message.options, use)
        : undefined;
    }
    if (message.clientStreaming !== undefined) {
      obj[pick("clientStreaming", "client_streaming")] = message.clientStreaming;
    }
    if (message.serverStreaming !== undefined) {
      obj[pick("serverStreaming", "server_streaming")] = message.serverStreaming;
    }
    return obj;
  },
  create<I extends DeepPartial<MethodDescriptorProto>>(base?: I): MethodDescriptorProto {
    return MethodDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<MethodDescriptorProto>>(object: I): MethodDescriptorProto {
    const message = createBaseMethodDescriptorProto();
    message.name = (object.name !== undefined && object.name !== null)
      ? object.name
      : undefined;
    message.inputType = (object.inputType !== undefined && object.inputType !== null)
      ? object.inputType
      : undefined;
    message.outputType = (object.outputType !== undefined && object.outputType !== null)
      ? object.outputType
      : undefined;
    message.options = (object.options !== undefined && object.options !== null)
      ? MethodOptions.fromPartial(object.options)
      : undefined;
    message.clientStreaming = (object.clientStreaming !== undefined && object.clientStreaming !== null)
      ? object.clientStreaming
      : undefined;
    message.serverStreaming = (object.serverStreaming !== undefined && object.serverStreaming !== null)
      ? object.serverStreaming
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(MethodDescriptorProto);

function createBaseMethodDescriptorProto(): MethodDescriptorProto {
  return {
    $type: "google.protobuf.MethodDescriptorProto",
    name: undefined,
    inputType: undefined,
    outputType: undefined,
    options: undefined,
    clientStreaming: undefined,
    serverStreaming: undefined,
  };
}

/**
 *  ===================================================================
 *  Options
 *
 *
 *  Each of the definitions above may have "options" attached.  These are
 *  just annotations which may cause code to be generated slightly differently
 *  or may contain hints for code that manipulates protocol messages.
 *
 *  Clients may define custom options as extensions of the *Options messages.
 *  These extensions may not yet be known at parsing time, so the parser cannot
 *  store the values in them.  Instead it stores them in a field in the *Options
 *  message called uninterpreted_option. This field must have the same name
 *  across all *Options messages. We then use this field to populate the
 *  extensions when we build a descriptor, at which point all protos have been
 *  parsed and so all extensions are known.
 *
 *  Extension numbers for custom options may be chosen as follows:
 *  * For options which will only be used within a single application or
 *    organization, or for experimental options, use field numbers 50000
 *    through 99999.  It is up to you to ensure that you do not use the
 *    same number for multiple options.
 *  * For options which will be published and used publicly by multiple
 *    independent entities, e-mail protobuf-global-extension-registry@google.com
 *    to reserve extension numbers. Simply provide your project name (e.g.
 *    Objective-C plugin) and your project website (if available) -- there's no
 *    need to explain how you intend to use them. Usually you only need one
 *    extension number. You can declare multiple options with only one extension
 *    number by putting them in a sub-message. See the Custom Options section of
 *    the docs for examples:
 *    https://developers.google.com/protocol-buffers/docs/proto#options
 *    If this turns out to be popular, a web service will be set up
 *    to automatically assign option numbers.
 *
 */
export interface FileOptions {
  $type: "google.protobuf.FileOptions";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Sets the Java package where classes generated from this .proto will be
   *  placed.  By default, the proto package is used, but this is often
   *  inappropriate because proto packages do not normally start with backwards
   *  domain names.
   *
   */
  javaPackage?: string | undefined;
  /**
   *  Controls the name of the wrapper Java class generated for the .proto file.
   *  That class will always contain the .proto file's getDescriptor() method as
   *  well as any top-level extensions defined in the .proto file.
   *  If java_multiple_files is disabled, then all the other classes from the
   *  .proto file will be nested inside the single wrapper outer class.
   *
   */
  javaOuterClassname?: string | undefined;
  /**
   *  If enabled, then the Java code generator will generate a separate .java
   *  file for each top-level message, enum, and service defined in the .proto
   *  file.  Thus, these types will *not* be nested inside the wrapper class
   *  named by java_outer_classname.  However, the wrapper class will still be
   *  generated to contain the file's getDescriptor() method as well as any
   *  top-level extensions defined in the file.
   *
   */
  javaMultipleFiles?: boolean | undefined;
  /**
   *  This option does nothing.
   *
   * @deprecated Deprecated.
   */
  javaGenerateEqualsAndHash?: boolean | undefined;
  /**
   *  A proto2 file can set this to true to opt in to UTF-8 checking for Java,
   *  which will throw an exception if invalid UTF-8 is parsed from the wire or
   *  assigned to a string field.
   *
   *  TODO: clarify exactly what kinds of field types this option
   *  applies to, and update these docs accordingly.
   *
   *  Proto3 files already perform these checks. Setting the option explicitly to
   *  false has no effect: it cannot be used to opt proto3 files out of UTF-8
   *  checks.
   *
   */
  javaStringCheckUtf8?: boolean | undefined;
  optimizeFor?: FileOptions_OptimizeMode | undefined;
  /**
   *  Sets the Go package where structs generated from this .proto will be
   *  placed. If omitted, the Go package will be derived from the following:
   *    - The basename of the package import path, if provided.
   *    - Otherwise, the package statement in the .proto file, if present.
   *    - Otherwise, the basename of the .proto file, without extension.
   *
   */
  goPackage?: string | undefined;
  /**
   *  Should generic services be generated in each language?  "Generic" services
   *  are not specific to any particular RPC system.  They are generated by the
   *  main code generators in each language (without additional plugins).
   *  Generic services were the only kind of service generation supported by
   *  early versions of google.protobuf.
   *
   *  Generic services are now considered deprecated in favor of using plugins
   *  that generate code specific to your particular RPC system.  Therefore,
   *  these default to false.  Old code which depends on generic services should
   *  explicitly set them to true.
   *
   */
  ccGenericServices?: boolean | undefined;
  javaGenericServices?: boolean | undefined;
  pyGenericServices?: boolean | undefined;
  /**
   *  Is this file deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for everything in the file, or it will be completely ignored; in the very
   *  least, this is a formalization for deprecating files.
   *
   */
  deprecated?: boolean | undefined;
  /**
   *  Enables the use of arenas for the proto messages in this file. This applies
   *  only to generated classes for C++.
   *
   */
  ccEnableArenas?: boolean | undefined;
  /**
   *  Sets the objective c class prefix which is prepended to all objective c
   *  generated classes from this .proto. There is no default.
   *
   */
  objcClassPrefix?: string | undefined;
  /**
   *  Namespace for generated classes; defaults to the package.
   *
   */
  csharpNamespace?: string | undefined;
  /**
   *  By default Swift generators will take the proto package and CamelCase it
   *  replacing '.' with underscore and use that to prefix the types/symbols
   *  defined. When this options is provided, they will use this value instead
   *  to prefix the types/symbols defined.
   *
   */
  swiftPrefix?: string | undefined;
  /**
   *  Sets the php class prefix which is prepended to all php generated classes
   *  from this .proto. Default is empty.
   *
   */
  phpClassPrefix?: string | undefined;
  /**
   *  Use this option to change the namespace of php generated classes. Default
   *  is empty. When this option is empty, the package name will be used for
   *  determining the namespace.
   *
   */
  phpNamespace?: string | undefined;
  /**
   *  Use this option to change the namespace of php generated metadata classes.
   *  Default is empty. When this option is empty, the proto file name will be
   *  used for determining the namespace.
   *
   */
  phpMetadataNamespace?: string | undefined;
  /**
   *  Use this option to change the package of ruby generated classes. Default
   *  is empty. When this option is not set, the package name will be used for
   *  determining the ruby package.
   *
   */
  rubyPackage?: string | undefined;
  /**
   *  Any features defined in the specific edition.
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  features?: FeatureSet | undefined;
  /**
   *  The parser stores options it doesn't recognize here.
   *  See the documentation for the "Options" section above.
   *
   */
  uninterpretedOption: UninterpretedOption[];
}

export const FileOptions: MessageFns<FileOptions, "google.protobuf.FileOptions"> = {
  $type: "google.protobuf.FileOptions" as const,

  encode(message: FileOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.javaGenerateEqualsAndHash !== undefined) {
      if (!__deprecatedWarned.has("google.protobuf.FileOptions.java_generate_equals_and_hash")) {
        __deprecatedWarned.add("google.protobuf.FileOptions.java_generate_equals_and_hash");
        deprecatedWarn("", "field", "google.protobuf.FileOptions.java_generate_equals_and_hash", undefined);
      }
    }
    if (message.javaPackage !== undefined) {
      writer.uint32(10).string(message.javaPackage);
    }
    if (message.javaOuterClassname !== undefined) {
      writer.uint32(66).string(message.javaOuterClassname);
    }
    if (message.javaMultipleFiles !== undefined) {
      writer.uint32(80).bool(message.javaMultipleFiles);
    }
    if (message.javaGenerateEqualsAndHash !== undefined) {
      writer.uint32(160).bool(message.javaGenerateEqualsAndHash);
    }
    if (message.javaStringCheckUtf8 !== undefined) {
      writer.uint32(216).bool(message.javaStringCheckUtf8);
    }
    if (message.optimizeFor !== undefined) {
      FileOptions_OptimizeMode.encodeField(writer, 9, message.optimizeFor);
    }
    if (message.goPackage !== undefined) {
      writer.uint32(90).string(message.goPackage);
    }
    if (message.ccGenericServices !== undefined) {
      writer.uint32(128).bool(message.ccGenericServices);
    }
    if (message.javaGenericServices !== undefined) {
      writer.uint32(136).bool(message.javaGenericServices);
    }
    if (message.pyGenericServices !== undefined) {
      writer.uint32(144).bool(message.pyGenericServices);
    }
    if (message.deprecated !== undefined) {
      writer.uint32(184).bool(message.deprecated);
    }
    if (message.ccEnableArenas !== undefined) {
      writer.uint32(248).bool(message.ccEnableArenas);
    }
    if (message.objcClassPrefix !== undefined) {
      writer.uint32(290).string(message.objcClassPrefix);
    }
    if (message.csharpNamespace !== undefined) {
      writer.uint32(298).string(message.csharpNamespace);
    }
    if (message.swiftPrefix !== undefined) {
      writer.uint32(314).string(message.swiftPrefix);
    }
    if (message.phpClassPrefix !== undefined) {
      writer.uint32(322).string(message.phpClassPrefix);
    }
    if (message.phpNamespace !== undefined) {
      writer.uint32(330).string(message.phpNamespace);
    }
    if (message.phpMetadataNamespace !== undefined) {
      writer.uint32(354).string(message.phpMetadataNamespace);
    }
    if (message.rubyPackage !== undefined) {
      writer.uint32(362).string(message.rubyPackage);
    }
    if (message.features !== undefined) {
      const w = writer.uint32(402).fork();
      FeatureSet.encode(message.features, w);
      w.join();
    }
    for (const v of (message.uninterpretedOption ?? [])) {
      const w = writer.uint32(7994).fork();
      UninterpretedOption.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    // Encode registered extensions for *Options message
    for (const ext of protoRegistry.listExtensions(message.$type)) {
      ext.encode?.(message, writer);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FileOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileOptions();
    let writer: BinaryWriter | undefined = undefined;
    const _exts = protoRegistry.listExtensions("google.protobuf.FileOptions");
    const _extMap: Record<number, any> = {};
    for (const _e of _exts) _extMap[_e.fieldNo] = _e;
    const _declared: Record<number, true> = { 1: true, 8: true, 10: true, 20: true, 27: true, 9: true, 11: true, 16: true, 17: true, 18: true, 23: true, 31: true, 36: true, 37: true, 39: true, 40: true, 41: true, 44: true, 45: true, 50: true, 999: true };
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.javaPackage = reader.string();
        continue;
      }
        case 8: {
        if (tag !== 66) break;
        message.javaOuterClassname = reader.string();
        continue;
      }
        case 10: {
        if (tag !== 80) break;
        message.javaMultipleFiles = reader.bool();
        continue;
      }
        case 20: {
        if (tag !== 160) break;
        message.javaGenerateEqualsAndHash = reader.bool();
        continue;
      }
        case 27: {
        if (tag !== 216) break;
        message.javaStringCheckUtf8 = reader.bool();
        continue;
      }
        case 9: {
          if (tag !== 72) break;
          message.optimizeFor = FileOptions_OptimizeMode.fromNumber(reader.int32());
          continue;
        }
        case 11: {
        if (tag !== 90) break;
        message.goPackage = reader.string();
        continue;
      }
        case 16: {
        if (tag !== 128) break;
        message.ccGenericServices = reader.bool();
        continue;
      }
        case 17: {
        if (tag !== 136) break;
        message.javaGenericServices = reader.bool();
        continue;
      }
        case 18: {
        if (tag !== 144) break;
        message.pyGenericServices = reader.bool();
        continue;
      }
        case 23: {
        if (tag !== 184) break;
        message.deprecated = reader.bool();
        continue;
      }
        case 31: {
        if (tag !== 248) break;
        message.ccEnableArenas = reader.bool();
        continue;
      }
        case 36: {
        if (tag !== 290) break;
        message.objcClassPrefix = reader.string();
        continue;
      }
        case 37: {
        if (tag !== 298) break;
        message.csharpNamespace = reader.string();
        continue;
      }
        case 39: {
        if (tag !== 314) break;
        message.swiftPrefix = reader.string();
        continue;
      }
        case 40: {
        if (tag !== 322) break;
        message.phpClassPrefix = reader.string();
        continue;
      }
        case 41: {
        if (tag !== 330) break;
        message.phpNamespace = reader.string();
        continue;
      }
        case 44: {
        if (tag !== 354) break;
        message.phpMetadataNamespace = reader.string();
        continue;
      }
        case 45: {
        if (tag !== 362) break;
        message.rubyPackage = reader.string();
        continue;
      }
        case 50: {
          if (tag !== 402) break;
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) break;
          message.uninterpretedOption.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      {
        const _fn = tag >>> 3;
        const _maybeExt = _extMap[_fn];
        if (_maybeExt && !_declared[_fn]) {
          if (_maybeExt.decode && _maybeExt.decode(message as any, reader, tag)) {
            continue;
          }
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FileOptions {
    const message: FileOptions = {
      $type: "google.protobuf.FileOptions",
      javaPackage: isSet(object.javaPackage ?? object.java_package)
        ? String(object.javaPackage ?? object.java_package)
        : undefined,
      javaOuterClassname: isSet(object.javaOuterClassname ?? object.java_outer_classname)
        ? String(object.javaOuterClassname ?? object.java_outer_classname)
        : undefined,
      javaMultipleFiles: isSet(object.javaMultipleFiles ?? object.java_multiple_files)
        ? Boolean(object.javaMultipleFiles ?? object.java_multiple_files)
        : undefined,
      javaGenerateEqualsAndHash: isSet(object.javaGenerateEqualsAndHash ?? object.java_generate_equals_and_hash)
        ? Boolean(object.javaGenerateEqualsAndHash ?? object.java_generate_equals_and_hash)
        : undefined,
      javaStringCheckUtf8: isSet(object.javaStringCheckUtf8 ?? object.java_string_check_utf8)
        ? Boolean(object.javaStringCheckUtf8 ?? object.java_string_check_utf8)
        : undefined,
      optimizeFor: isSet(object.optimizeFor ?? object.optimize_for)
        ? FileOptions_OptimizeMode.fromJSON(object.optimizeFor ?? object.optimize_for)
        : undefined,
      goPackage: isSet(object.goPackage ?? object.go_package)
        ? String(object.goPackage ?? object.go_package)
        : undefined,
      ccGenericServices: isSet(object.ccGenericServices ?? object.cc_generic_services)
        ? Boolean(object.ccGenericServices ?? object.cc_generic_services)
        : undefined,
      javaGenericServices: isSet(object.javaGenericServices ?? object.java_generic_services)
        ? Boolean(object.javaGenericServices ?? object.java_generic_services)
        : undefined,
      pyGenericServices: isSet(object.pyGenericServices ?? object.py_generic_services)
        ? Boolean(object.pyGenericServices ?? object.py_generic_services)
        : undefined,
      deprecated: isSet(object.deprecated ?? object.deprecated)
        ? Boolean(object.deprecated ?? object.deprecated)
        : undefined,
      ccEnableArenas: isSet(object.ccEnableArenas ?? object.cc_enable_arenas)
        ? Boolean(object.ccEnableArenas ?? object.cc_enable_arenas)
        : undefined,
      objcClassPrefix: isSet(object.objcClassPrefix ?? object.objc_class_prefix)
        ? String(object.objcClassPrefix ?? object.objc_class_prefix)
        : undefined,
      csharpNamespace: isSet(object.csharpNamespace ?? object.csharp_namespace)
        ? String(object.csharpNamespace ?? object.csharp_namespace)
        : undefined,
      swiftPrefix: isSet(object.swiftPrefix ?? object.swift_prefix)
        ? String(object.swiftPrefix ?? object.swift_prefix)
        : undefined,
      phpClassPrefix: isSet(object.phpClassPrefix ?? object.php_class_prefix)
        ? String(object.phpClassPrefix ?? object.php_class_prefix)
        : undefined,
      phpNamespace: isSet(object.phpNamespace ?? object.php_namespace)
        ? String(object.phpNamespace ?? object.php_namespace)
        : undefined,
      phpMetadataNamespace: isSet(object.phpMetadataNamespace ?? object.php_metadata_namespace)
        ? String(object.phpMetadataNamespace ?? object.php_metadata_namespace)
        : undefined,
      rubyPackage: isSet(object.rubyPackage ?? object.ruby_package)
        ? String(object.rubyPackage ?? object.ruby_package)
        : undefined,
      features: isSet(object.features ?? object.features)
        ? FeatureSet.fromJSON(object.features ?? object.features)
        : undefined,
      uninterpretedOption: globalThis.Array.isArray(object?.uninterpretedOption ?? object?.uninterpreted_option)
        ? (object.uninterpretedOption ?? object.uninterpreted_option).map((e: any) => UninterpretedOption.fromJSON(e))
        : [],
    };
    // Populate registered extensions (json)
    for (const _ext of protoRegistry.listExtensions("google.protobuf.FileOptions")) {
      _ext.fromJSON?.(message as any, object);
    }
    return message;
  },
  toJSON(message: FileOptions, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.javaPackage !== undefined) {
      obj[pick("javaPackage", "java_package")] = message.javaPackage;
    }
    if (message.javaOuterClassname !== undefined) {
      obj[pick("javaOuterClassname", "java_outer_classname")] = message.javaOuterClassname;
    }
    if (message.javaMultipleFiles !== undefined) {
      obj[pick("javaMultipleFiles", "java_multiple_files")] = message.javaMultipleFiles;
    }
    if (message.javaGenerateEqualsAndHash !== undefined) {
      obj[pick("javaGenerateEqualsAndHash", "java_generate_equals_and_hash")] = message.javaGenerateEqualsAndHash;
    }
    if (message.javaStringCheckUtf8 !== undefined) {
      obj[pick("javaStringCheckUtf8", "java_string_check_utf8")] = message.javaStringCheckUtf8;
    }
    if (message.optimizeFor !== undefined) {
      obj[pick("optimizeFor", "optimize_for")] = FileOptions_OptimizeMode.toJSON(message.optimizeFor);
    }
    if (message.goPackage !== undefined) {
      obj[pick("goPackage", "go_package")] = message.goPackage;
    }
    if (message.ccGenericServices !== undefined) {
      obj[pick("ccGenericServices", "cc_generic_services")] = message.ccGenericServices;
    }
    if (message.javaGenericServices !== undefined) {
      obj[pick("javaGenericServices", "java_generic_services")] = message.javaGenericServices;
    }
    if (message.pyGenericServices !== undefined) {
      obj[pick("pyGenericServices", "py_generic_services")] = message.pyGenericServices;
    }
    if (message.deprecated !== undefined) {
      obj[pick("deprecated", "deprecated")] = message.deprecated;
    }
    if (message.ccEnableArenas !== undefined) {
      obj[pick("ccEnableArenas", "cc_enable_arenas")] = message.ccEnableArenas;
    }
    if (message.objcClassPrefix !== undefined) {
      obj[pick("objcClassPrefix", "objc_class_prefix")] = message.objcClassPrefix;
    }
    if (message.csharpNamespace !== undefined) {
      obj[pick("csharpNamespace", "csharp_namespace")] = message.csharpNamespace;
    }
    if (message.swiftPrefix !== undefined) {
      obj[pick("swiftPrefix", "swift_prefix")] = message.swiftPrefix;
    }
    if (message.phpClassPrefix !== undefined) {
      obj[pick("phpClassPrefix", "php_class_prefix")] = message.phpClassPrefix;
    }
    if (message.phpNamespace !== undefined) {
      obj[pick("phpNamespace", "php_namespace")] = message.phpNamespace;
    }
    if (message.phpMetadataNamespace !== undefined) {
      obj[pick("phpMetadataNamespace", "php_metadata_namespace")] = message.phpMetadataNamespace;
    }
    if (message.rubyPackage !== undefined) {
      obj[pick("rubyPackage", "ruby_package")] = message.rubyPackage;
    }
    if (message.features !== undefined) {
      obj[pick("features", "features")] = message.features
        ? FeatureSet.toJSON(message.features, use)
        : undefined;
    }
    if (message.uninterpretedOption?.length) {
      obj[pick("uninterpretedOption", "uninterpreted_option")] = message.uninterpretedOption.map((e) => e ? UninterpretedOption.toJSON(e, use) : undefined);
    }
    // Serialize registered extensions
    for (const _ext of protoRegistry.listExtensions(message.$type)) {
      _ext.toJSON?.(message as any, obj, use);
    }
    return obj;
  },
  create<I extends DeepPartial<FileOptions>>(base?: I): FileOptions {
    return FileOptions.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FileOptions>>(object: I): FileOptions {
    const message = createBaseFileOptions();
    message.javaPackage = (object.javaPackage !== undefined && object.javaPackage !== null)
      ? object.javaPackage
      : undefined;
    message.javaOuterClassname = (object.javaOuterClassname !== undefined && object.javaOuterClassname !== null)
      ? object.javaOuterClassname
      : undefined;
    message.javaMultipleFiles = (object.javaMultipleFiles !== undefined && object.javaMultipleFiles !== null)
      ? object.javaMultipleFiles
      : undefined;
    message.javaGenerateEqualsAndHash = (object.javaGenerateEqualsAndHash !== undefined && object.javaGenerateEqualsAndHash !== null)
      ? object.javaGenerateEqualsAndHash
      : undefined;
    message.javaStringCheckUtf8 = (object.javaStringCheckUtf8 !== undefined && object.javaStringCheckUtf8 !== null)
      ? object.javaStringCheckUtf8
      : undefined;
    message.optimizeFor = (object.optimizeFor !== undefined && object.optimizeFor !== null)
      ? FileOptions_OptimizeMode.fromJSON(object.optimizeFor.name)
      : undefined;
    message.goPackage = (object.goPackage !== undefined && object.goPackage !== null)
      ? object.goPackage
      : undefined;
    message.ccGenericServices = (object.ccGenericServices !== undefined && object.ccGenericServices !== null)
      ? object.ccGenericServices
      : undefined;
    message.javaGenericServices = (object.javaGenericServices !== undefined && object.javaGenericServices !== null)
      ? object.javaGenericServices
      : undefined;
    message.pyGenericServices = (object.pyGenericServices !== undefined && object.pyGenericServices !== null)
      ? object.pyGenericServices
      : undefined;
    message.deprecated = (object.deprecated !== undefined && object.deprecated !== null)
      ? object.deprecated
      : undefined;
    message.ccEnableArenas = (object.ccEnableArenas !== undefined && object.ccEnableArenas !== null)
      ? object.ccEnableArenas
      : undefined;
    message.objcClassPrefix = (object.objcClassPrefix !== undefined && object.objcClassPrefix !== null)
      ? object.objcClassPrefix
      : undefined;
    message.csharpNamespace = (object.csharpNamespace !== undefined && object.csharpNamespace !== null)
      ? object.csharpNamespace
      : undefined;
    message.swiftPrefix = (object.swiftPrefix !== undefined && object.swiftPrefix !== null)
      ? object.swiftPrefix
      : undefined;
    message.phpClassPrefix = (object.phpClassPrefix !== undefined && object.phpClassPrefix !== null)
      ? object.phpClassPrefix
      : undefined;
    message.phpNamespace = (object.phpNamespace !== undefined && object.phpNamespace !== null)
      ? object.phpNamespace
      : undefined;
    message.phpMetadataNamespace = (object.phpMetadataNamespace !== undefined && object.phpMetadataNamespace !== null)
      ? object.phpMetadataNamespace
      : undefined;
    message.rubyPackage = (object.rubyPackage !== undefined && object.rubyPackage !== null)
      ? object.rubyPackage
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? FeatureSet.fromPartial(object.features)
      : undefined;
    message.uninterpretedOption = object.uninterpretedOption?.map((e) => UninterpretedOption.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(FileOptions);

function createBaseFileOptions(): FileOptions {
  return {
    $type: "google.protobuf.FileOptions",
    javaPackage: undefined,
    javaOuterClassname: undefined,
    javaMultipleFiles: undefined,
    javaGenerateEqualsAndHash: undefined,
    javaStringCheckUtf8: undefined,
    optimizeFor: undefined,
    goPackage: undefined,
    ccGenericServices: undefined,
    javaGenericServices: undefined,
    pyGenericServices: undefined,
    deprecated: undefined,
    ccEnableArenas: undefined,
    objcClassPrefix: undefined,
    csharpNamespace: undefined,
    swiftPrefix: undefined,
    phpClassPrefix: undefined,
    phpNamespace: undefined,
    phpMetadataNamespace: undefined,
    rubyPackage: undefined,
    features: undefined,
    uninterpretedOption: [],
  };
}

export interface MessageOptions {
  $type: "google.protobuf.MessageOptions";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Set true to use the old proto1 MessageSet wire format for extensions.
   *  This is provided for backwards-compatibility with the MessageSet wire
   *  format.  You should not use this for any other reason:  It's less
   *  efficient, has fewer features, and is more complicated.
   *
   *  The message must be defined exactly as follows:
   *    message Foo {
   *      option message_set_wire_format = true;
   *      extensions 4 to max;
   *    }
   *  Note that the message cannot have any defined fields; MessageSets only
   *  have extensions.
   *
   *  All extensions of your type must be singular messages; e.g. they cannot
   *  be int32s, enums, or repeated messages.
   *
   *  Because this is an option, the above two restrictions are not enforced by
   *  the protocol compiler.
   *
   */
  messageSetWireFormat?: boolean | undefined;
  /**
   *  Disables the generation of the standard "descriptor()" accessor, which can
   *  conflict with a field of the same name.  This is meant to make migration
   *  from proto1 easier; new code should avoid fields named "descriptor".
   *
   */
  noStandardDescriptorAccessor?: boolean | undefined;
  /**
   *  Is this message deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for the message, or it will be completely ignored; in the very least,
   *  this is a formalization for deprecating messages.
   *
   */
  deprecated?: boolean | undefined;
  /**
   *  Whether the message is an automatically generated map entry type for the
   *  maps field.
   *
   *  For maps fields:
   *      map<KeyType, ValueType> map_field = 1;
   *  The parsed descriptor looks like:
   *      message MapFieldEntry {
   *          option map_entry = true;
   *          optional KeyType key = 1;
   *          optional ValueType value = 2;
   *      }
   *      repeated MapFieldEntry map_field = 1;
   *
   *  Implementations may choose not to generate the map_entry=true message, but
   *  use a native map in the target language to hold the keys and values.
   *  The reflection APIs in such implementations still need to work as
   *  if the field is a repeated message field.
   *
   *  NOTE: Do not set the option in .proto files. Always use the maps syntax
   *  instead. The option should only be implicitly set by the proto compiler
   *  parser.
   *
   */
  mapEntry?: boolean | undefined;
  /**
   *  Enable the legacy handling of JSON field name conflicts.  This lowercases
   *  and strips underscored from the fields before comparison in proto3 only.
   *  The new behavior takes `json_name` into account and applies to proto2 as
   *  well.
   *
   *  This should only be used as a temporary measure against broken builds due
   *  to the change in behavior for JSON field name conflicts.
   *
   *  TODO This is legacy behavior we plan to remove once downstream
   *  teams have had time to migrate.
   *
   * @deprecated Deprecated.
   */
  deprecatedLegacyJsonFieldConflicts?: boolean | undefined;
  /**
   *  Any features defined in the specific edition.
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  features?: FeatureSet | undefined;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   *
   */
  uninterpretedOption: UninterpretedOption[];
}

export const MessageOptions: MessageFns<MessageOptions, "google.protobuf.MessageOptions"> = {
  $type: "google.protobuf.MessageOptions" as const,

  encode(message: MessageOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deprecatedLegacyJsonFieldConflicts !== undefined) {
      if (!__deprecatedWarned.has("google.protobuf.MessageOptions.deprecated_legacy_json_field_conflicts")) {
        __deprecatedWarned.add("google.protobuf.MessageOptions.deprecated_legacy_json_field_conflicts");
        deprecatedWarn("", "field", "google.protobuf.MessageOptions.deprecated_legacy_json_field_conflicts", undefined);
      }
    }
    if (message.messageSetWireFormat !== undefined) {
      writer.uint32(8).bool(message.messageSetWireFormat);
    }
    if (message.noStandardDescriptorAccessor !== undefined) {
      writer.uint32(16).bool(message.noStandardDescriptorAccessor);
    }
    if (message.deprecated !== undefined) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.mapEntry !== undefined) {
      writer.uint32(56).bool(message.mapEntry);
    }
    if (message.deprecatedLegacyJsonFieldConflicts !== undefined) {
      writer.uint32(88).bool(message.deprecatedLegacyJsonFieldConflicts);
    }
    if (message.features !== undefined) {
      const w = writer.uint32(98).fork();
      FeatureSet.encode(message.features, w);
      w.join();
    }
    for (const v of (message.uninterpretedOption ?? [])) {
      const w = writer.uint32(7994).fork();
      UninterpretedOption.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    // Encode registered extensions for *Options message
    for (const ext of protoRegistry.listExtensions(message.$type)) {
      ext.encode?.(message, writer);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): MessageOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageOptions();
    let writer: BinaryWriter | undefined = undefined;
    const _exts = protoRegistry.listExtensions("google.protobuf.MessageOptions");
    const _extMap: Record<number, any> = {};
    for (const _e of _exts) _extMap[_e.fieldNo] = _e;
    const _declared: Record<number, true> = { 1: true, 2: true, 3: true, 7: true, 11: true, 12: true, 999: true };
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 8) break;
        message.messageSetWireFormat = reader.bool();
        continue;
      }
        case 2: {
        if (tag !== 16) break;
        message.noStandardDescriptorAccessor = reader.bool();
        continue;
      }
        case 3: {
        if (tag !== 24) break;
        message.deprecated = reader.bool();
        continue;
      }
        case 7: {
        if (tag !== 56) break;
        message.mapEntry = reader.bool();
        continue;
      }
        case 11: {
        if (tag !== 88) break;
        message.deprecatedLegacyJsonFieldConflicts = reader.bool();
        continue;
      }
        case 12: {
          if (tag !== 98) break;
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) break;
          message.uninterpretedOption.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      {
        const _fn = tag >>> 3;
        const _maybeExt = _extMap[_fn];
        if (_maybeExt && !_declared[_fn]) {
          if (_maybeExt.decode && _maybeExt.decode(message as any, reader, tag)) {
            continue;
          }
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): MessageOptions {
    const message: MessageOptions = {
      $type: "google.protobuf.MessageOptions",
      messageSetWireFormat: isSet(object.messageSetWireFormat ?? object.message_set_wire_format)
        ? Boolean(object.messageSetWireFormat ?? object.message_set_wire_format)
        : undefined,
      noStandardDescriptorAccessor: isSet(object.noStandardDescriptorAccessor ?? object.no_standard_descriptor_accessor)
        ? Boolean(object.noStandardDescriptorAccessor ?? object.no_standard_descriptor_accessor)
        : undefined,
      deprecated: isSet(object.deprecated ?? object.deprecated)
        ? Boolean(object.deprecated ?? object.deprecated)
        : undefined,
      mapEntry: isSet(object.mapEntry ?? object.map_entry)
        ? Boolean(object.mapEntry ?? object.map_entry)
        : undefined,
      deprecatedLegacyJsonFieldConflicts: isSet(object.deprecatedLegacyJsonFieldConflicts ?? object.deprecated_legacy_json_field_conflicts)
        ? Boolean(object.deprecatedLegacyJsonFieldConflicts ?? object.deprecated_legacy_json_field_conflicts)
        : undefined,
      features: isSet(object.features ?? object.features)
        ? FeatureSet.fromJSON(object.features ?? object.features)
        : undefined,
      uninterpretedOption: globalThis.Array.isArray(object?.uninterpretedOption ?? object?.uninterpreted_option)
        ? (object.uninterpretedOption ?? object.uninterpreted_option).map((e: any) => UninterpretedOption.fromJSON(e))
        : [],
    };
    // Populate registered extensions (json)
    for (const _ext of protoRegistry.listExtensions("google.protobuf.MessageOptions")) {
      _ext.fromJSON?.(message as any, object);
    }
    return message;
  },
  toJSON(message: MessageOptions, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.messageSetWireFormat !== undefined) {
      obj[pick("messageSetWireFormat", "message_set_wire_format")] = message.messageSetWireFormat;
    }
    if (message.noStandardDescriptorAccessor !== undefined) {
      obj[pick("noStandardDescriptorAccessor", "no_standard_descriptor_accessor")] = message.noStandardDescriptorAccessor;
    }
    if (message.deprecated !== undefined) {
      obj[pick("deprecated", "deprecated")] = message.deprecated;
    }
    if (message.mapEntry !== undefined) {
      obj[pick("mapEntry", "map_entry")] = message.mapEntry;
    }
    if (message.deprecatedLegacyJsonFieldConflicts !== undefined) {
      obj[pick("deprecatedLegacyJsonFieldConflicts", "deprecated_legacy_json_field_conflicts")] = message.deprecatedLegacyJsonFieldConflicts;
    }
    if (message.features !== undefined) {
      obj[pick("features", "features")] = message.features
        ? FeatureSet.toJSON(message.features, use)
        : undefined;
    }
    if (message.uninterpretedOption?.length) {
      obj[pick("uninterpretedOption", "uninterpreted_option")] = message.uninterpretedOption.map((e) => e ? UninterpretedOption.toJSON(e, use) : undefined);
    }
    // Serialize registered extensions
    for (const _ext of protoRegistry.listExtensions(message.$type)) {
      _ext.toJSON?.(message as any, obj, use);
    }
    return obj;
  },
  create<I extends DeepPartial<MessageOptions>>(base?: I): MessageOptions {
    return MessageOptions.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<MessageOptions>>(object: I): MessageOptions {
    const message = createBaseMessageOptions();
    message.messageSetWireFormat = (object.messageSetWireFormat !== undefined && object.messageSetWireFormat !== null)
      ? object.messageSetWireFormat
      : undefined;
    message.noStandardDescriptorAccessor = (object.noStandardDescriptorAccessor !== undefined && object.noStandardDescriptorAccessor !== null)
      ? object.noStandardDescriptorAccessor
      : undefined;
    message.deprecated = (object.deprecated !== undefined && object.deprecated !== null)
      ? object.deprecated
      : undefined;
    message.mapEntry = (object.mapEntry !== undefined && object.mapEntry !== null)
      ? object.mapEntry
      : undefined;
    message.deprecatedLegacyJsonFieldConflicts = (object.deprecatedLegacyJsonFieldConflicts !== undefined && object.deprecatedLegacyJsonFieldConflicts !== null)
      ? object.deprecatedLegacyJsonFieldConflicts
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? FeatureSet.fromPartial(object.features)
      : undefined;
    message.uninterpretedOption = object.uninterpretedOption?.map((e) => UninterpretedOption.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(MessageOptions);

function createBaseMessageOptions(): MessageOptions {
  return {
    $type: "google.protobuf.MessageOptions",
    messageSetWireFormat: undefined,
    noStandardDescriptorAccessor: undefined,
    deprecated: undefined,
    mapEntry: undefined,
    deprecatedLegacyJsonFieldConflicts: undefined,
    features: undefined,
    uninterpretedOption: [],
  };
}

export interface FieldOptions {
  $type: "google.protobuf.FieldOptions";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  NOTE: ctype is deprecated. Use `features.(pb.cpp).string_type` instead.
   *  The ctype option instructs the C++ code generator to use a different
   *  representation of the field than it normally would.  See the specific
   *  options below.  This option is only implemented to support use of
   *  [ctype=CORD] and [ctype=STRING] (the default) on non-repeated fields of
   *  type "bytes" in the open source release.
   *  TODO: make ctype actually deprecated.
   *
   */
  ctype?: FieldOptions_CType | undefined;
  /**
   *  The packed option can be enabled for repeated primitive fields to enable
   *  a more efficient representation on the wire. Rather than repeatedly
   *  writing the tag and type for each element, the entire array is encoded as
   *  a single length-delimited blob. In proto3, only explicit setting it to
   *  false will avoid using packed encoding.  This option is prohibited in
   *  Editions, but the `repeated_field_encoding` feature can be used to control
   *  the behavior.
   *
   */
  packed?: boolean | undefined;
  /**
   *  The jstype option determines the JavaScript type used for values of the
   *  field.  The option is permitted only for 64 bit integral and fixed types
   *  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
   *  is represented as JavaScript string, which avoids loss of precision that
   *  can happen when a large value is converted to a floating point JavaScript.
   *  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
   *  use the JavaScript "number" type.  The behavior of the default option
   *  JS_NORMAL is implementation dependent.
   *
   *  This option is an enum to permit additional types to be added, e.g.
   *  goog.math.Integer.
   *
   */
  jstype?: FieldOptions_JSType | undefined;
  /**
   *  Should this field be parsed lazily?  Lazy applies only to message-type
   *  fields.  It means that when the outer message is initially parsed, the
   *  inner message's contents will not be parsed but instead stored in encoded
   *  form.  The inner message will actually be parsed when it is first accessed.
   *
   *  This is only a hint.  Implementations are free to choose whether to use
   *  eager or lazy parsing regardless of the value of this option.  However,
   *  setting this option true suggests that the protocol author believes that
   *  using lazy parsing on this field is worth the additional bookkeeping
   *  overhead typically needed to implement it.
   *
   *  This option does not affect the public interface of any generated code;
   *  all method signatures remain the same.  Furthermore, thread-safety of the
   *  interface is not affected by this option; const methods remain safe to
   *  call from multiple threads concurrently, while non-const methods continue
   *  to require exclusive access.
   *
   *  Note that lazy message fields are still eagerly verified to check
   *  ill-formed wireformat or missing required fields. Calling IsInitialized()
   *  on the outer message would fail if the inner message has missing required
   *  fields. Failed verification would result in parsing failure (except when
   *  uninitialized messages are acceptable).
   *
   */
  lazy?: boolean | undefined;
  /**
   *  unverified_lazy does no correctness checks on the byte stream. This should
   *  only be used where lazy with verification is prohibitive for performance
   *  reasons.
   *
   */
  unverifiedLazy?: boolean | undefined;
  /**
   *  Is this field deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for accessors, or it will be completely ignored; in the very least, this
   *  is a formalization for deprecating fields.
   *
   */
  deprecated?: boolean | undefined;
  /**
   *  For Google-internal migration only. Do not use.
   *
   */
  weak?: boolean | undefined;
  /**
   *  Indicate that the field value should not be printed out when using debug
   *  formats, e.g. when the field contains sensitive credentials.
   *
   */
  debugRedact?: boolean | undefined;
  retention?: FieldOptions_OptionRetention | undefined;
  targets: FieldOptions_OptionTargetType[];
  editionDefaults: FieldOptions_EditionDefault[];
  /**
   *  Any features defined in the specific edition.
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  features?: FeatureSet | undefined;
  featureSupport?: FieldOptions_FeatureSupport | undefined;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   *
   */
  uninterpretedOption: UninterpretedOption[];
}

export const FieldOptions: MessageFns<FieldOptions, "google.protobuf.FieldOptions"> = {
  $type: "google.protobuf.FieldOptions" as const,

  encode(message: FieldOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ctype !== undefined) {
      FieldOptions_CType.encodeField(writer, 1, message.ctype);
    }
    if (message.packed !== undefined) {
      writer.uint32(16).bool(message.packed);
    }
    if (message.jstype !== undefined) {
      FieldOptions_JSType.encodeField(writer, 6, message.jstype);
    }
    if (message.lazy !== undefined) {
      writer.uint32(40).bool(message.lazy);
    }
    if (message.unverifiedLazy !== undefined) {
      writer.uint32(120).bool(message.unverifiedLazy);
    }
    if (message.deprecated !== undefined) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.weak !== undefined) {
      writer.uint32(80).bool(message.weak);
    }
    if (message.debugRedact !== undefined) {
      writer.uint32(128).bool(message.debugRedact);
    }
    if (message.retention !== undefined) {
      FieldOptions_OptionRetention.encodeField(writer, 17, message.retention);
    }
    if (message.targets?.length) {
      const w = writer.uint32(154).fork();
      for (const v of message.targets) w.int32(v?.code | 0);
      w.join();
    }
    for (const v of (message.editionDefaults ?? [])) {
      const w = writer.uint32(162).fork();
      FieldOptions_EditionDefault.encode(v, w);
      w.join();
    }
    if (message.features !== undefined) {
      const w = writer.uint32(170).fork();
      FeatureSet.encode(message.features, w);
      w.join();
    }
    if (message.featureSupport !== undefined) {
      const w = writer.uint32(178).fork();
      FieldOptions_FeatureSupport.encode(message.featureSupport, w);
      w.join();
    }
    for (const v of (message.uninterpretedOption ?? [])) {
      const w = writer.uint32(7994).fork();
      UninterpretedOption.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    // Encode registered extensions for *Options message
    for (const ext of protoRegistry.listExtensions(message.$type)) {
      ext.encode?.(message, writer);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FieldOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldOptions();
    let writer: BinaryWriter | undefined = undefined;
    const _exts = protoRegistry.listExtensions("google.protobuf.FieldOptions");
    const _extMap: Record<number, any> = {};
    for (const _e of _exts) _extMap[_e.fieldNo] = _e;
    const _declared: Record<number, true> = { 1: true, 2: true, 6: true, 5: true, 15: true, 3: true, 10: true, 16: true, 17: true, 19: true, 20: true, 21: true, 22: true, 999: true };
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) break;
          message.ctype = FieldOptions_CType.fromNumber(reader.int32());
          continue;
        }
        case 2: {
        if (tag !== 16) break;
        message.packed = reader.bool();
        continue;
      }
        case 6: {
          if (tag !== 48) break;
          message.jstype = FieldOptions_JSType.fromNumber(reader.int32());
          continue;
        }
        case 5: {
        if (tag !== 40) break;
        message.lazy = reader.bool();
        continue;
      }
        case 15: {
        if (tag !== 120) break;
        message.unverifiedLazy = reader.bool();
        continue;
      }
        case 3: {
        if (tag !== 24) break;
        message.deprecated = reader.bool();
        continue;
      }
        case 10: {
        if (tag !== 80) break;
        message.weak = reader.bool();
        continue;
      }
        case 16: {
        if (tag !== 128) break;
        message.debugRedact = reader.bool();
        continue;
      }
        case 17: {
          if (tag !== 136) break;
          message.retention = FieldOptions_OptionRetention.fromNumber(reader.int32());
          continue;
        }
        case 19: {
          // packed or unpacked repeated enum
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.targets.push(FieldOptions_OptionTargetType.fromNumber(reader.int32()));
            }
            continue;
          } else if ((tag & 7) === 0) {
            message.targets.push(FieldOptions_OptionTargetType.fromNumber(reader.int32()));
            continue;
          }
          break; // wrong wire type
        }
        case 20: {
          if (tag !== 162) break;
          message.editionDefaults.push(FieldOptions_EditionDefault.decode(reader, reader.uint32()));
          continue;
        }
        case 21: {
          if (tag !== 170) break;
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) break;
          message.featureSupport = FieldOptions_FeatureSupport.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) break;
          message.uninterpretedOption.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      {
        const _fn = tag >>> 3;
        const _maybeExt = _extMap[_fn];
        if (_maybeExt && !_declared[_fn]) {
          if (_maybeExt.decode && _maybeExt.decode(message as any, reader, tag)) {
            continue;
          }
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FieldOptions {
    const message: FieldOptions = {
      $type: "google.protobuf.FieldOptions",
      ctype: isSet(object.ctype ?? object.ctype)
        ? FieldOptions_CType.fromJSON(object.ctype ?? object.ctype)
        : undefined,
      packed: isSet(object.packed ?? object.packed)
        ? Boolean(object.packed ?? object.packed)
        : undefined,
      jstype: isSet(object.jstype ?? object.jstype)
        ? FieldOptions_JSType.fromJSON(object.jstype ?? object.jstype)
        : undefined,
      lazy: isSet(object.lazy ?? object.lazy)
        ? Boolean(object.lazy ?? object.lazy)
        : undefined,
      unverifiedLazy: isSet(object.unverifiedLazy ?? object.unverified_lazy)
        ? Boolean(object.unverifiedLazy ?? object.unverified_lazy)
        : undefined,
      deprecated: isSet(object.deprecated ?? object.deprecated)
        ? Boolean(object.deprecated ?? object.deprecated)
        : undefined,
      weak: isSet(object.weak ?? object.weak)
        ? Boolean(object.weak ?? object.weak)
        : undefined,
      debugRedact: isSet(object.debugRedact ?? object.debug_redact)
        ? Boolean(object.debugRedact ?? object.debug_redact)
        : undefined,
      retention: isSet(object.retention ?? object.retention)
        ? FieldOptions_OptionRetention.fromJSON(object.retention ?? object.retention)
        : undefined,
      targets: globalThis.Array.isArray(object?.targets ?? object?.targets)
        ? (object.targets ?? object.targets).map((e: any) => FieldOptions_OptionTargetType.fromJSON(e))
        : [],
      editionDefaults: globalThis.Array.isArray(object?.editionDefaults ?? object?.edition_defaults)
        ? (object.editionDefaults ?? object.edition_defaults).map((e: any) => FieldOptions_EditionDefault.fromJSON(e))
        : [],
      features: isSet(object.features ?? object.features)
        ? FeatureSet.fromJSON(object.features ?? object.features)
        : undefined,
      featureSupport: isSet(object.featureSupport ?? object.feature_support)
        ? FieldOptions_FeatureSupport.fromJSON(object.featureSupport ?? object.feature_support)
        : undefined,
      uninterpretedOption: globalThis.Array.isArray(object?.uninterpretedOption ?? object?.uninterpreted_option)
        ? (object.uninterpretedOption ?? object.uninterpreted_option).map((e: any) => UninterpretedOption.fromJSON(e))
        : [],
    };
    // Populate registered extensions (json)
    for (const _ext of protoRegistry.listExtensions("google.protobuf.FieldOptions")) {
      _ext.fromJSON?.(message as any, object);
    }
    return message;
  },
  toJSON(message: FieldOptions, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.ctype !== undefined) {
      obj[pick("ctype", "ctype")] = FieldOptions_CType.toJSON(message.ctype);
    }
    if (message.packed !== undefined) {
      obj[pick("packed", "packed")] = message.packed;
    }
    if (message.jstype !== undefined) {
      obj[pick("jstype", "jstype")] = FieldOptions_JSType.toJSON(message.jstype);
    }
    if (message.lazy !== undefined) {
      obj[pick("lazy", "lazy")] = message.lazy;
    }
    if (message.unverifiedLazy !== undefined) {
      obj[pick("unverifiedLazy", "unverified_lazy")] = message.unverifiedLazy;
    }
    if (message.deprecated !== undefined) {
      obj[pick("deprecated", "deprecated")] = message.deprecated;
    }
    if (message.weak !== undefined) {
      obj[pick("weak", "weak")] = message.weak;
    }
    if (message.debugRedact !== undefined) {
      obj[pick("debugRedact", "debug_redact")] = message.debugRedact;
    }
    if (message.retention !== undefined) {
      obj[pick("retention", "retention")] = FieldOptions_OptionRetention.toJSON(message.retention);
    }
    if (message.targets?.length) {
      obj[pick("targets", "targets")] = message.targets.map((e) => FieldOptions_OptionTargetType.toJSON(e));
    }
    if (message.editionDefaults?.length) {
      obj[pick("editionDefaults", "edition_defaults")] = message.editionDefaults.map((e) => e ? FieldOptions_EditionDefault.toJSON(e, use) : undefined);
    }
    if (message.features !== undefined) {
      obj[pick("features", "features")] = message.features
        ? FeatureSet.toJSON(message.features, use)
        : undefined;
    }
    if (message.featureSupport !== undefined) {
      obj[pick("featureSupport", "feature_support")] = message.featureSupport
        ? FieldOptions_FeatureSupport.toJSON(message.featureSupport, use)
        : undefined;
    }
    if (message.uninterpretedOption?.length) {
      obj[pick("uninterpretedOption", "uninterpreted_option")] = message.uninterpretedOption.map((e) => e ? UninterpretedOption.toJSON(e, use) : undefined);
    }
    // Serialize registered extensions
    for (const _ext of protoRegistry.listExtensions(message.$type)) {
      _ext.toJSON?.(message as any, obj, use);
    }
    return obj;
  },
  create<I extends DeepPartial<FieldOptions>>(base?: I): FieldOptions {
    return FieldOptions.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FieldOptions>>(object: I): FieldOptions {
    const message = createBaseFieldOptions();
    message.ctype = (object.ctype !== undefined && object.ctype !== null)
      ? FieldOptions_CType.fromJSON(object.ctype.name)
      : undefined;
    message.packed = (object.packed !== undefined && object.packed !== null)
      ? object.packed
      : undefined;
    message.jstype = (object.jstype !== undefined && object.jstype !== null)
      ? FieldOptions_JSType.fromJSON(object.jstype.name)
      : undefined;
    message.lazy = (object.lazy !== undefined && object.lazy !== null)
      ? object.lazy
      : undefined;
    message.unverifiedLazy = (object.unverifiedLazy !== undefined && object.unverifiedLazy !== null)
      ? object.unverifiedLazy
      : undefined;
    message.deprecated = (object.deprecated !== undefined && object.deprecated !== null)
      ? object.deprecated
      : undefined;
    message.weak = (object.weak !== undefined && object.weak !== null)
      ? object.weak
      : undefined;
    message.debugRedact = (object.debugRedact !== undefined && object.debugRedact !== null)
      ? object.debugRedact
      : undefined;
    message.retention = (object.retention !== undefined && object.retention !== null)
      ? FieldOptions_OptionRetention.fromJSON(object.retention.name)
      : undefined;
    message.targets = object.targets?.map((e) => FieldOptions_OptionTargetType.fromJSON(e.name)) || [];
    message.editionDefaults = object.editionDefaults?.map((e) => FieldOptions_EditionDefault.fromPartial(e)) || [];
    message.features = (object.features !== undefined && object.features !== null)
      ? FeatureSet.fromPartial(object.features)
      : undefined;
    message.featureSupport = (object.featureSupport !== undefined && object.featureSupport !== null)
      ? FieldOptions_FeatureSupport.fromPartial(object.featureSupport)
      : undefined;
    message.uninterpretedOption = object.uninterpretedOption?.map((e) => UninterpretedOption.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(FieldOptions);

function createBaseFieldOptions(): FieldOptions {
  return {
    $type: "google.protobuf.FieldOptions",
    ctype: undefined,
    packed: undefined,
    jstype: undefined,
    lazy: undefined,
    unverifiedLazy: undefined,
    deprecated: undefined,
    weak: undefined,
    debugRedact: undefined,
    retention: undefined,
    targets: [],
    editionDefaults: [],
    features: undefined,
    featureSupport: undefined,
    uninterpretedOption: [],
  };
}

export interface FieldOptions_EditionDefault {
  $type: "google.protobuf.FieldOptions.EditionDefault";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  edition?: Edition | undefined;
  /**
   *  Textproto value.
   *
   */
  value?: string | undefined;
}

export const FieldOptions_EditionDefault: MessageFns<FieldOptions_EditionDefault, "google.protobuf.FieldOptions.EditionDefault"> = {
  $type: "google.protobuf.FieldOptions.EditionDefault" as const,

  encode(message: FieldOptions_EditionDefault, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.edition !== undefined) {
      Edition.encodeField(writer, 3, message.edition);
    }
    if (message.value !== undefined) {
      writer.uint32(18).string(message.value);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FieldOptions_EditionDefault {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldOptions_EditionDefault();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 24) break;
          message.edition = Edition.fromNumber(reader.int32());
          continue;
        }
        case 2: {
        if (tag !== 18) break;
        message.value = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FieldOptions_EditionDefault {
    return {
      $type: "google.protobuf.FieldOptions.EditionDefault",
      edition: isSet(object.edition ?? object.edition)
        ? Edition.fromJSON(object.edition ?? object.edition)
        : undefined,
      value: isSet(object.value ?? object.value)
        ? String(object.value ?? object.value)
        : undefined,
    };
  },
  toJSON(message: FieldOptions_EditionDefault, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.edition !== undefined) {
      obj[pick("edition", "edition")] = Edition.toJSON(message.edition);
    }
    if (message.value !== undefined) {
      obj[pick("value", "value")] = message.value;
    }
    return obj;
  },
  create<I extends DeepPartial<FieldOptions_EditionDefault>>(base?: I): FieldOptions_EditionDefault {
    return FieldOptions_EditionDefault.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FieldOptions_EditionDefault>>(object: I): FieldOptions_EditionDefault {
    const message = createBaseFieldOptions_EditionDefault();
    message.edition = (object.edition !== undefined && object.edition !== null)
      ? Edition.fromJSON(object.edition.name)
      : undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? object.value
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(FieldOptions_EditionDefault);

function createBaseFieldOptions_EditionDefault(): FieldOptions_EditionDefault {
  return {
    $type: "google.protobuf.FieldOptions.EditionDefault",
    edition: undefined,
    value: undefined,
  };
}

/**
 *  Information about the support window of a feature.
 *
 */
export interface FieldOptions_FeatureSupport {
  $type: "google.protobuf.FieldOptions.FeatureSupport";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  The edition that this feature was first available in.  In editions
   *  earlier than this one, the default assigned to EDITION_LEGACY will be
   *  used, and proto files will not be able to override it.
   *
   */
  editionIntroduced?: Edition | undefined;
  /**
   *  The edition this feature becomes deprecated in.  Using this after this
   *  edition may trigger warnings.
   *
   */
  editionDeprecated?: Edition | undefined;
  /**
   *  The deprecation warning text if this feature is used after the edition it
   *  was marked deprecated in.
   *
   */
  deprecationWarning?: string | undefined;
  /**
   *  The edition this feature is no longer available in.  In editions after
   *  this one, the last default assigned will be used, and proto files will
   *  not be able to override it.
   *
   */
  editionRemoved?: Edition | undefined;
}

export const FieldOptions_FeatureSupport: MessageFns<FieldOptions_FeatureSupport, "google.protobuf.FieldOptions.FeatureSupport"> = {
  $type: "google.protobuf.FieldOptions.FeatureSupport" as const,

  encode(message: FieldOptions_FeatureSupport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.editionIntroduced !== undefined) {
      Edition.encodeField(writer, 1, message.editionIntroduced);
    }
    if (message.editionDeprecated !== undefined) {
      Edition.encodeField(writer, 2, message.editionDeprecated);
    }
    if (message.deprecationWarning !== undefined) {
      writer.uint32(26).string(message.deprecationWarning);
    }
    if (message.editionRemoved !== undefined) {
      Edition.encodeField(writer, 4, message.editionRemoved);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FieldOptions_FeatureSupport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldOptions_FeatureSupport();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) break;
          message.editionIntroduced = Edition.fromNumber(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) break;
          message.editionDeprecated = Edition.fromNumber(reader.int32());
          continue;
        }
        case 3: {
        if (tag !== 26) break;
        message.deprecationWarning = reader.string();
        continue;
      }
        case 4: {
          if (tag !== 32) break;
          message.editionRemoved = Edition.fromNumber(reader.int32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FieldOptions_FeatureSupport {
    return {
      $type: "google.protobuf.FieldOptions.FeatureSupport",
      editionIntroduced: isSet(object.editionIntroduced ?? object.edition_introduced)
        ? Edition.fromJSON(object.editionIntroduced ?? object.edition_introduced)
        : undefined,
      editionDeprecated: isSet(object.editionDeprecated ?? object.edition_deprecated)
        ? Edition.fromJSON(object.editionDeprecated ?? object.edition_deprecated)
        : undefined,
      deprecationWarning: isSet(object.deprecationWarning ?? object.deprecation_warning)
        ? String(object.deprecationWarning ?? object.deprecation_warning)
        : undefined,
      editionRemoved: isSet(object.editionRemoved ?? object.edition_removed)
        ? Edition.fromJSON(object.editionRemoved ?? object.edition_removed)
        : undefined,
    };
  },
  toJSON(message: FieldOptions_FeatureSupport, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.editionIntroduced !== undefined) {
      obj[pick("editionIntroduced", "edition_introduced")] = Edition.toJSON(message.editionIntroduced);
    }
    if (message.editionDeprecated !== undefined) {
      obj[pick("editionDeprecated", "edition_deprecated")] = Edition.toJSON(message.editionDeprecated);
    }
    if (message.deprecationWarning !== undefined) {
      obj[pick("deprecationWarning", "deprecation_warning")] = message.deprecationWarning;
    }
    if (message.editionRemoved !== undefined) {
      obj[pick("editionRemoved", "edition_removed")] = Edition.toJSON(message.editionRemoved);
    }
    return obj;
  },
  create<I extends DeepPartial<FieldOptions_FeatureSupport>>(base?: I): FieldOptions_FeatureSupport {
    return FieldOptions_FeatureSupport.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FieldOptions_FeatureSupport>>(object: I): FieldOptions_FeatureSupport {
    const message = createBaseFieldOptions_FeatureSupport();
    message.editionIntroduced = (object.editionIntroduced !== undefined && object.editionIntroduced !== null)
      ? Edition.fromJSON(object.editionIntroduced.name)
      : undefined;
    message.editionDeprecated = (object.editionDeprecated !== undefined && object.editionDeprecated !== null)
      ? Edition.fromJSON(object.editionDeprecated.name)
      : undefined;
    message.deprecationWarning = (object.deprecationWarning !== undefined && object.deprecationWarning !== null)
      ? object.deprecationWarning
      : undefined;
    message.editionRemoved = (object.editionRemoved !== undefined && object.editionRemoved !== null)
      ? Edition.fromJSON(object.editionRemoved.name)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(FieldOptions_FeatureSupport);

function createBaseFieldOptions_FeatureSupport(): FieldOptions_FeatureSupport {
  return {
    $type: "google.protobuf.FieldOptions.FeatureSupport",
    editionIntroduced: undefined,
    editionDeprecated: undefined,
    deprecationWarning: undefined,
    editionRemoved: undefined,
  };
}

export interface OneofOptions {
  $type: "google.protobuf.OneofOptions";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Any features defined in the specific edition.
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  features?: FeatureSet | undefined;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   *
   */
  uninterpretedOption: UninterpretedOption[];
}

export const OneofOptions: MessageFns<OneofOptions, "google.protobuf.OneofOptions"> = {
  $type: "google.protobuf.OneofOptions" as const,

  encode(message: OneofOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.features !== undefined) {
      const w = writer.uint32(10).fork();
      FeatureSet.encode(message.features, w);
      w.join();
    }
    for (const v of (message.uninterpretedOption ?? [])) {
      const w = writer.uint32(7994).fork();
      UninterpretedOption.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    // Encode registered extensions for *Options message
    for (const ext of protoRegistry.listExtensions(message.$type)) {
      ext.encode?.(message, writer);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): OneofOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneofOptions();
    let writer: BinaryWriter | undefined = undefined;
    const _exts = protoRegistry.listExtensions("google.protobuf.OneofOptions");
    const _extMap: Record<number, any> = {};
    for (const _e of _exts) _extMap[_e.fieldNo] = _e;
    const _declared: Record<number, true> = { 1: true, 999: true };
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) break;
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) break;
          message.uninterpretedOption.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      {
        const _fn = tag >>> 3;
        const _maybeExt = _extMap[_fn];
        if (_maybeExt && !_declared[_fn]) {
          if (_maybeExt.decode && _maybeExt.decode(message as any, reader, tag)) {
            continue;
          }
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): OneofOptions {
    const message: OneofOptions = {
      $type: "google.protobuf.OneofOptions",
      features: isSet(object.features ?? object.features)
        ? FeatureSet.fromJSON(object.features ?? object.features)
        : undefined,
      uninterpretedOption: globalThis.Array.isArray(object?.uninterpretedOption ?? object?.uninterpreted_option)
        ? (object.uninterpretedOption ?? object.uninterpreted_option).map((e: any) => UninterpretedOption.fromJSON(e))
        : [],
    };
    // Populate registered extensions (json)
    for (const _ext of protoRegistry.listExtensions("google.protobuf.OneofOptions")) {
      _ext.fromJSON?.(message as any, object);
    }
    return message;
  },
  toJSON(message: OneofOptions, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.features !== undefined) {
      obj[pick("features", "features")] = message.features
        ? FeatureSet.toJSON(message.features, use)
        : undefined;
    }
    if (message.uninterpretedOption?.length) {
      obj[pick("uninterpretedOption", "uninterpreted_option")] = message.uninterpretedOption.map((e) => e ? UninterpretedOption.toJSON(e, use) : undefined);
    }
    // Serialize registered extensions
    for (const _ext of protoRegistry.listExtensions(message.$type)) {
      _ext.toJSON?.(message as any, obj, use);
    }
    return obj;
  },
  create<I extends DeepPartial<OneofOptions>>(base?: I): OneofOptions {
    return OneofOptions.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<OneofOptions>>(object: I): OneofOptions {
    const message = createBaseOneofOptions();
    message.features = (object.features !== undefined && object.features !== null)
      ? FeatureSet.fromPartial(object.features)
      : undefined;
    message.uninterpretedOption = object.uninterpretedOption?.map((e) => UninterpretedOption.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(OneofOptions);

function createBaseOneofOptions(): OneofOptions {
  return {
    $type: "google.protobuf.OneofOptions",
    features: undefined,
    uninterpretedOption: [],
  };
}

export interface EnumOptions {
  $type: "google.protobuf.EnumOptions";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Set this option to true to allow mapping different tag names to the same
   *  value.
   *
   */
  allowAlias?: boolean | undefined;
  /**
   *  Is this enum deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for the enum, or it will be completely ignored; in the very least, this
   *  is a formalization for deprecating enums.
   *
   */
  deprecated?: boolean | undefined;
  /**
   *  Enable the legacy handling of JSON field name conflicts.  This lowercases
   *  and strips underscored from the fields before comparison in proto3 only.
   *  The new behavior takes `json_name` into account and applies to proto2 as
   *  well.
   *  TODO Remove this legacy behavior once downstream teams have
   *  had time to migrate.
   *
   * @deprecated Deprecated.
   */
  deprecatedLegacyJsonFieldConflicts?: boolean | undefined;
  /**
   *  Any features defined in the specific edition.
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  features?: FeatureSet | undefined;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   *
   */
  uninterpretedOption: UninterpretedOption[];
}

export const EnumOptions: MessageFns<EnumOptions, "google.protobuf.EnumOptions"> = {
  $type: "google.protobuf.EnumOptions" as const,

  encode(message: EnumOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deprecatedLegacyJsonFieldConflicts !== undefined) {
      if (!__deprecatedWarned.has("google.protobuf.EnumOptions.deprecated_legacy_json_field_conflicts")) {
        __deprecatedWarned.add("google.protobuf.EnumOptions.deprecated_legacy_json_field_conflicts");
        deprecatedWarn("", "field", "google.protobuf.EnumOptions.deprecated_legacy_json_field_conflicts", undefined);
      }
    }
    if (message.allowAlias !== undefined) {
      writer.uint32(16).bool(message.allowAlias);
    }
    if (message.deprecated !== undefined) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.deprecatedLegacyJsonFieldConflicts !== undefined) {
      writer.uint32(48).bool(message.deprecatedLegacyJsonFieldConflicts);
    }
    if (message.features !== undefined) {
      const w = writer.uint32(58).fork();
      FeatureSet.encode(message.features, w);
      w.join();
    }
    for (const v of (message.uninterpretedOption ?? [])) {
      const w = writer.uint32(7994).fork();
      UninterpretedOption.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    // Encode registered extensions for *Options message
    for (const ext of protoRegistry.listExtensions(message.$type)) {
      ext.encode?.(message, writer);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): EnumOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumOptions();
    let writer: BinaryWriter | undefined = undefined;
    const _exts = protoRegistry.listExtensions("google.protobuf.EnumOptions");
    const _extMap: Record<number, any> = {};
    for (const _e of _exts) _extMap[_e.fieldNo] = _e;
    const _declared: Record<number, true> = { 2: true, 3: true, 6: true, 7: true, 999: true };
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
        if (tag !== 16) break;
        message.allowAlias = reader.bool();
        continue;
      }
        case 3: {
        if (tag !== 24) break;
        message.deprecated = reader.bool();
        continue;
      }
        case 6: {
        if (tag !== 48) break;
        message.deprecatedLegacyJsonFieldConflicts = reader.bool();
        continue;
      }
        case 7: {
          if (tag !== 58) break;
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) break;
          message.uninterpretedOption.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      {
        const _fn = tag >>> 3;
        const _maybeExt = _extMap[_fn];
        if (_maybeExt && !_declared[_fn]) {
          if (_maybeExt.decode && _maybeExt.decode(message as any, reader, tag)) {
            continue;
          }
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): EnumOptions {
    const message: EnumOptions = {
      $type: "google.protobuf.EnumOptions",
      allowAlias: isSet(object.allowAlias ?? object.allow_alias)
        ? Boolean(object.allowAlias ?? object.allow_alias)
        : undefined,
      deprecated: isSet(object.deprecated ?? object.deprecated)
        ? Boolean(object.deprecated ?? object.deprecated)
        : undefined,
      deprecatedLegacyJsonFieldConflicts: isSet(object.deprecatedLegacyJsonFieldConflicts ?? object.deprecated_legacy_json_field_conflicts)
        ? Boolean(object.deprecatedLegacyJsonFieldConflicts ?? object.deprecated_legacy_json_field_conflicts)
        : undefined,
      features: isSet(object.features ?? object.features)
        ? FeatureSet.fromJSON(object.features ?? object.features)
        : undefined,
      uninterpretedOption: globalThis.Array.isArray(object?.uninterpretedOption ?? object?.uninterpreted_option)
        ? (object.uninterpretedOption ?? object.uninterpreted_option).map((e: any) => UninterpretedOption.fromJSON(e))
        : [],
    };
    // Populate registered extensions (json)
    for (const _ext of protoRegistry.listExtensions("google.protobuf.EnumOptions")) {
      _ext.fromJSON?.(message as any, object);
    }
    return message;
  },
  toJSON(message: EnumOptions, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.allowAlias !== undefined) {
      obj[pick("allowAlias", "allow_alias")] = message.allowAlias;
    }
    if (message.deprecated !== undefined) {
      obj[pick("deprecated", "deprecated")] = message.deprecated;
    }
    if (message.deprecatedLegacyJsonFieldConflicts !== undefined) {
      obj[pick("deprecatedLegacyJsonFieldConflicts", "deprecated_legacy_json_field_conflicts")] = message.deprecatedLegacyJsonFieldConflicts;
    }
    if (message.features !== undefined) {
      obj[pick("features", "features")] = message.features
        ? FeatureSet.toJSON(message.features, use)
        : undefined;
    }
    if (message.uninterpretedOption?.length) {
      obj[pick("uninterpretedOption", "uninterpreted_option")] = message.uninterpretedOption.map((e) => e ? UninterpretedOption.toJSON(e, use) : undefined);
    }
    // Serialize registered extensions
    for (const _ext of protoRegistry.listExtensions(message.$type)) {
      _ext.toJSON?.(message as any, obj, use);
    }
    return obj;
  },
  create<I extends DeepPartial<EnumOptions>>(base?: I): EnumOptions {
    return EnumOptions.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<EnumOptions>>(object: I): EnumOptions {
    const message = createBaseEnumOptions();
    message.allowAlias = (object.allowAlias !== undefined && object.allowAlias !== null)
      ? object.allowAlias
      : undefined;
    message.deprecated = (object.deprecated !== undefined && object.deprecated !== null)
      ? object.deprecated
      : undefined;
    message.deprecatedLegacyJsonFieldConflicts = (object.deprecatedLegacyJsonFieldConflicts !== undefined && object.deprecatedLegacyJsonFieldConflicts !== null)
      ? object.deprecatedLegacyJsonFieldConflicts
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? FeatureSet.fromPartial(object.features)
      : undefined;
    message.uninterpretedOption = object.uninterpretedOption?.map((e) => UninterpretedOption.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(EnumOptions);

function createBaseEnumOptions(): EnumOptions {
  return {
    $type: "google.protobuf.EnumOptions",
    allowAlias: undefined,
    deprecated: undefined,
    deprecatedLegacyJsonFieldConflicts: undefined,
    features: undefined,
    uninterpretedOption: [],
  };
}

export interface EnumValueOptions {
  $type: "google.protobuf.EnumValueOptions";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Is this enum value deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for the enum value, or it will be completely ignored; in the very least,
   *  this is a formalization for deprecating enum values.
   *
   */
  deprecated?: boolean | undefined;
  /**
   *  Any features defined in the specific edition.
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  features?: FeatureSet | undefined;
  /**
   *  Indicate that fields annotated with this enum value should not be printed
   *  out when using debug formats, e.g. when the field contains sensitive
   *  credentials.
   *
   */
  debugRedact?: boolean | undefined;
  /**
   *  Information about the support window of a feature value.
   *
   */
  featureSupport?: FieldOptions_FeatureSupport | undefined;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   *
   */
  uninterpretedOption: UninterpretedOption[];
}

export const EnumValueOptions: MessageFns<EnumValueOptions, "google.protobuf.EnumValueOptions"> = {
  $type: "google.protobuf.EnumValueOptions" as const,

  encode(message: EnumValueOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deprecated !== undefined) {
      writer.uint32(8).bool(message.deprecated);
    }
    if (message.features !== undefined) {
      const w = writer.uint32(18).fork();
      FeatureSet.encode(message.features, w);
      w.join();
    }
    if (message.debugRedact !== undefined) {
      writer.uint32(24).bool(message.debugRedact);
    }
    if (message.featureSupport !== undefined) {
      const w = writer.uint32(34).fork();
      FieldOptions_FeatureSupport.encode(message.featureSupport, w);
      w.join();
    }
    for (const v of (message.uninterpretedOption ?? [])) {
      const w = writer.uint32(7994).fork();
      UninterpretedOption.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    // Encode registered extensions for *Options message
    for (const ext of protoRegistry.listExtensions(message.$type)) {
      ext.encode?.(message, writer);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): EnumValueOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumValueOptions();
    let writer: BinaryWriter | undefined = undefined;
    const _exts = protoRegistry.listExtensions("google.protobuf.EnumValueOptions");
    const _extMap: Record<number, any> = {};
    for (const _e of _exts) _extMap[_e.fieldNo] = _e;
    const _declared: Record<number, true> = { 1: true, 2: true, 3: true, 4: true, 999: true };
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 8) break;
        message.deprecated = reader.bool();
        continue;
      }
        case 2: {
          if (tag !== 18) break;
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
        if (tag !== 24) break;
        message.debugRedact = reader.bool();
        continue;
      }
        case 4: {
          if (tag !== 34) break;
          message.featureSupport = FieldOptions_FeatureSupport.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) break;
          message.uninterpretedOption.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      {
        const _fn = tag >>> 3;
        const _maybeExt = _extMap[_fn];
        if (_maybeExt && !_declared[_fn]) {
          if (_maybeExt.decode && _maybeExt.decode(message as any, reader, tag)) {
            continue;
          }
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): EnumValueOptions {
    const message: EnumValueOptions = {
      $type: "google.protobuf.EnumValueOptions",
      deprecated: isSet(object.deprecated ?? object.deprecated)
        ? Boolean(object.deprecated ?? object.deprecated)
        : undefined,
      features: isSet(object.features ?? object.features)
        ? FeatureSet.fromJSON(object.features ?? object.features)
        : undefined,
      debugRedact: isSet(object.debugRedact ?? object.debug_redact)
        ? Boolean(object.debugRedact ?? object.debug_redact)
        : undefined,
      featureSupport: isSet(object.featureSupport ?? object.feature_support)
        ? FieldOptions_FeatureSupport.fromJSON(object.featureSupport ?? object.feature_support)
        : undefined,
      uninterpretedOption: globalThis.Array.isArray(object?.uninterpretedOption ?? object?.uninterpreted_option)
        ? (object.uninterpretedOption ?? object.uninterpreted_option).map((e: any) => UninterpretedOption.fromJSON(e))
        : [],
    };
    // Populate registered extensions (json)
    for (const _ext of protoRegistry.listExtensions("google.protobuf.EnumValueOptions")) {
      _ext.fromJSON?.(message as any, object);
    }
    return message;
  },
  toJSON(message: EnumValueOptions, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.deprecated !== undefined) {
      obj[pick("deprecated", "deprecated")] = message.deprecated;
    }
    if (message.features !== undefined) {
      obj[pick("features", "features")] = message.features
        ? FeatureSet.toJSON(message.features, use)
        : undefined;
    }
    if (message.debugRedact !== undefined) {
      obj[pick("debugRedact", "debug_redact")] = message.debugRedact;
    }
    if (message.featureSupport !== undefined) {
      obj[pick("featureSupport", "feature_support")] = message.featureSupport
        ? FieldOptions_FeatureSupport.toJSON(message.featureSupport, use)
        : undefined;
    }
    if (message.uninterpretedOption?.length) {
      obj[pick("uninterpretedOption", "uninterpreted_option")] = message.uninterpretedOption.map((e) => e ? UninterpretedOption.toJSON(e, use) : undefined);
    }
    // Serialize registered extensions
    for (const _ext of protoRegistry.listExtensions(message.$type)) {
      _ext.toJSON?.(message as any, obj, use);
    }
    return obj;
  },
  create<I extends DeepPartial<EnumValueOptions>>(base?: I): EnumValueOptions {
    return EnumValueOptions.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<EnumValueOptions>>(object: I): EnumValueOptions {
    const message = createBaseEnumValueOptions();
    message.deprecated = (object.deprecated !== undefined && object.deprecated !== null)
      ? object.deprecated
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? FeatureSet.fromPartial(object.features)
      : undefined;
    message.debugRedact = (object.debugRedact !== undefined && object.debugRedact !== null)
      ? object.debugRedact
      : undefined;
    message.featureSupport = (object.featureSupport !== undefined && object.featureSupport !== null)
      ? FieldOptions_FeatureSupport.fromPartial(object.featureSupport)
      : undefined;
    message.uninterpretedOption = object.uninterpretedOption?.map((e) => UninterpretedOption.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(EnumValueOptions);

function createBaseEnumValueOptions(): EnumValueOptions {
  return {
    $type: "google.protobuf.EnumValueOptions",
    deprecated: undefined,
    features: undefined,
    debugRedact: undefined,
    featureSupport: undefined,
    uninterpretedOption: [],
  };
}

export interface ServiceOptions {
  $type: "google.protobuf.ServiceOptions";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Any features defined in the specific edition.
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  features?: FeatureSet | undefined;
  /**
   *  Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
   *    framework.  We apologize for hoarding these numbers to ourselves, but
   *    we were already using them long before we decided to release Protocol
   *    Buffers.
   *
   *
   *  Is this service deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for the service, or it will be completely ignored; in the very least,
   *  this is a formalization for deprecating services.
   *
   */
  deprecated?: boolean | undefined;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   *
   */
  uninterpretedOption: UninterpretedOption[];
}

export const ServiceOptions: MessageFns<ServiceOptions, "google.protobuf.ServiceOptions"> = {
  $type: "google.protobuf.ServiceOptions" as const,

  encode(message: ServiceOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.features !== undefined) {
      const w = writer.uint32(274).fork();
      FeatureSet.encode(message.features, w);
      w.join();
    }
    if (message.deprecated !== undefined) {
      writer.uint32(264).bool(message.deprecated);
    }
    for (const v of (message.uninterpretedOption ?? [])) {
      const w = writer.uint32(7994).fork();
      UninterpretedOption.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    // Encode registered extensions for *Options message
    for (const ext of protoRegistry.listExtensions(message.$type)) {
      ext.encode?.(message, writer);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): ServiceOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceOptions();
    let writer: BinaryWriter | undefined = undefined;
    const _exts = protoRegistry.listExtensions("google.protobuf.ServiceOptions");
    const _extMap: Record<number, any> = {};
    for (const _e of _exts) _extMap[_e.fieldNo] = _e;
    const _declared: Record<number, true> = { 34: true, 33: true, 999: true };
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 34: {
          if (tag !== 274) break;
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 33: {
        if (tag !== 264) break;
        message.deprecated = reader.bool();
        continue;
      }
        case 999: {
          if (tag !== 7994) break;
          message.uninterpretedOption.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      {
        const _fn = tag >>> 3;
        const _maybeExt = _extMap[_fn];
        if (_maybeExt && !_declared[_fn]) {
          if (_maybeExt.decode && _maybeExt.decode(message as any, reader, tag)) {
            continue;
          }
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): ServiceOptions {
    const message: ServiceOptions = {
      $type: "google.protobuf.ServiceOptions",
      features: isSet(object.features ?? object.features)
        ? FeatureSet.fromJSON(object.features ?? object.features)
        : undefined,
      deprecated: isSet(object.deprecated ?? object.deprecated)
        ? Boolean(object.deprecated ?? object.deprecated)
        : undefined,
      uninterpretedOption: globalThis.Array.isArray(object?.uninterpretedOption ?? object?.uninterpreted_option)
        ? (object.uninterpretedOption ?? object.uninterpreted_option).map((e: any) => UninterpretedOption.fromJSON(e))
        : [],
    };
    // Populate registered extensions (json)
    for (const _ext of protoRegistry.listExtensions("google.protobuf.ServiceOptions")) {
      _ext.fromJSON?.(message as any, object);
    }
    return message;
  },
  toJSON(message: ServiceOptions, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.features !== undefined) {
      obj[pick("features", "features")] = message.features
        ? FeatureSet.toJSON(message.features, use)
        : undefined;
    }
    if (message.deprecated !== undefined) {
      obj[pick("deprecated", "deprecated")] = message.deprecated;
    }
    if (message.uninterpretedOption?.length) {
      obj[pick("uninterpretedOption", "uninterpreted_option")] = message.uninterpretedOption.map((e) => e ? UninterpretedOption.toJSON(e, use) : undefined);
    }
    // Serialize registered extensions
    for (const _ext of protoRegistry.listExtensions(message.$type)) {
      _ext.toJSON?.(message as any, obj, use);
    }
    return obj;
  },
  create<I extends DeepPartial<ServiceOptions>>(base?: I): ServiceOptions {
    return ServiceOptions.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<ServiceOptions>>(object: I): ServiceOptions {
    const message = createBaseServiceOptions();
    message.features = (object.features !== undefined && object.features !== null)
      ? FeatureSet.fromPartial(object.features)
      : undefined;
    message.deprecated = (object.deprecated !== undefined && object.deprecated !== null)
      ? object.deprecated
      : undefined;
    message.uninterpretedOption = object.uninterpretedOption?.map((e) => UninterpretedOption.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(ServiceOptions);

function createBaseServiceOptions(): ServiceOptions {
  return {
    $type: "google.protobuf.ServiceOptions",
    features: undefined,
    deprecated: undefined,
    uninterpretedOption: [],
  };
}

export interface MethodOptions {
  $type: "google.protobuf.MethodOptions";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
   *    framework.  We apologize for hoarding these numbers to ourselves, but
   *    we were already using them long before we decided to release Protocol
   *    Buffers.
   *
   *
   *  Is this method deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for the method, or it will be completely ignored; in the very least,
   *  this is a formalization for deprecating methods.
   *
   */
  deprecated?: boolean | undefined;
  idempotencyLevel?: MethodOptions_IdempotencyLevel | undefined;
  /**
   *  Any features defined in the specific edition.
   *  WARNING: This field should only be used by protobuf plugins or special
   *  cases like the proto compiler. Other uses are discouraged and
   *  developers should rely on the protoreflect APIs for their client language.
   *
   */
  features?: FeatureSet | undefined;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   *
   */
  uninterpretedOption: UninterpretedOption[];
}

export const MethodOptions: MessageFns<MethodOptions, "google.protobuf.MethodOptions"> = {
  $type: "google.protobuf.MethodOptions" as const,

  encode(message: MethodOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deprecated !== undefined) {
      writer.uint32(264).bool(message.deprecated);
    }
    if (message.idempotencyLevel !== undefined) {
      MethodOptions_IdempotencyLevel.encodeField(writer, 34, message.idempotencyLevel);
    }
    if (message.features !== undefined) {
      const w = writer.uint32(282).fork();
      FeatureSet.encode(message.features, w);
      w.join();
    }
    for (const v of (message.uninterpretedOption ?? [])) {
      const w = writer.uint32(7994).fork();
      UninterpretedOption.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    // Encode registered extensions for *Options message
    for (const ext of protoRegistry.listExtensions(message.$type)) {
      ext.encode?.(message, writer);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): MethodOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodOptions();
    let writer: BinaryWriter | undefined = undefined;
    const _exts = protoRegistry.listExtensions("google.protobuf.MethodOptions");
    const _extMap: Record<number, any> = {};
    for (const _e of _exts) _extMap[_e.fieldNo] = _e;
    const _declared: Record<number, true> = { 33: true, 34: true, 35: true, 999: true };
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 33: {
        if (tag !== 264) break;
        message.deprecated = reader.bool();
        continue;
      }
        case 34: {
          if (tag !== 272) break;
          message.idempotencyLevel = MethodOptions_IdempotencyLevel.fromNumber(reader.int32());
          continue;
        }
        case 35: {
          if (tag !== 282) break;
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 999: {
          if (tag !== 7994) break;
          message.uninterpretedOption.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      {
        const _fn = tag >>> 3;
        const _maybeExt = _extMap[_fn];
        if (_maybeExt && !_declared[_fn]) {
          if (_maybeExt.decode && _maybeExt.decode(message as any, reader, tag)) {
            continue;
          }
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): MethodOptions {
    const message: MethodOptions = {
      $type: "google.protobuf.MethodOptions",
      deprecated: isSet(object.deprecated ?? object.deprecated)
        ? Boolean(object.deprecated ?? object.deprecated)
        : undefined,
      idempotencyLevel: isSet(object.idempotencyLevel ?? object.idempotency_level)
        ? MethodOptions_IdempotencyLevel.fromJSON(object.idempotencyLevel ?? object.idempotency_level)
        : undefined,
      features: isSet(object.features ?? object.features)
        ? FeatureSet.fromJSON(object.features ?? object.features)
        : undefined,
      uninterpretedOption: globalThis.Array.isArray(object?.uninterpretedOption ?? object?.uninterpreted_option)
        ? (object.uninterpretedOption ?? object.uninterpreted_option).map((e: any) => UninterpretedOption.fromJSON(e))
        : [],
    };
    // Populate registered extensions (json)
    for (const _ext of protoRegistry.listExtensions("google.protobuf.MethodOptions")) {
      _ext.fromJSON?.(message as any, object);
    }
    return message;
  },
  toJSON(message: MethodOptions, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.deprecated !== undefined) {
      obj[pick("deprecated", "deprecated")] = message.deprecated;
    }
    if (message.idempotencyLevel !== undefined) {
      obj[pick("idempotencyLevel", "idempotency_level")] = MethodOptions_IdempotencyLevel.toJSON(message.idempotencyLevel);
    }
    if (message.features !== undefined) {
      obj[pick("features", "features")] = message.features
        ? FeatureSet.toJSON(message.features, use)
        : undefined;
    }
    if (message.uninterpretedOption?.length) {
      obj[pick("uninterpretedOption", "uninterpreted_option")] = message.uninterpretedOption.map((e) => e ? UninterpretedOption.toJSON(e, use) : undefined);
    }
    // Serialize registered extensions
    for (const _ext of protoRegistry.listExtensions(message.$type)) {
      _ext.toJSON?.(message as any, obj, use);
    }
    return obj;
  },
  create<I extends DeepPartial<MethodOptions>>(base?: I): MethodOptions {
    return MethodOptions.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<MethodOptions>>(object: I): MethodOptions {
    const message = createBaseMethodOptions();
    message.deprecated = (object.deprecated !== undefined && object.deprecated !== null)
      ? object.deprecated
      : undefined;
    message.idempotencyLevel = (object.idempotencyLevel !== undefined && object.idempotencyLevel !== null)
      ? MethodOptions_IdempotencyLevel.fromJSON(object.idempotencyLevel.name)
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? FeatureSet.fromPartial(object.features)
      : undefined;
    message.uninterpretedOption = object.uninterpretedOption?.map((e) => UninterpretedOption.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(MethodOptions);

function createBaseMethodOptions(): MethodOptions {
  return {
    $type: "google.protobuf.MethodOptions",
    deprecated: undefined,
    idempotencyLevel: undefined,
    features: undefined,
    uninterpretedOption: [],
  };
}

/**
 *  A message representing a option the parser does not recognize. This only
 *  appears in options protos created by the compiler::Parser class.
 *  DescriptorPool resolves these when building Descriptor objects. Therefore,
 *  options protos in descriptor objects (e.g. returned by Descriptor::options(),
 *  or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
 *  in them.
 *
 */
export interface UninterpretedOption {
  $type: "google.protobuf.UninterpretedOption";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  name: UninterpretedOption_NamePart[];
  /**
   *  The value of the uninterpreted option, in whatever type the tokenizer
   *  identified it as during parsing. Exactly one of these should be set.
   *
   */
  identifierValue?: string | undefined;
  positiveIntValue?: Long | undefined;
  negativeIntValue?: Long | undefined;
  doubleValue?: number | undefined;
  stringValue?: Uint8Array | undefined;
  aggregateValue?: string | undefined;
}

export const UninterpretedOption: MessageFns<UninterpretedOption, "google.protobuf.UninterpretedOption"> = {
  $type: "google.protobuf.UninterpretedOption" as const,

  encode(message: UninterpretedOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of (message.name ?? [])) {
      const w = writer.uint32(18).fork();
      UninterpretedOption_NamePart.encode(v, w);
      w.join();
    }
    if (message.identifierValue !== undefined) {
      writer.uint32(26).string(message.identifierValue);
    }
    if (message.positiveIntValue !== undefined) {
      writer.uint32(32).uint64(message.positiveIntValue.toString());
    }
    if (message.negativeIntValue !== undefined) {
      writer.uint32(40).int64(message.negativeIntValue.toString());
    }
    if (message.doubleValue !== undefined) {
      writer.uint32(49).double(message.doubleValue);
    }
    if (message.stringValue !== undefined) {
      writer.uint32(58).bytes(message.stringValue);
    }
    if (message.aggregateValue !== undefined) {
      writer.uint32(66).string(message.aggregateValue);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): UninterpretedOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUninterpretedOption();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) break;
          message.name.push(UninterpretedOption_NamePart.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
        if (tag !== 26) break;
        message.identifierValue = reader.string();
        continue;
      }
        case 4: {
        if (tag !== 32) break;
        message.positiveIntValue = Long.fromValue(reader.uint64());
        continue;
      }
        case 5: {
        if (tag !== 40) break;
        message.negativeIntValue = Long.fromValue(reader.int64());
        continue;
      }
        case 6: {
        if (tag !== 49) break;
        message.doubleValue = reader.double();
        continue;
      }
        case 7: {
        if (tag !== 58) break;
        message.stringValue = reader.bytes();
        continue;
      }
        case 8: {
        if (tag !== 66) break;
        message.aggregateValue = reader.string();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): UninterpretedOption {
    return {
      $type: "google.protobuf.UninterpretedOption",
      name: globalThis.Array.isArray(object?.name ?? object?.name)
        ? (object.name ?? object.name).map((e: any) => UninterpretedOption_NamePart.fromJSON(e))
        : [],
      identifierValue: isSet(object.identifierValue ?? object.identifier_value)
        ? String(object.identifierValue ?? object.identifier_value)
        : undefined,
      positiveIntValue: isSet(object.positiveIntValue ?? object.positive_int_value)
        ? Long.fromValue(object.positiveIntValue ?? object.positive_int_value)
        : undefined,
      negativeIntValue: isSet(object.negativeIntValue ?? object.negative_int_value)
        ? Long.fromValue(object.negativeIntValue ?? object.negative_int_value)
        : undefined,
      doubleValue: isSet(object.doubleValue ?? object.double_value)
        ? Number(object.doubleValue ?? object.double_value)
        : undefined,
      stringValue: isSet(object.stringValue ?? object.string_value)
        ? bytesFromBase64(object.stringValue ?? object.string_value)
        : undefined,
      aggregateValue: isSet(object.aggregateValue ?? object.aggregate_value)
        ? String(object.aggregateValue ?? object.aggregate_value)
        : undefined,
    };
  },
  toJSON(message: UninterpretedOption, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.name?.length) {
      obj[pick("name", "name")] = message.name.map((e) => e ? UninterpretedOption_NamePart.toJSON(e, use) : undefined);
    }
    if (message.identifierValue !== undefined) {
      obj[pick("identifierValue", "identifier_value")] = message.identifierValue;
    }
    if (message.positiveIntValue !== undefined) {
      obj[pick("positiveIntValue", "positive_int_value")] = (message.positiveIntValue || Long.ZERO).toString();
    }
    if (message.negativeIntValue !== undefined) {
      obj[pick("negativeIntValue", "negative_int_value")] = (message.negativeIntValue || Long.ZERO).toString();
    }
    if (message.doubleValue !== undefined) {
      obj[pick("doubleValue", "double_value")] = message.doubleValue;
    }
    if (message.stringValue !== undefined) {
      obj[pick("stringValue", "string_value")] = base64FromBytes(message.stringValue);
    }
    if (message.aggregateValue !== undefined) {
      obj[pick("aggregateValue", "aggregate_value")] = message.aggregateValue;
    }
    return obj;
  },
  create<I extends DeepPartial<UninterpretedOption>>(base?: I): UninterpretedOption {
    return UninterpretedOption.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<UninterpretedOption>>(object: I): UninterpretedOption {
    const message = createBaseUninterpretedOption();
    message.name = object.name?.map((e) => UninterpretedOption_NamePart.fromPartial(e)) || [];
    message.identifierValue = (object.identifierValue !== undefined && object.identifierValue !== null)
      ? object.identifierValue
      : undefined;
    message.positiveIntValue = (object.positiveIntValue !== undefined && object.positiveIntValue !== null)
      ? Long.fromValue(object.positiveIntValue)
      : undefined;
    message.negativeIntValue = (object.negativeIntValue !== undefined && object.negativeIntValue !== null)
      ? Long.fromValue(object.negativeIntValue)
      : undefined;
    message.doubleValue = (object.doubleValue !== undefined && object.doubleValue !== null)
      ? object.doubleValue
      : undefined;
    message.stringValue = (object.stringValue !== undefined && object.stringValue !== null)
      ? object.stringValue
      : undefined;
    message.aggregateValue = (object.aggregateValue !== undefined && object.aggregateValue !== null)
      ? object.aggregateValue
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(UninterpretedOption);

function createBaseUninterpretedOption(): UninterpretedOption {
  return {
    $type: "google.protobuf.UninterpretedOption",
    name: [],
    identifierValue: undefined,
    positiveIntValue: undefined,
    negativeIntValue: undefined,
    doubleValue: undefined,
    stringValue: undefined,
    aggregateValue: undefined,
  };
}

/**
 *  The name of the uninterpreted option.  Each string represents a segment in
 *  a dot-separated name.  is_extension is true iff a segment represents an
 *  extension (denoted with parentheses in options specs in .proto files).
 *  E.g.,{ ["foo", false], ["bar.baz", true], ["moo", false] } represents
 *  "foo.(bar.baz).moo".
 *
 */
export interface UninterpretedOption_NamePart {
  $type: "google.protobuf.UninterpretedOption.NamePart";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  namePart?: string | undefined;
  isExtension?: boolean | undefined;
}

export const UninterpretedOption_NamePart: MessageFns<UninterpretedOption_NamePart, "google.protobuf.UninterpretedOption.NamePart"> = {
  $type: "google.protobuf.UninterpretedOption.NamePart" as const,

  encode(message: UninterpretedOption_NamePart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namePart !== undefined) {
      writer.uint32(10).string(message.namePart);
    }
    if (message.isExtension !== undefined) {
      writer.uint32(16).bool(message.isExtension);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): UninterpretedOption_NamePart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUninterpretedOption_NamePart();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
        if (tag !== 10) break;
        message.namePart = reader.string();
        continue;
      }
        case 2: {
        if (tag !== 16) break;
        message.isExtension = reader.bool();
        continue;
      }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): UninterpretedOption_NamePart {
    return {
      $type: "google.protobuf.UninterpretedOption.NamePart",
      namePart: isSet(object.namePart ?? object.name_part)
        ? String(object.namePart ?? object.name_part)
        : undefined,
      isExtension: isSet(object.isExtension ?? object.is_extension)
        ? Boolean(object.isExtension ?? object.is_extension)
        : undefined,
    };
  },
  toJSON(message: UninterpretedOption_NamePart, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.namePart !== undefined) {
      obj[pick("namePart", "name_part")] = message.namePart;
    }
    if (message.isExtension !== undefined) {
      obj[pick("isExtension", "is_extension")] = message.isExtension;
    }
    return obj;
  },
  create<I extends DeepPartial<UninterpretedOption_NamePart>>(base?: I): UninterpretedOption_NamePart {
    return UninterpretedOption_NamePart.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<UninterpretedOption_NamePart>>(object: I): UninterpretedOption_NamePart {
    const message = createBaseUninterpretedOption_NamePart();
    message.namePart = (object.namePart !== undefined && object.namePart !== null)
      ? object.namePart
      : undefined;
    message.isExtension = (object.isExtension !== undefined && object.isExtension !== null)
      ? object.isExtension
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(UninterpretedOption_NamePart);

function createBaseUninterpretedOption_NamePart(): UninterpretedOption_NamePart {
  return {
    $type: "google.protobuf.UninterpretedOption.NamePart",
    namePart: undefined,
    isExtension: undefined,
  };
}

/**
 *  ===================================================================
 *  Features
 *
 *
 *  TODO Enums in C++ gencode (and potentially other languages) are
 *  not well scoped.  This means that each of the feature enums below can clash
 *  with each other.  The short names we've chosen maximize call-site
 *  readability, but leave us very open to this scenario.  A future feature will
 *  be designed and implemented to handle this, hopefully before we ever hit a
 *  conflict here.
 *
 */
export interface FeatureSet {
  $type: "google.protobuf.FeatureSet";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  fieldPresence?: FeatureSet_FieldPresence | undefined;
  enumType?: FeatureSet_EnumType | undefined;
  repeatedFieldEncoding?: FeatureSet_RepeatedFieldEncoding | undefined;
  utf8Validation?: FeatureSet_Utf8Validation | undefined;
  messageEncoding?: FeatureSet_MessageEncoding | undefined;
  jsonFormat?: FeatureSet_JsonFormat | undefined;
  enforceNamingStyle?: FeatureSet_EnforceNamingStyle | undefined;
  defaultSymbolVisibility?: FeatureSet_VisibilityFeature_DefaultSymbolVisibility | undefined;
}

export const FeatureSet: MessageFns<FeatureSet, "google.protobuf.FeatureSet"> = {
  $type: "google.protobuf.FeatureSet" as const,

  encode(message: FeatureSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fieldPresence !== undefined) {
      FeatureSet_FieldPresence.encodeField(writer, 1, message.fieldPresence);
    }
    if (message.enumType !== undefined) {
      FeatureSet_EnumType.encodeField(writer, 2, message.enumType);
    }
    if (message.repeatedFieldEncoding !== undefined) {
      FeatureSet_RepeatedFieldEncoding.encodeField(writer, 3, message.repeatedFieldEncoding);
    }
    if (message.utf8Validation !== undefined) {
      FeatureSet_Utf8Validation.encodeField(writer, 4, message.utf8Validation);
    }
    if (message.messageEncoding !== undefined) {
      FeatureSet_MessageEncoding.encodeField(writer, 5, message.messageEncoding);
    }
    if (message.jsonFormat !== undefined) {
      FeatureSet_JsonFormat.encodeField(writer, 6, message.jsonFormat);
    }
    if (message.enforceNamingStyle !== undefined) {
      FeatureSet_EnforceNamingStyle.encodeField(writer, 7, message.enforceNamingStyle);
    }
    if (message.defaultSymbolVisibility !== undefined) {
      FeatureSet_VisibilityFeature_DefaultSymbolVisibility.encodeField(writer, 8, message.defaultSymbolVisibility);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FeatureSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureSet();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) break;
          message.fieldPresence = FeatureSet_FieldPresence.fromNumber(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) break;
          message.enumType = FeatureSet_EnumType.fromNumber(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 24) break;
          message.repeatedFieldEncoding = FeatureSet_RepeatedFieldEncoding.fromNumber(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 32) break;
          message.utf8Validation = FeatureSet_Utf8Validation.fromNumber(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 40) break;
          message.messageEncoding = FeatureSet_MessageEncoding.fromNumber(reader.int32());
          continue;
        }
        case 6: {
          if (tag !== 48) break;
          message.jsonFormat = FeatureSet_JsonFormat.fromNumber(reader.int32());
          continue;
        }
        case 7: {
          if (tag !== 56) break;
          message.enforceNamingStyle = FeatureSet_EnforceNamingStyle.fromNumber(reader.int32());
          continue;
        }
        case 8: {
          if (tag !== 64) break;
          message.defaultSymbolVisibility = FeatureSet_VisibilityFeature_DefaultSymbolVisibility.fromNumber(reader.int32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FeatureSet {
    return {
      $type: "google.protobuf.FeatureSet",
      fieldPresence: isSet(object.fieldPresence ?? object.field_presence)
        ? FeatureSet_FieldPresence.fromJSON(object.fieldPresence ?? object.field_presence)
        : undefined,
      enumType: isSet(object.enumType ?? object.enum_type)
        ? FeatureSet_EnumType.fromJSON(object.enumType ?? object.enum_type)
        : undefined,
      repeatedFieldEncoding: isSet(object.repeatedFieldEncoding ?? object.repeated_field_encoding)
        ? FeatureSet_RepeatedFieldEncoding.fromJSON(object.repeatedFieldEncoding ?? object.repeated_field_encoding)
        : undefined,
      utf8Validation: isSet(object.utf8Validation ?? object.utf8_validation)
        ? FeatureSet_Utf8Validation.fromJSON(object.utf8Validation ?? object.utf8_validation)
        : undefined,
      messageEncoding: isSet(object.messageEncoding ?? object.message_encoding)
        ? FeatureSet_MessageEncoding.fromJSON(object.messageEncoding ?? object.message_encoding)
        : undefined,
      jsonFormat: isSet(object.jsonFormat ?? object.json_format)
        ? FeatureSet_JsonFormat.fromJSON(object.jsonFormat ?? object.json_format)
        : undefined,
      enforceNamingStyle: isSet(object.enforceNamingStyle ?? object.enforce_naming_style)
        ? FeatureSet_EnforceNamingStyle.fromJSON(object.enforceNamingStyle ?? object.enforce_naming_style)
        : undefined,
      defaultSymbolVisibility: isSet(object.defaultSymbolVisibility ?? object.default_symbol_visibility)
        ? FeatureSet_VisibilityFeature_DefaultSymbolVisibility.fromJSON(object.defaultSymbolVisibility ?? object.default_symbol_visibility)
        : undefined,
    };
  },
  toJSON(message: FeatureSet, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.fieldPresence !== undefined) {
      obj[pick("fieldPresence", "field_presence")] = FeatureSet_FieldPresence.toJSON(message.fieldPresence);
    }
    if (message.enumType !== undefined) {
      obj[pick("enumType", "enum_type")] = FeatureSet_EnumType.toJSON(message.enumType);
    }
    if (message.repeatedFieldEncoding !== undefined) {
      obj[pick("repeatedFieldEncoding", "repeated_field_encoding")] = FeatureSet_RepeatedFieldEncoding.toJSON(message.repeatedFieldEncoding);
    }
    if (message.utf8Validation !== undefined) {
      obj[pick("utf8Validation", "utf8_validation")] = FeatureSet_Utf8Validation.toJSON(message.utf8Validation);
    }
    if (message.messageEncoding !== undefined) {
      obj[pick("messageEncoding", "message_encoding")] = FeatureSet_MessageEncoding.toJSON(message.messageEncoding);
    }
    if (message.jsonFormat !== undefined) {
      obj[pick("jsonFormat", "json_format")] = FeatureSet_JsonFormat.toJSON(message.jsonFormat);
    }
    if (message.enforceNamingStyle !== undefined) {
      obj[pick("enforceNamingStyle", "enforce_naming_style")] = FeatureSet_EnforceNamingStyle.toJSON(message.enforceNamingStyle);
    }
    if (message.defaultSymbolVisibility !== undefined) {
      obj[pick("defaultSymbolVisibility", "default_symbol_visibility")] = FeatureSet_VisibilityFeature_DefaultSymbolVisibility.toJSON(message.defaultSymbolVisibility);
    }
    return obj;
  },
  create<I extends DeepPartial<FeatureSet>>(base?: I): FeatureSet {
    return FeatureSet.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FeatureSet>>(object: I): FeatureSet {
    const message = createBaseFeatureSet();
    message.fieldPresence = (object.fieldPresence !== undefined && object.fieldPresence !== null)
      ? FeatureSet_FieldPresence.fromJSON(object.fieldPresence.name)
      : undefined;
    message.enumType = (object.enumType !== undefined && object.enumType !== null)
      ? FeatureSet_EnumType.fromJSON(object.enumType.name)
      : undefined;
    message.repeatedFieldEncoding = (object.repeatedFieldEncoding !== undefined && object.repeatedFieldEncoding !== null)
      ? FeatureSet_RepeatedFieldEncoding.fromJSON(object.repeatedFieldEncoding.name)
      : undefined;
    message.utf8Validation = (object.utf8Validation !== undefined && object.utf8Validation !== null)
      ? FeatureSet_Utf8Validation.fromJSON(object.utf8Validation.name)
      : undefined;
    message.messageEncoding = (object.messageEncoding !== undefined && object.messageEncoding !== null)
      ? FeatureSet_MessageEncoding.fromJSON(object.messageEncoding.name)
      : undefined;
    message.jsonFormat = (object.jsonFormat !== undefined && object.jsonFormat !== null)
      ? FeatureSet_JsonFormat.fromJSON(object.jsonFormat.name)
      : undefined;
    message.enforceNamingStyle = (object.enforceNamingStyle !== undefined && object.enforceNamingStyle !== null)
      ? FeatureSet_EnforceNamingStyle.fromJSON(object.enforceNamingStyle.name)
      : undefined;
    message.defaultSymbolVisibility = (object.defaultSymbolVisibility !== undefined && object.defaultSymbolVisibility !== null)
      ? FeatureSet_VisibilityFeature_DefaultSymbolVisibility.fromJSON(object.defaultSymbolVisibility.name)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(FeatureSet);

function createBaseFeatureSet(): FeatureSet {
  return {
    $type: "google.protobuf.FeatureSet",
    fieldPresence: undefined,
    enumType: undefined,
    repeatedFieldEncoding: undefined,
    utf8Validation: undefined,
    messageEncoding: undefined,
    jsonFormat: undefined,
    enforceNamingStyle: undefined,
    defaultSymbolVisibility: undefined,
  };
}

export interface FeatureSet_VisibilityFeature {
  $type: "google.protobuf.FeatureSet.VisibilityFeature";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
}

export const FeatureSet_VisibilityFeature: MessageFns<FeatureSet_VisibilityFeature, "google.protobuf.FeatureSet.VisibilityFeature"> = {
  $type: "google.protobuf.FeatureSet.VisibilityFeature" as const,

  encode(message: FeatureSet_VisibilityFeature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FeatureSet_VisibilityFeature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureSet_VisibilityFeature();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FeatureSet_VisibilityFeature {
    return {
      $type: "google.protobuf.FeatureSet.VisibilityFeature",
    };
  },
  toJSON(message: FeatureSet_VisibilityFeature, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    return obj;
  },
  create<I extends DeepPartial<FeatureSet_VisibilityFeature>>(base?: I): FeatureSet_VisibilityFeature {
    return FeatureSet_VisibilityFeature.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FeatureSet_VisibilityFeature>>(object: I): FeatureSet_VisibilityFeature {
    const message = createBaseFeatureSet_VisibilityFeature();
    return message;
  },
};

protoRegistry.registerMessage(FeatureSet_VisibilityFeature);

function createBaseFeatureSet_VisibilityFeature(): FeatureSet_VisibilityFeature {
  return {
    $type: "google.protobuf.FeatureSet.VisibilityFeature",
  };
}

/**
 *  A compiled specification for the defaults of a set of features.  These
 *  messages are generated from FeatureSet extensions and can be used to seed
 *  feature resolution. The resolution with this object becomes a simple search
 *  for the closest matching edition, followed by proto merges.
 *
 */
export interface FeatureSetDefaults {
  $type: "google.protobuf.FeatureSetDefaults";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  defaults: FeatureSetDefaults_FeatureSetEditionDefault[];
  /**
   *  The minimum supported edition (inclusive) when this was constructed.
   *  Editions before this will not have defaults.
   *
   */
  minimumEdition?: Edition | undefined;
  /**
   *  The maximum known edition (inclusive) when this was constructed. Editions
   *  after this will not have reliable defaults.
   *
   */
  maximumEdition?: Edition | undefined;
}

export const FeatureSetDefaults: MessageFns<FeatureSetDefaults, "google.protobuf.FeatureSetDefaults"> = {
  $type: "google.protobuf.FeatureSetDefaults" as const,

  encode(message: FeatureSetDefaults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of (message.defaults ?? [])) {
      const w = writer.uint32(10).fork();
      FeatureSetDefaults_FeatureSetEditionDefault.encode(v, w);
      w.join();
    }
    if (message.minimumEdition !== undefined) {
      Edition.encodeField(writer, 4, message.minimumEdition);
    }
    if (message.maximumEdition !== undefined) {
      Edition.encodeField(writer, 5, message.maximumEdition);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FeatureSetDefaults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureSetDefaults();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) break;
          message.defaults.push(FeatureSetDefaults_FeatureSetEditionDefault.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) break;
          message.minimumEdition = Edition.fromNumber(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 40) break;
          message.maximumEdition = Edition.fromNumber(reader.int32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FeatureSetDefaults {
    return {
      $type: "google.protobuf.FeatureSetDefaults",
      defaults: globalThis.Array.isArray(object?.defaults ?? object?.defaults)
        ? (object.defaults ?? object.defaults).map((e: any) => FeatureSetDefaults_FeatureSetEditionDefault.fromJSON(e))
        : [],
      minimumEdition: isSet(object.minimumEdition ?? object.minimum_edition)
        ? Edition.fromJSON(object.minimumEdition ?? object.minimum_edition)
        : undefined,
      maximumEdition: isSet(object.maximumEdition ?? object.maximum_edition)
        ? Edition.fromJSON(object.maximumEdition ?? object.maximum_edition)
        : undefined,
    };
  },
  toJSON(message: FeatureSetDefaults, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.defaults?.length) {
      obj[pick("defaults", "defaults")] = message.defaults.map((e) => e ? FeatureSetDefaults_FeatureSetEditionDefault.toJSON(e, use) : undefined);
    }
    if (message.minimumEdition !== undefined) {
      obj[pick("minimumEdition", "minimum_edition")] = Edition.toJSON(message.minimumEdition);
    }
    if (message.maximumEdition !== undefined) {
      obj[pick("maximumEdition", "maximum_edition")] = Edition.toJSON(message.maximumEdition);
    }
    return obj;
  },
  create<I extends DeepPartial<FeatureSetDefaults>>(base?: I): FeatureSetDefaults {
    return FeatureSetDefaults.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FeatureSetDefaults>>(object: I): FeatureSetDefaults {
    const message = createBaseFeatureSetDefaults();
    message.defaults = object.defaults?.map((e) => FeatureSetDefaults_FeatureSetEditionDefault.fromPartial(e)) || [];
    message.minimumEdition = (object.minimumEdition !== undefined && object.minimumEdition !== null)
      ? Edition.fromJSON(object.minimumEdition.name)
      : undefined;
    message.maximumEdition = (object.maximumEdition !== undefined && object.maximumEdition !== null)
      ? Edition.fromJSON(object.maximumEdition.name)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(FeatureSetDefaults);

function createBaseFeatureSetDefaults(): FeatureSetDefaults {
  return {
    $type: "google.protobuf.FeatureSetDefaults",
    defaults: [],
    minimumEdition: undefined,
    maximumEdition: undefined,
  };
}

/**
 *  A map from every known edition with a unique set of defaults to its
 *  defaults. Not all editions may be contained here.  For a given edition,
 *  the defaults at the closest matching edition ordered at or before it should
 *  be used.  This field must be in strict ascending order by edition.
 *
 */
export interface FeatureSetDefaults_FeatureSetEditionDefault {
  $type: "google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  edition?: Edition | undefined;
  /**
   *  Defaults of features that can be overridden in this edition.
   *
   */
  overridableFeatures?: FeatureSet | undefined;
  /**
   *  Defaults of features that can't be overridden in this edition.
   *
   */
  fixedFeatures?: FeatureSet | undefined;
}

export const FeatureSetDefaults_FeatureSetEditionDefault: MessageFns<FeatureSetDefaults_FeatureSetEditionDefault, "google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault"> = {
  $type: "google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault" as const,

  encode(message: FeatureSetDefaults_FeatureSetEditionDefault, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.edition !== undefined) {
      Edition.encodeField(writer, 3, message.edition);
    }
    if (message.overridableFeatures !== undefined) {
      const w = writer.uint32(34).fork();
      FeatureSet.encode(message.overridableFeatures, w);
      w.join();
    }
    if (message.fixedFeatures !== undefined) {
      const w = writer.uint32(42).fork();
      FeatureSet.encode(message.fixedFeatures, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FeatureSetDefaults_FeatureSetEditionDefault {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureSetDefaults_FeatureSetEditionDefault();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 24) break;
          message.edition = Edition.fromNumber(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) break;
          message.overridableFeatures = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) break;
          message.fixedFeatures = FeatureSet.decode(reader, reader.uint32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): FeatureSetDefaults_FeatureSetEditionDefault {
    return {
      $type: "google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault",
      edition: isSet(object.edition ?? object.edition)
        ? Edition.fromJSON(object.edition ?? object.edition)
        : undefined,
      overridableFeatures: isSet(object.overridableFeatures ?? object.overridable_features)
        ? FeatureSet.fromJSON(object.overridableFeatures ?? object.overridable_features)
        : undefined,
      fixedFeatures: isSet(object.fixedFeatures ?? object.fixed_features)
        ? FeatureSet.fromJSON(object.fixedFeatures ?? object.fixed_features)
        : undefined,
    };
  },
  toJSON(message: FeatureSetDefaults_FeatureSetEditionDefault, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.edition !== undefined) {
      obj[pick("edition", "edition")] = Edition.toJSON(message.edition);
    }
    if (message.overridableFeatures !== undefined) {
      obj[pick("overridableFeatures", "overridable_features")] = message.overridableFeatures
        ? FeatureSet.toJSON(message.overridableFeatures, use)
        : undefined;
    }
    if (message.fixedFeatures !== undefined) {
      obj[pick("fixedFeatures", "fixed_features")] = message.fixedFeatures
        ? FeatureSet.toJSON(message.fixedFeatures, use)
        : undefined;
    }
    return obj;
  },
  create<I extends DeepPartial<FeatureSetDefaults_FeatureSetEditionDefault>>(base?: I): FeatureSetDefaults_FeatureSetEditionDefault {
    return FeatureSetDefaults_FeatureSetEditionDefault.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<FeatureSetDefaults_FeatureSetEditionDefault>>(object: I): FeatureSetDefaults_FeatureSetEditionDefault {
    const message = createBaseFeatureSetDefaults_FeatureSetEditionDefault();
    message.edition = (object.edition !== undefined && object.edition !== null)
      ? Edition.fromJSON(object.edition.name)
      : undefined;
    message.overridableFeatures = (object.overridableFeatures !== undefined && object.overridableFeatures !== null)
      ? FeatureSet.fromPartial(object.overridableFeatures)
      : undefined;
    message.fixedFeatures = (object.fixedFeatures !== undefined && object.fixedFeatures !== null)
      ? FeatureSet.fromPartial(object.fixedFeatures)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(FeatureSetDefaults_FeatureSetEditionDefault);

function createBaseFeatureSetDefaults_FeatureSetEditionDefault(): FeatureSetDefaults_FeatureSetEditionDefault {
  return {
    $type: "google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault",
    edition: undefined,
    overridableFeatures: undefined,
    fixedFeatures: undefined,
  };
}

/**
 *  ===================================================================
 *  Optional source code info
 *
 *
 *  Encapsulates information about the original source file from which a
 *  FileDescriptorProto was generated.
 *
 */
export interface SourceCodeInfo {
  $type: "google.protobuf.SourceCodeInfo";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  A Location identifies a piece of source code in a .proto file which
   *  corresponds to a particular definition.  This information is intended
   *  to be useful to IDEs, code indexers, documentation generators, and similar
   *  tools.
   *
   *  For example, say we have a file like:
   *    message Foo {
   *      optional string foo = 1;
   *    }
   *  Let's look at just the field definition:
   *    optional string foo = 1;
   *    ^       ^^     ^^  ^  ^^^
   *    a       bc     de  f  ghi
   *  We have the following locations:
   *    span   path               represents
   *    [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
   *    [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
   *    [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
   *    [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
   *    [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
   *
   *  Notes:
   *  - A location may refer to a repeated field itself (i.e. not to any
   *    particular index within it).  This is used whenever a set of elements are
   *    logically enclosed in a single code segment.  For example, an entire
   *    extend block (possibly containing multiple extension definitions) will
   *    have an outer location whose path refers to the "extensions" repeated
   *    field without an index.
   *  - Multiple locations may have the same path.  This happens when a single
   *    logical declaration is spread out across multiple places.  The most
   *    obvious example is the "extend" block again -- there may be multiple
   *    extend blocks in the same scope, each of which will have the same path.
   *  - A location's span is not always a subset of its parent's span.  For
   *    example, the "extendee" of an extension declaration appears at the
   *    beginning of the "extend" block and is shared by all extensions within
   *    the block.
   *  - Just because a location's span is a subset of some other location's span
   *    does not mean that it is a descendant.  For example, a "group" defines
   *    both a type and a field in a single declaration.  Thus, the locations
   *    corresponding to the type and field and their components will overlap.
   *  - Code which tries to interpret locations should probably be designed to
   *    ignore those that it doesn't understand, as more types of locations could
   *    be recorded in the future.
   *
   */
  location: SourceCodeInfo_Location[];
}

export const SourceCodeInfo: MessageFns<SourceCodeInfo, "google.protobuf.SourceCodeInfo"> = {
  $type: "google.protobuf.SourceCodeInfo" as const,

  encode(message: SourceCodeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of (message.location ?? [])) {
      const w = writer.uint32(10).fork();
      SourceCodeInfo_Location.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): SourceCodeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceCodeInfo();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) break;
          message.location.push(SourceCodeInfo_Location.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): SourceCodeInfo {
    return {
      $type: "google.protobuf.SourceCodeInfo",
      location: globalThis.Array.isArray(object?.location ?? object?.location)
        ? (object.location ?? object.location).map((e: any) => SourceCodeInfo_Location.fromJSON(e))
        : [],
    };
  },
  toJSON(message: SourceCodeInfo, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.location?.length) {
      obj[pick("location", "location")] = message.location.map((e) => e ? SourceCodeInfo_Location.toJSON(e, use) : undefined);
    }
    return obj;
  },
  create<I extends DeepPartial<SourceCodeInfo>>(base?: I): SourceCodeInfo {
    return SourceCodeInfo.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<SourceCodeInfo>>(object: I): SourceCodeInfo {
    const message = createBaseSourceCodeInfo();
    message.location = object.location?.map((e) => SourceCodeInfo_Location.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(SourceCodeInfo);

function createBaseSourceCodeInfo(): SourceCodeInfo {
  return {
    $type: "google.protobuf.SourceCodeInfo",
    location: [],
  };
}

export interface SourceCodeInfo_Location {
  $type: "google.protobuf.SourceCodeInfo.Location";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Identifies which part of the FileDescriptorProto was defined at this
   *  location.
   *
   *  Each element is a field number or an index.  They form a path from
   *  the root FileDescriptorProto to the place where the definition appears.
   *  For example, this path:
   *    [ 4, 3, 2, 7, 1 ]
   *  refers to:
   *    file.message_type(3)  // 4, 3
   *        .field(7)         // 2, 7
   *        .name()           // 1
   *  This is because FileDescriptorProto.message_type has field number 4:
   *    repeated DescriptorProto message_type = 4;
   *  and DescriptorProto.field has field number 2:
   *    repeated FieldDescriptorProto field = 2;
   *  and FieldDescriptorProto.name has field number 1:
   *    optional string name = 1;
   *
   *  Thus, the above path gives the location of a field name.  If we removed
   *  the last element:
   *    [ 4, 3, 2, 7 ]
   *  this path refers to the whole field declaration (from the beginning
   *  of the label to the terminating semicolon).
   *
   */
  path: number[];
  /**
   *  Always has exactly three or four elements: start line, start column,
   *  end line (optional, otherwise assumed same as start line), end column.
   *  These are packed into a single field for efficiency.  Note that line
   *  and column numbers are zero-based -- typically you will want to add
   *  1 to each before displaying to a user.
   *
   */
  span: number[];
  /**
   *  If this SourceCodeInfo represents a complete declaration, these are any
   *  comments appearing before and after the declaration which appear to be
   *  attached to the declaration.
   *
   *  A series of line comments appearing on consecutive lines, with no other
   *  tokens appearing on those lines, will be treated as a single comment.
   *
   *  leading_detached_comments will keep paragraphs of comments that appear
   *  before (but not connected to) the current element. Each paragraph,
   *  separated by empty lines, will be one comment element in the repeated
   *  field.
   *
   *  Only the comment content is provided; comment markers (e.g. //) are
   *  stripped out.  For block comments, leading whitespace and an asterisk
   *  will be stripped from the beginning of each line other than the first.
   *  Newlines are included in the output.
   *
   *  Examples:
   *
   *    optional int32 foo = 1;  // Comment attached to foo.
   *    // Comment attached to bar.
   *    optional int32 bar = 2;
   *
   *    optional string baz = 3;
   *    // Comment attached to baz.
   *    // Another line attached to baz.
   *
   *    // Comment attached to moo.
   *    //
   *    // Another line attached to moo.
   *    optional double moo = 4;
   *
   *    // Detached comment for corge. This is not leading or trailing comments
   *    // to moo or corge because there are blank lines separating it from
   *    // both.
   *
   *    // Detached comment for corge paragraph 2.
   *
   *    optional string corge = 5;
   *    /* Block comment attached
   *     * to corge.  Leading asterisks
   *     * will be removed. * /
   *    /* Block comment attached to
   *     * grault. * /
   *    optional int32 grault = 6;
   *
   *    // ignored detached comments.
   *
   */
  leadingComments?: string | undefined;
  trailingComments?: string | undefined;
  leadingDetachedComments: string[];
}

export const SourceCodeInfo_Location: MessageFns<SourceCodeInfo_Location, "google.protobuf.SourceCodeInfo.Location"> = {
  $type: "google.protobuf.SourceCodeInfo.Location" as const,

  encode(message: SourceCodeInfo_Location, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path?.length) {
      const w = writer.uint32(10).fork();
      for (const v of message.path) w.int32(v);
      w.join();
    }
    if (message.span?.length) {
      const w = writer.uint32(18).fork();
      for (const v of message.span) w.int32(v);
      w.join();
    }
    if (message.leadingComments !== undefined) {
      writer.uint32(26).string(message.leadingComments);
    }
    if (message.trailingComments !== undefined) {
      writer.uint32(34).string(message.trailingComments);
    }
    for (const v of (message.leadingDetachedComments ?? [])) {
      writer.uint32(50).string(v);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): SourceCodeInfo_Location {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceCodeInfo_Location();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          // packed or unpacked repeated scalar
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.path.push(reader.int32());
            }
            continue;
          } else if ((tag & 7) === 0 || (tag & 7) === 5 || (tag & 7) === 1) { // allow valid scalar wire types
            message.path.push(reader.int32());
            continue;
          }
          break; // wrong wire type
        }
        case 2: {
          // packed or unpacked repeated scalar
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.span.push(reader.int32());
            }
            continue;
          } else if ((tag & 7) === 0 || (tag & 7) === 5 || (tag & 7) === 1) { // allow valid scalar wire types
            message.span.push(reader.int32());
            continue;
          }
          break; // wrong wire type
        }
        case 3: {
        if (tag !== 26) break;
        message.leadingComments = reader.string();
        continue;
      }
        case 4: {
        if (tag !== 34) break;
        message.trailingComments = reader.string();
        continue;
      }
        case 6: {
          if (tag !== 50) break;
          message.leadingDetachedComments.push(reader.string());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): SourceCodeInfo_Location {
    return {
      $type: "google.protobuf.SourceCodeInfo.Location",
      path: globalThis.Array.isArray(object?.path ?? object?.path)
        ? (object.path ?? object.path).map((e: any) => Number(e))
        : [],
      span: globalThis.Array.isArray(object?.span ?? object?.span)
        ? (object.span ?? object.span).map((e: any) => Number(e))
        : [],
      leadingComments: isSet(object.leadingComments ?? object.leading_comments)
        ? String(object.leadingComments ?? object.leading_comments)
        : undefined,
      trailingComments: isSet(object.trailingComments ?? object.trailing_comments)
        ? String(object.trailingComments ?? object.trailing_comments)
        : undefined,
      leadingDetachedComments: globalThis.Array.isArray(object?.leadingDetachedComments ?? object?.leading_detached_comments)
        ? (object.leadingDetachedComments ?? object.leading_detached_comments).map((e: any) => String(e))
        : [],
    };
  },
  toJSON(message: SourceCodeInfo_Location, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.path?.length) {
      obj[pick("path", "path")] = message.path.map((e) => e);
    }
    if (message.span?.length) {
      obj[pick("span", "span")] = message.span.map((e) => e);
    }
    if (message.leadingComments !== undefined) {
      obj[pick("leadingComments", "leading_comments")] = message.leadingComments;
    }
    if (message.trailingComments !== undefined) {
      obj[pick("trailingComments", "trailing_comments")] = message.trailingComments;
    }
    if (message.leadingDetachedComments?.length) {
      obj[pick("leadingDetachedComments", "leading_detached_comments")] = message.leadingDetachedComments.map((e) => e);
    }
    return obj;
  },
  create<I extends DeepPartial<SourceCodeInfo_Location>>(base?: I): SourceCodeInfo_Location {
    return SourceCodeInfo_Location.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<SourceCodeInfo_Location>>(object: I): SourceCodeInfo_Location {
    const message = createBaseSourceCodeInfo_Location();
    message.path = object.path?.map((e) => e) || [];
    message.span = object.span?.map((e) => e) || [];
    message.leadingComments = (object.leadingComments !== undefined && object.leadingComments !== null)
      ? object.leadingComments
      : undefined;
    message.trailingComments = (object.trailingComments !== undefined && object.trailingComments !== null)
      ? object.trailingComments
      : undefined;
    message.leadingDetachedComments = object.leadingDetachedComments?.map((e) => e) || [];
    return message;
  },
};

protoRegistry.registerMessage(SourceCodeInfo_Location);

function createBaseSourceCodeInfo_Location(): SourceCodeInfo_Location {
  return {
    $type: "google.protobuf.SourceCodeInfo.Location",
    path: [],
    span: [],
    leadingComments: undefined,
    trailingComments: undefined,
    leadingDetachedComments: [],
  };
}

/**
 *  Describes the relationship between generated code and its original source
 *  file. A GeneratedCodeInfo message is associated with only one generated
 *  source file, but may contain references to different source .proto files.
 *
 */
export interface GeneratedCodeInfo {
  $type: "google.protobuf.GeneratedCodeInfo";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  An Annotation connects some span of text in generated code to an element
   *  of its generating .proto file.
   *
   */
  annotation: GeneratedCodeInfo_Annotation[];
}

export const GeneratedCodeInfo: MessageFns<GeneratedCodeInfo, "google.protobuf.GeneratedCodeInfo"> = {
  $type: "google.protobuf.GeneratedCodeInfo" as const,

  encode(message: GeneratedCodeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of (message.annotation ?? [])) {
      const w = writer.uint32(10).fork();
      GeneratedCodeInfo_Annotation.encode(v, w);
      w.join();
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): GeneratedCodeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneratedCodeInfo();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) break;
          message.annotation.push(GeneratedCodeInfo_Annotation.decode(reader, reader.uint32()));
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): GeneratedCodeInfo {
    return {
      $type: "google.protobuf.GeneratedCodeInfo",
      annotation: globalThis.Array.isArray(object?.annotation ?? object?.annotation)
        ? (object.annotation ?? object.annotation).map((e: any) => GeneratedCodeInfo_Annotation.fromJSON(e))
        : [],
    };
  },
  toJSON(message: GeneratedCodeInfo, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.annotation?.length) {
      obj[pick("annotation", "annotation")] = message.annotation.map((e) => e ? GeneratedCodeInfo_Annotation.toJSON(e, use) : undefined);
    }
    return obj;
  },
  create<I extends DeepPartial<GeneratedCodeInfo>>(base?: I): GeneratedCodeInfo {
    return GeneratedCodeInfo.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<GeneratedCodeInfo>>(object: I): GeneratedCodeInfo {
    const message = createBaseGeneratedCodeInfo();
    message.annotation = object.annotation?.map((e) => GeneratedCodeInfo_Annotation.fromPartial(e)) || [];
    return message;
  },
};

protoRegistry.registerMessage(GeneratedCodeInfo);

function createBaseGeneratedCodeInfo(): GeneratedCodeInfo {
  return {
    $type: "google.protobuf.GeneratedCodeInfo",
    annotation: [],
  };
}

export interface GeneratedCodeInfo_Annotation {
  $type: "google.protobuf.GeneratedCodeInfo.Annotation";
  [unknownFieldsSymbol]?: Uint8Array | undefined;
  /**
   *  Identifies the element in the original source .proto file. This field
   *  is formatted the same as SourceCodeInfo.Location.path.
   *
   */
  path: number[];
  /**
   *  Identifies the filesystem path to the original source .proto.
   *
   */
  sourceFile?: string | undefined;
  /**
   *  Identifies the starting offset in bytes in the generated code
   *  that relates to the identified object.
   *
   */
  begin?: number | undefined;
  /**
   *  Identifies the ending offset in bytes in the generated code that
   *  relates to the identified object. The end offset should be one past
   *  the last relevant byte (so the length of the text = end - begin).
   *
   */
  end?: number | undefined;
  semantic?: GeneratedCodeInfo_Annotation_Semantic | undefined;
}

export const GeneratedCodeInfo_Annotation: MessageFns<GeneratedCodeInfo_Annotation, "google.protobuf.GeneratedCodeInfo.Annotation"> = {
  $type: "google.protobuf.GeneratedCodeInfo.Annotation" as const,

  encode(message: GeneratedCodeInfo_Annotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path?.length) {
      const w = writer.uint32(10).fork();
      for (const v of message.path) w.int32(v);
      w.join();
    }
    if (message.sourceFile !== undefined) {
      writer.uint32(18).string(message.sourceFile);
    }
    if (message.begin !== undefined) {
      writer.uint32(24).int32(message.begin);
    }
    if (message.end !== undefined) {
      writer.uint32(32).int32(message.end);
    }
    if (message.semantic !== undefined) {
      GeneratedCodeInfo_Annotation_Semantic.encodeField(writer, 5, message.semantic);
    }
    if (message[unknownFieldsSymbol]) {
      writer.raw(message[unknownFieldsSymbol]);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): GeneratedCodeInfo_Annotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneratedCodeInfo_Annotation();
    let writer: BinaryWriter | undefined = undefined;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          // packed or unpacked repeated scalar
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.path.push(reader.int32());
            }
            continue;
          } else if ((tag & 7) === 0 || (tag & 7) === 5 || (tag & 7) === 1) { // allow valid scalar wire types
            message.path.push(reader.int32());
            continue;
          }
          break; // wrong wire type
        }
        case 2: {
        if (tag !== 18) break;
        message.sourceFile = reader.string();
        continue;
      }
        case 3: {
        if (tag !== 24) break;
        message.begin = reader.int32();
        continue;
      }
        case 4: {
        if (tag !== 32) break;
        message.end = reader.int32();
        continue;
      }
        case 5: {
          if (tag !== 40) break;
          message.semantic = GeneratedCodeInfo_Annotation_Semantic.fromNumber(reader.int32());
          continue;
        }
        default:
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      {
        if (!writer) writer = new BinaryWriter();
        const skipped = reader.skip(tag & 7, tag >>> 3);
        writer.uint32(tag).raw(skipped);
      }
    }
    if (writer) {
      message[unknownFieldsSymbol] = writer.finish();
    }
    return message;
  },
  fromJSON(object: any): GeneratedCodeInfo_Annotation {
    return {
      $type: "google.protobuf.GeneratedCodeInfo.Annotation",
      path: globalThis.Array.isArray(object?.path ?? object?.path)
        ? (object.path ?? object.path).map((e: any) => Number(e))
        : [],
      sourceFile: isSet(object.sourceFile ?? object.source_file)
        ? String(object.sourceFile ?? object.source_file)
        : undefined,
      begin: isSet(object.begin ?? object.begin)
        ? Number(object.begin ?? object.begin)
        : undefined,
      end: isSet(object.end ?? object.end)
        ? Number(object.end ?? object.end)
        : undefined,
      semantic: isSet(object.semantic ?? object.semantic)
        ? GeneratedCodeInfo_Annotation_Semantic.fromJSON(object.semantic ?? object.semantic)
        : undefined,
    };
  },
  toJSON(message: GeneratedCodeInfo_Annotation, use: "json" | "pb" = "json"): unknown {
    const obj: any = {};
    const pick = (json: string, pb: string) => (use === "json" ? json : pb);
    if (message.path?.length) {
      obj[pick("path", "path")] = message.path.map((e) => e);
    }
    if (message.sourceFile !== undefined) {
      obj[pick("sourceFile", "source_file")] = message.sourceFile;
    }
    if (message.begin !== undefined) {
      obj[pick("begin", "begin")] = message.begin;
    }
    if (message.end !== undefined) {
      obj[pick("end", "end")] = message.end;
    }
    if (message.semantic !== undefined) {
      obj[pick("semantic", "semantic")] = GeneratedCodeInfo_Annotation_Semantic.toJSON(message.semantic);
    }
    return obj;
  },
  create<I extends DeepPartial<GeneratedCodeInfo_Annotation>>(base?: I): GeneratedCodeInfo_Annotation {
    return GeneratedCodeInfo_Annotation.fromPartial(base ?? {});
  },
  fromPartial<I extends DeepPartial<GeneratedCodeInfo_Annotation>>(object: I): GeneratedCodeInfo_Annotation {
    const message = createBaseGeneratedCodeInfo_Annotation();
    message.path = object.path?.map((e) => e) || [];
    message.sourceFile = (object.sourceFile !== undefined && object.sourceFile !== null)
      ? object.sourceFile
      : undefined;
    message.begin = (object.begin !== undefined && object.begin !== null)
      ? object.begin
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? object.end
      : undefined;
    message.semantic = (object.semantic !== undefined && object.semantic !== null)
      ? GeneratedCodeInfo_Annotation_Semantic.fromJSON(object.semantic.name)
      : undefined;
    return message;
  },
};

protoRegistry.registerMessage(GeneratedCodeInfo_Annotation);

function createBaseGeneratedCodeInfo_Annotation(): GeneratedCodeInfo_Annotation {
  return {
    $type: "google.protobuf.GeneratedCodeInfo.Annotation",
    path: [],
    sourceFile: undefined,
    begin: undefined,
    end: undefined,
    semantic: undefined,
  };
}

